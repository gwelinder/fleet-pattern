This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-08T17:54:52.747Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  style.css
  ui.js
src/
  index.ts
.cursorrules
.gitignore
bun.lock
IDEAS.md
package.json
README.md
tsconfig.json
wrangler.example.toml

================================================================
Files
================================================================

================
File: public/style.css
================
body {
  font-family: system-ui, -apple-system, sans-serif;
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  line-height: 1.5;
}

nav {
  margin-bottom: 30px;
}

.home-link {
  color: #0066cc;
  text-decoration: none;
}

.home-link:hover {
  text-decoration: underline;
}

.card {
  background: white;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  border: 1px solid #ddd;
}

button {
  background: #0066cc;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  background: #0052a3;
}

.delete-btn {
  background: #dc3545;
  font-size: 0.9em;
  padding: 4px 8px;
}

.delete-btn:hover {
  background: #c82333;
}

input {
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  margin-right: 8px;
}

#agents {
  list-style: none;
  padding: 0;
  margin: 0 0 20px 0;
}

#agents li {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 0;
  border-bottom: 1px solid #eee;
}

#agents li:last-child {
  border-bottom: none;
}

#agents a {
  color: #0066cc;
  text-decoration: none;
}

#agents a:hover {
  text-decoration: underline;
}

.error {
  position: fixed;
  bottom: 20px;
  right: 20px;
  background: #f8d7da;
  border-left: 4px solid #dc3545;
  color: #721c24;
  padding: 12px 20px;
  border-radius: 4px;
  animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.create-agent {
  display: flex;
  gap: 8px;
}

.no-agents {
  color: #666;
  font-style: italic;
}

.agent-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 8px;
}

.agent-controls {
  display: flex;
  gap: 8px;
  align-items: center;
}

.message-input {
  width: 200px;
}

.messages {
  position: fixed;
  bottom: 20px;
  left: 20px;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.message {
  background: #e3f2fd;
  padding: 12px 20px;
  border-radius: 4px;
  border-left: 4px solid #2196f3;
  animation: slideIn 0.3s ease-out;
}

================
File: public/ui.js
================
let ws;
let errorTimeout;

function connect() {
  const path = window.location.pathname;
  const wsUrl = `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.host}${path}`;

  ws = new WebSocket(wsUrl);

  ws.onmessage = (event) => {
    const msg = JSON.parse(event.data);
    if (msg.type === 'state') {
      updateUI(msg.payload);
    } else if (msg.type === 'error') {
      showError(msg.payload.error);
    } else if (msg.type === 'message') {
      alert(`${msg.payload.sender}: ${msg.payload.message}`);
    }
  };

  ws.onclose = () => setTimeout(connect, 1000);
}

function updateUI(state) {
  // Update counter
  document.getElementById('count').textContent = state.data.count;

  // Update agents list
  const agentsList = document.getElementById('agents');
  agentsList.innerHTML = '';

  if (state.agents.length === 0) {
    agentsList.innerHTML = '<li class="no-agents">No agents</li>';
    return;
  }

  state.agents.forEach(name => {
    const li = document.createElement('li');
    li.innerHTML = `
      <div class="agent-row">
        <a href="${window.location.pathname === '/' ? '' : window.location.pathname}/${name}">${name}</a>
        <div class="agent-controls">
          <input type="text" placeholder="Message" class="message-input" aria-label="Message for ${name}">
          <button onclick="sendMessageTo('${name}')" class="send-btn">Send</button>
          <button onclick="deleteAgent('${name}')" class="delete-btn">Delete</button>
        </div>
      </div>
    `;
    agentsList.appendChild(li);
  });
}

function showError(message) {
  clearTimeout(errorTimeout);

  let error = document.querySelector('.error');
  if (!error) {
    error = document.createElement('div');
    error.className = 'error';
    document.body.appendChild(error);
  }

  error.textContent = message;
  errorTimeout = setTimeout(() => error.remove(), 3000);
}

function sendMessage(msg) {
  if (ws?.readyState === WebSocket.OPEN) {
    ws.send(JSON.stringify(msg));
  }
}

// Event Listeners
document.getElementById('increment')?.addEventListener('click', () => {
  sendMessage({ type: 'increment' });
});

document.getElementById('create-agent')?.addEventListener('click', () => {
  const input = document.getElementById('agent-name');
  const name = input.value.trim();

  if (name) {
    sendMessage({
      type: 'createAgent',
      payload: { name }
    });
    input.value = '';
  }
});

function deleteAgent(name) {
  sendMessage({
    type: 'deleteAgent',
    payload: { name }
  });
}

// Initialize connection
connect();

function sendMessageTo(recipient) {
  const row = document.querySelector(`[onclick="sendMessageTo('${recipient}')"]`).closest('.agent-row');
  const message = row.querySelector('.message-input').value.trim();

  if (message) {
    sendMessage({
      type: 'sendMessage',
      payload: {
        recipient,
        message
      }
    });
    row.querySelector('.message-input').value = '';
  }
}

function showMessage(payload) {
  const messageDiv = document.createElement('div');
  messageDiv.className = 'message';
  messageDiv.textContent = `${payload.sender}: ${payload.message}`;
  document.querySelector('.messages').appendChild(messageDiv);
  setTimeout(() => messageDiv.remove(), 5000);
}

function broadcastMessage() {
  const input = document.getElementById('broadcast-text');
  const message = input.value.trim();

  if (message) {
    sendMessage({
      type: 'broadcast',
      payload: { message }
    });
    input.value = '';
  }
}

document.getElementById('broadcast-btn')?.addEventListener('click', () => {
  broadcastMessage();
});

================
File: src/index.ts
================
import { Hono } from 'hono'
import { DurableObjectNamespace, DurableObjectState } from '@cloudflare/workers-types'
import type { Request as CFRequest } from '@cloudflare/workers-types'

interface Env {
  FLEET_DO: DurableObjectNamespace,
}

interface AgentState {
  data: {
    count: number;
  };
  agents: string[];
}

type WSMessage = {
  type: 'increment' | 'createAgent' | 'deleteAgent' | 'sendMessage' | 'broadcast';
  payload?: {
    name?: string;
    message?: string;
    recipient?: string;
  };
}

type WSResponse = {
  type: 'state' | 'error' | 'message' | 'broadcast';
  payload: {
    data?: { count: number };
    agents?: string[];
    error?: string;
    message?: string;
    sender?: string;
  };
}

// The Worker: routes all requests through Hono
const app = new Hono<{ Bindings: Env }>()

// Route everything else to DOs
app.all('*', async (c) => {
  const path = new URL(c.req.url).pathname
  const parts = path.split('/').filter(Boolean)
  const doName = parts.length === 0 ? '/' : `/${parts.join('/')}`

  const id = c.env.FLEET_DO.idFromName(doName)
  const stub = c.env.FLEET_DO.get(id)
  return stub.fetch(c.req.raw as CFRequest)
})

export default {
  fetch: app.fetch
}

export class FleetDO {
  private app = new Hono()
  private connections = new Set<WebSocket>()

  constructor(private durableState: DurableObjectState, private env: Env) {
    this.app.get('*', c => {
      const upgradeHeader = c.req.header('Upgrade')
      if (upgradeHeader?.toLowerCase() === 'websocket') {
        return this.handleWebSocket(c)
      }
      return this.handleView(c)
    })

    this.app.delete('*', async () => {
      const data = await this.getState()

      if (data?.agents) {
        const path = new URL(this.durableState.id.toString()).pathname
        for (const agent of data.agents) {
          const childPath = path === '/' ? `/${agent}` : `${path}/${agent}`
          const childId = this.env.FLEET_DO.idFromName(childPath)
          const childStub = this.env.FLEET_DO.get(childId)
          await childStub.fetch(new Request(childPath, { method: 'DELETE' }))
        }
      }

      for (const ws of this.connections) {
        ws.close(1000, 'Agent deleted')
      }

      await this.durableState.storage.deleteAll()
      return new Response('OK')
    })

    this.app.post('*/_message', async c => {
      const body = await c.req.json()
      console.log(c.req.raw, { body })

      if (body.type === 'message') {
        this.broadcast({
          type: 'message',
          payload: {
            message: body.payload.message,
            sender: body.payload.sender
          }
        })
        return c.json({ success: true })
      }
      return c.json({ error: 'Invalid message type' }, 400)
    })
  }

  async fetch(request: Request) {
    return this.app.fetch(request)
  }

  private validateAgentName(name: string): boolean {
    return /^[a-zA-Z0-9-_]{1,32}$/.test(name)
  }

  private async getState(): Promise<AgentState> {
    return await this.durableState.storage.get<AgentState>('data') || {
      data: { count: 0 },
      agents: []
    }
  }

  private async setState(data: AgentState): Promise<void> {
    await this.durableState.storage.put('data', data)
  }

  private async handleView(c: any) {
    const data = await this.getState()
    const path = new URL(c.req.url).pathname
    const segments = path.split('/').filter(Boolean)

    // Build breadcrumb HTML
    const breadcrumbs = segments.map((segment, index) => {
      const pathToHere = '/' + segments.slice(0, index + 1).join('/')
      return `<a href="${pathToHere}" class="breadcrumb-link">${segment}</a>`
    })

    return c.html(`
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width">
          <title>Fleet</title>
          <script src="/ui.js" defer></script>
          <link rel="stylesheet" href="/style.css">
        </head>
        <body>
          <div id="app">
            <nav aria-label="Breadcrumb navigation">
              <div class="breadcrumbs">
                <a href="/" class="breadcrumb-link">root</a>
                ${breadcrumbs.length > 0 ? '/ ' + breadcrumbs.join(' / ') : ''}
              </div>
            </nav>
            
            <div class="card">
              <h2>Data</h2>
              <pre id="data"><code>${JSON.stringify(data, null, 2)}</code></pre>
              <button id="increment"><span id="count">${data.data.count}</span></button>
            </div>

            <div class="card">
              <h2>Agents</h2>
              <ul id="agents"></ul>
              
              <div class="create-agent">
                <input type="text" id="agent-name" placeholder="Agent name">
                <button id="create-agent">Create Agent</button>
              </div>

              <div class="broadcast-message">
                <input type="text" id="broadcast-text" placeholder="Message all agents">
                <button id="broadcast-btn">Broadcast</button>
              </div>
            </div>
          </div>
        </body>
      </html>
    `);
  }

  private async handleWebSocket(c: any) {
    const pair = new WebSocketPair()
    const [client, server] = Object.values(pair)
    const path = new URL(c.req.url).pathname

    server.accept()
    const data = await this.getState()
    server.send(JSON.stringify({ type: 'state', payload: data }))

    this.addConnection(path, server)

    server.addEventListener('close', () => {
      this.connections.delete(server)
    })

    server.addEventListener('message', async event => {
      try {
        const msg = JSON.parse(event.data as string) as WSMessage
        const data = await this.getState()
        const path = new URL(c.req.url).pathname
        const senderName = path.split('/').filter(Boolean).pop() || 'root'

        switch (msg.type) {
          case 'increment':
            data.data.count++
            await this.setState(data)
            break

          case 'createAgent':
            if (!msg.payload?.name) throw new Error('Agent name required')
            if (!this.validateAgentName(msg.payload.name)) {
              throw new Error('Invalid agent name')
            }
            if (data.agents.includes(msg.payload.name)) {
              throw new Error('Agent already exists')
            }
            data.agents.push(msg.payload.name)
            await this.setState(data)
            break

          case 'deleteAgent':
            if (!msg.payload?.name) throw new Error('Agent name required')
            const index = data.agents.indexOf(msg.payload.name)
            if (index === -1) throw new Error('Agent not found')
            const childPath = path === '/' ? `/${msg.payload.name}` : `${path}/${msg.payload.name}`
            const childId = this.env.FLEET_DO.idFromName(childPath)
            const childStub = this.env.FLEET_DO.get(childId)
            await childStub.fetch(new Request(`https://internal${childPath}`, { method: 'DELETE' }))

            data.agents.splice(index, 1)
            await this.setState(data)
            break

          case 'sendMessage':
            if (!msg.payload?.message) throw new Error('Message required')
            if (!msg.payload?.recipient) throw new Error('Recipient required')
            if (!data.agents.includes(msg.payload.recipient)) {
              throw new Error('Recipient not found')
            }

            const recipientPath = path === '/' ? `/${msg.payload.recipient}` : `${path}/${msg.payload.recipient}`
            const recipientId = this.env.FLEET_DO.idFromName(recipientPath)
            const recipientStub = this.env.FLEET_DO.get(recipientId)

            // Send message to recipient's DO instance
            const response = await recipientStub.fetch(new Request(`https://internal${recipientPath}/_message`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                type: 'message',
                payload: {
                  message: msg.payload.message,
                  sender: senderName
                }
              })
            }))

            break

          case 'broadcast':
            if (!msg.payload?.message) throw new Error('Message required')

            // Send message to all direct child agents
            for (const agent of data.agents) {
              const childPath = path === '/' ? `/${agent}` : `${path}/${agent}`
              const childId = this.env.FLEET_DO.idFromName(childPath)
              const childStub = this.env.FLEET_DO.get(childId)

              await childStub.fetch(new Request(`https://internal${childPath}/_message`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  type: 'message',
                  payload: {
                    message: msg.payload.message,
                    sender: senderName
                  }
                })
              }))
            }
            break
        }

        this.broadcast({ type: 'state', payload: data })

      } catch (err) {
        server.send(JSON.stringify({
          type: 'error',
          payload: { error: err.message }
        }))
      }
    })

    return new Response(null, {
      status: 101,
      webSocket: client,
    })
  }

  private broadcast(msg: WSResponse) {
    const message = JSON.stringify(msg)
    this.connections.forEach(ws => {
      if (ws.readyState === WebSocket.OPEN) {
        ws.send(message)
      }
    })
  }

  private addConnection(path: string, ws: WebSocket) {
    this.connections.add(ws)
  }

  private removeConnection(path: string, ws: WebSocket) {
    this.connections.delete(ws)
  }
}

================
File: .cursorrules
================
You're a cracked TypeScript engineer building distributed systems at the edge.

Stack:
- Cloudflare Workers
- Durable Objects
- KV/R2/D1
- WebSockets

You live and breathe:
- Zero-latency edge compute
- Type-safe distributed systems
- Performance optimization
- Modern dev tooling

================
File: .gitignore
================
# Based on https://raw.githubusercontent.com/github/gitignore/main/Node.gitignore

# Logs

logs
_.log
npm-debug.log_
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

LICENSE
# Caches

.cache

# Diagnostic reports (https://nodejs.org/api/report.html)

report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json

# Runtime data

pids
_.pid
_.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover

lib-cov

# Coverage directory used by tools like istanbul

coverage
*.lcov

# nyc test coverage

.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)

.grunt

# Bower dependency directory (https://bower.io/)

bower_components

# node-waf configuration

.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)

build/Release

# Dependency directories

node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)

web_modules/

# TypeScript cache

*.tsbuildinfo

# Optional npm cache directory

.npm

# Optional eslint cache

.eslintcache

# Optional stylelint cache

.stylelintcache

# Microbundle cache

.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history

.node_repl_history

# Output of 'npm pack'

*.tgz

# Yarn Integrity file

.yarn-integrity

# dotenv environment variable files

.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)

.parcel-cache

# Next.js build output

.next
out

# Nuxt.js build / generate output

.nuxt
dist

# Gatsby files

# Comment in the public line in if your project uses Gatsby and not Next.js

# https://nextjs.org/blog/next-9-1#public-directory-support

# public

# vuepress build output

.vuepress/dist

# vuepress v2.x temp and cache directory

.temp

# Docusaurus cache and generated files

.docusaurus

# Serverless directories

.serverless/

# FuseBox cache

.fusebox/

# DynamoDB Local files

.dynamodb/

# TernJS port file

.tern-port

# Stores VSCode versions used for testing VSCode extensions

.vscode-test

# yarn v2

.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# IntelliJ based IDEs
.idea

# Finder (MacOS) folder config
.DS_Store

.wrangler

# Dependencies
node_modules/
.pnp/
.pnp.js

# Testing
coverage/

# Production
dist/
build/
.dev.vars

# Cloudflare
.env
.dev.vars
wrangler.toml

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE and editors
.idea/
.vscode/
*.swp
*.swo
.DS_Store
*.pem

# Typescript
*.tsbuildinfo
next-env.d.ts

================
File: bun.lock
================
{
  "lockfileVersion": 1,
  "workspaces": {
    "": {
      "name": "fleet",
      "dependencies": {
        "hono": "^4.6.20",
      },
      "devDependencies": {
        "@cloudflare/workers-types": "^4.20250204.0",
        "wrangler": "^3.107.3",
      },
    },
  },
  "packages": {
    "@cloudflare/kv-asset-handler": ["@cloudflare/kv-asset-handler@0.3.4", "", { "dependencies": { "mime": "^3.0.0" } }, "sha512-YLPHc8yASwjNkmcDMQMY35yiWjoKAKnhUbPRszBRS0YgH+IXtsMp61j+yTcnCE3oO2DgP0U3iejLC8FTtKDC8Q=="],

    "@cloudflare/workerd-darwin-64": ["@cloudflare/workerd-darwin-64@1.20250129.0", "", { "os": "darwin", "cpu": "x64" }, "sha512-M+xETVnl+xy2dfDDWmp0XXr2rttl70a6bljQygl0EmYmNswFTcYbQWCaBuNBo9kabU59rLKr4a/b3QZ07NoL/g=="],

    "@cloudflare/workerd-darwin-arm64": ["@cloudflare/workerd-darwin-arm64@1.20250129.0", "", { "os": "darwin", "cpu": "arm64" }, "sha512-c4PQUyIMp+bCMxZkAMBzXgTHjRZxeYCujDbb3staestqgRbenzcfauXsMd6np35ng+EE1uBgHNPV4+7fC0ZBfg=="],

    "@cloudflare/workerd-linux-64": ["@cloudflare/workerd-linux-64@1.20250129.0", "", { "os": "linux", "cpu": "x64" }, "sha512-xJx8LwWFxsm5U3DETJwRuOmT5RWBqm4FmA4itYXvcEICca9pWJDB641kT4PnpypwDNmYOebhU7A+JUrCRucG0w=="],

    "@cloudflare/workerd-linux-arm64": ["@cloudflare/workerd-linux-arm64@1.20250129.0", "", { "os": "linux", "cpu": "arm64" }, "sha512-dR//npbaX5p323huBVNIy5gaWubQx6CC3aiXeK0yX4aD5ar8AjxQFb2U/Sgjeo65Rkt53hJWqC7IwRpK/eOxrA=="],

    "@cloudflare/workerd-windows-64": ["@cloudflare/workerd-windows-64@1.20250129.0", "", { "os": "win32", "cpu": "x64" }, "sha512-OeO+1nPj/ocAE3adFar/tRFGRkbCrBnrOYXq0FUBSpyNHpDdA9/U3PAw5CN4zvjfTnqXZfTxTFeqoruqzRzbtg=="],

    "@cloudflare/workers-types": ["@cloudflare/workers-types@4.20250204.0", "", {}, "sha512-mWoQbYaP+nYztx9I7q9sgaiNlT54Cypszz0RfzMxYnT5W3NXDuwGcjGB+5B5H5VB8tEC2dYnBRpa70lX94ueaQ=="],

    "@cspotcode/source-map-support": ["@cspotcode/source-map-support@0.8.1", "", { "dependencies": { "@jridgewell/trace-mapping": "0.3.9" } }, "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw=="],

    "@esbuild-plugins/node-globals-polyfill": ["@esbuild-plugins/node-globals-polyfill@0.2.3", "", { "peerDependencies": { "esbuild": "*" } }, "sha512-r3MIryXDeXDOZh7ih1l/yE9ZLORCd5e8vWg02azWRGj5SPTuoh69A2AIyn0Z31V/kHBfZ4HgWJ+OK3GTTwLmnw=="],

    "@esbuild-plugins/node-modules-polyfill": ["@esbuild-plugins/node-modules-polyfill@0.2.2", "", { "dependencies": { "escape-string-regexp": "^4.0.0", "rollup-plugin-node-polyfills": "^0.2.1" }, "peerDependencies": { "esbuild": "*" } }, "sha512-LXV7QsWJxRuMYvKbiznh+U1ilIop3g2TeKRzUxOG5X3YITc8JyyTa90BmLwqqv0YnX4v32CSlG+vsziZp9dMvA=="],

    "@esbuild/android-arm": ["@esbuild/android-arm@0.17.19", "", { "os": "android", "cpu": "arm" }, "sha512-rIKddzqhmav7MSmoFCmDIb6e2W57geRsM94gV2l38fzhXMwq7hZoClug9USI2pFRGL06f4IOPHHpFNOkWieR8A=="],

    "@esbuild/android-arm64": ["@esbuild/android-arm64@0.17.19", "", { "os": "android", "cpu": "arm64" }, "sha512-KBMWvEZooR7+kzY0BtbTQn0OAYY7CsiydT63pVEaPtVYF0hXbUaOyZog37DKxK7NF3XacBJOpYT4adIJh+avxA=="],

    "@esbuild/android-x64": ["@esbuild/android-x64@0.17.19", "", { "os": "android", "cpu": "x64" }, "sha512-uUTTc4xGNDT7YSArp/zbtmbhO0uEEK9/ETW29Wk1thYUJBz3IVnvgEiEwEa9IeLyvnpKrWK64Utw2bgUmDveww=="],

    "@esbuild/darwin-arm64": ["@esbuild/darwin-arm64@0.17.19", "", { "os": "darwin", "cpu": "arm64" }, "sha512-80wEoCfF/hFKM6WE1FyBHc9SfUblloAWx6FJkFWTWiCoht9Mc0ARGEM47e67W9rI09YoUxJL68WHfDRYEAvOhg=="],

    "@esbuild/darwin-x64": ["@esbuild/darwin-x64@0.17.19", "", { "os": "darwin", "cpu": "x64" }, "sha512-IJM4JJsLhRYr9xdtLytPLSH9k/oxR3boaUIYiHkAawtwNOXKE8KoU8tMvryogdcT8AU+Bflmh81Xn6Q0vTZbQw=="],

    "@esbuild/freebsd-arm64": ["@esbuild/freebsd-arm64@0.17.19", "", { "os": "freebsd", "cpu": "arm64" }, "sha512-pBwbc7DufluUeGdjSU5Si+P3SoMF5DQ/F/UmTSb8HXO80ZEAJmrykPyzo1IfNbAoaqw48YRpv8shwd1NoI0jcQ=="],

    "@esbuild/freebsd-x64": ["@esbuild/freebsd-x64@0.17.19", "", { "os": "freebsd", "cpu": "x64" }, "sha512-4lu+n8Wk0XlajEhbEffdy2xy53dpR06SlzvhGByyg36qJw6Kpfk7cp45DR/62aPH9mtJRmIyrXAS5UWBrJT6TQ=="],

    "@esbuild/linux-arm": ["@esbuild/linux-arm@0.17.19", "", { "os": "linux", "cpu": "arm" }, "sha512-cdmT3KxjlOQ/gZ2cjfrQOtmhG4HJs6hhvm3mWSRDPtZ/lP5oe8FWceS10JaSJC13GBd4eH/haHnqf7hhGNLerA=="],

    "@esbuild/linux-arm64": ["@esbuild/linux-arm64@0.17.19", "", { "os": "linux", "cpu": "arm64" }, "sha512-ct1Tg3WGwd3P+oZYqic+YZF4snNl2bsnMKRkb3ozHmnM0dGWuxcPTTntAF6bOP0Sp4x0PjSF+4uHQ1xvxfRKqg=="],

    "@esbuild/linux-ia32": ["@esbuild/linux-ia32@0.17.19", "", { "os": "linux", "cpu": "ia32" }, "sha512-w4IRhSy1VbsNxHRQpeGCHEmibqdTUx61Vc38APcsRbuVgK0OPEnQ0YD39Brymn96mOx48Y2laBQGqgZ0j9w6SQ=="],

    "@esbuild/linux-loong64": ["@esbuild/linux-loong64@0.17.19", "", { "os": "linux", "cpu": "none" }, "sha512-2iAngUbBPMq439a+z//gE+9WBldoMp1s5GWsUSgqHLzLJ9WoZLZhpwWuym0u0u/4XmZ3gpHmzV84PonE+9IIdQ=="],

    "@esbuild/linux-mips64el": ["@esbuild/linux-mips64el@0.17.19", "", { "os": "linux", "cpu": "none" }, "sha512-LKJltc4LVdMKHsrFe4MGNPp0hqDFA1Wpt3jE1gEyM3nKUvOiO//9PheZZHfYRfYl6AwdTH4aTcXSqBerX0ml4A=="],

    "@esbuild/linux-ppc64": ["@esbuild/linux-ppc64@0.17.19", "", { "os": "linux", "cpu": "ppc64" }, "sha512-/c/DGybs95WXNS8y3Ti/ytqETiW7EU44MEKuCAcpPto3YjQbyK3IQVKfF6nbghD7EcLUGl0NbiL5Rt5DMhn5tg=="],

    "@esbuild/linux-riscv64": ["@esbuild/linux-riscv64@0.17.19", "", { "os": "linux", "cpu": "none" }, "sha512-FC3nUAWhvFoutlhAkgHf8f5HwFWUL6bYdvLc/TTuxKlvLi3+pPzdZiFKSWz/PF30TB1K19SuCxDTI5KcqASJqA=="],

    "@esbuild/linux-s390x": ["@esbuild/linux-s390x@0.17.19", "", { "os": "linux", "cpu": "s390x" }, "sha512-IbFsFbxMWLuKEbH+7sTkKzL6NJmG2vRyy6K7JJo55w+8xDk7RElYn6xvXtDW8HCfoKBFK69f3pgBJSUSQPr+4Q=="],

    "@esbuild/linux-x64": ["@esbuild/linux-x64@0.17.19", "", { "os": "linux", "cpu": "x64" }, "sha512-68ngA9lg2H6zkZcyp22tsVt38mlhWde8l3eJLWkyLrp4HwMUr3c1s/M2t7+kHIhvMjglIBrFpncX1SzMckomGw=="],

    "@esbuild/netbsd-x64": ["@esbuild/netbsd-x64@0.17.19", "", { "os": "none", "cpu": "x64" }, "sha512-CwFq42rXCR8TYIjIfpXCbRX0rp1jo6cPIUPSaWwzbVI4aOfX96OXY8M6KNmtPcg7QjYeDmN+DD0Wp3LaBOLf4Q=="],

    "@esbuild/openbsd-x64": ["@esbuild/openbsd-x64@0.17.19", "", { "os": "openbsd", "cpu": "x64" }, "sha512-cnq5brJYrSZ2CF6c35eCmviIN3k3RczmHz8eYaVlNasVqsNY+JKohZU5MKmaOI+KkllCdzOKKdPs762VCPC20g=="],

    "@esbuild/sunos-x64": ["@esbuild/sunos-x64@0.17.19", "", { "os": "sunos", "cpu": "x64" }, "sha512-vCRT7yP3zX+bKWFeP/zdS6SqdWB8OIpaRq/mbXQxTGHnIxspRtigpkUcDMlSCOejlHowLqII7K2JKevwyRP2rg=="],

    "@esbuild/win32-arm64": ["@esbuild/win32-arm64@0.17.19", "", { "os": "win32", "cpu": "arm64" }, "sha512-yYx+8jwowUstVdorcMdNlzklLYhPxjniHWFKgRqH7IFlUEa0Umu3KuYplf1HUZZ422e3NU9F4LGb+4O0Kdcaag=="],

    "@esbuild/win32-ia32": ["@esbuild/win32-ia32@0.17.19", "", { "os": "win32", "cpu": "ia32" }, "sha512-eggDKanJszUtCdlVs0RB+h35wNlb5v4TWEkq4vZcmVt5u/HiDZrTXe2bWFQUez3RgNHwx/x4sk5++4NSSicKkw=="],

    "@esbuild/win32-x64": ["@esbuild/win32-x64@0.17.19", "", { "os": "win32", "cpu": "x64" }, "sha512-lAhycmKnVOuRYNtRtatQR1LPQf2oYCkRGkSFnseDAKPl8lu5SOsK/e1sXe5a0Pc5kHIHe6P2I/ilntNv2xf3cA=="],

    "@fastify/busboy": ["@fastify/busboy@2.1.1", "", {}, "sha512-vBZP4NlzfOlerQTnba4aqZoMhE/a9HY7HRqoOPaETQcSQuWEIyZMHGfVu6w9wGtGK5fED5qRs2DteVCjOH60sA=="],

    "@jridgewell/resolve-uri": ["@jridgewell/resolve-uri@3.1.2", "", {}, "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw=="],

    "@jridgewell/sourcemap-codec": ["@jridgewell/sourcemap-codec@1.5.0", "", {}, "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ=="],

    "@jridgewell/trace-mapping": ["@jridgewell/trace-mapping@0.3.9", "", { "dependencies": { "@jridgewell/resolve-uri": "^3.0.3", "@jridgewell/sourcemap-codec": "^1.4.10" } }, "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ=="],

    "acorn": ["acorn@8.14.0", "", { "bin": { "acorn": "bin/acorn" } }, "sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA=="],

    "acorn-walk": ["acorn-walk@8.3.4", "", { "dependencies": { "acorn": "^8.11.0" } }, "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g=="],

    "as-table": ["as-table@1.0.55", "", { "dependencies": { "printable-characters": "^1.0.42" } }, "sha512-xvsWESUJn0JN421Xb9MQw6AsMHRCUknCe0Wjlxvjud80mU4E6hQf1A6NzQKcYNmYw62MfzEtXc+badstZP3JpQ=="],

    "blake3-wasm": ["blake3-wasm@2.1.5", "", {}, "sha512-F1+K8EbfOZE49dtoPtmxUQrpXaBIl3ICvasLh+nJta0xkz+9kF/7uet9fLnwKqhDrmj6g+6K3Tw9yQPUg2ka5g=="],

    "confbox": ["confbox@0.1.8", "", {}, "sha512-RMtmw0iFkeR4YV+fUOSucriAQNb9g8zFR52MWCtl+cCZOFRNL6zeB395vPzFhEjjn4fMxXudmELnl/KF/WrK6w=="],

    "cookie": ["cookie@0.7.2", "", {}, "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w=="],

    "data-uri-to-buffer": ["data-uri-to-buffer@2.0.2", "", {}, "sha512-ND9qDTLc6diwj+Xe5cdAgVTbLVdXbtxTJRXRhli8Mowuaan+0EJOtdqJ0QCHNSSPyoXGx9HX2/VMnKeC34AChA=="],

    "defu": ["defu@6.1.4", "", {}, "sha512-mEQCMmwJu317oSz8CwdIOdwf3xMif1ttiM8LTufzc3g6kR+9Pe236twL8j3IYT1F7GfRgGcW6MWxzZjLIkuHIg=="],

    "esbuild": ["esbuild@0.17.19", "", { "optionalDependencies": { "@esbuild/android-arm": "0.17.19", "@esbuild/android-arm64": "0.17.19", "@esbuild/android-x64": "0.17.19", "@esbuild/darwin-arm64": "0.17.19", "@esbuild/darwin-x64": "0.17.19", "@esbuild/freebsd-arm64": "0.17.19", "@esbuild/freebsd-x64": "0.17.19", "@esbuild/linux-arm": "0.17.19", "@esbuild/linux-arm64": "0.17.19", "@esbuild/linux-ia32": "0.17.19", "@esbuild/linux-loong64": "0.17.19", "@esbuild/linux-mips64el": "0.17.19", "@esbuild/linux-ppc64": "0.17.19", "@esbuild/linux-riscv64": "0.17.19", "@esbuild/linux-s390x": "0.17.19", "@esbuild/linux-x64": "0.17.19", "@esbuild/netbsd-x64": "0.17.19", "@esbuild/openbsd-x64": "0.17.19", "@esbuild/sunos-x64": "0.17.19", "@esbuild/win32-arm64": "0.17.19", "@esbuild/win32-ia32": "0.17.19", "@esbuild/win32-x64": "0.17.19" }, "bin": { "esbuild": "bin/esbuild" } }, "sha512-XQ0jAPFkK/u3LcVRcvVHQcTIqD6E2H1fvZMA5dQPSOWb3suUbWbfbRf94pjc0bNzRYLfIrDRQXr7X+LHIm5oHw=="],

    "escape-string-regexp": ["escape-string-regexp@4.0.0", "", {}, "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA=="],

    "estree-walker": ["estree-walker@0.6.1", "", {}, "sha512-SqmZANLWS0mnatqbSfRP5g8OXZC12Fgg1IwNtLsyHDzJizORW4khDfjPqJZsemPWBB2uqykUah5YpQ6epsqC/w=="],

    "exit-hook": ["exit-hook@2.2.1", "", {}, "sha512-eNTPlAD67BmP31LDINZ3U7HSF8l57TxOY2PmBJ1shpCvpnxBF93mWCE8YHBnXs8qiUZJc9WDcWIeC3a2HIAMfw=="],

    "fsevents": ["fsevents@2.3.3", "", { "os": "darwin" }, "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw=="],

    "get-source": ["get-source@2.0.12", "", { "dependencies": { "data-uri-to-buffer": "^2.0.0", "source-map": "^0.6.1" } }, "sha512-X5+4+iD+HoSeEED+uwrQ07BOQr0kEDFMVqqpBuI+RaZBpBpHCuXxo70bjar6f0b0u/DQJsJ7ssurpP0V60Az+w=="],

    "glob-to-regexp": ["glob-to-regexp@0.4.1", "", {}, "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw=="],

    "hono": ["hono@4.6.20", "", {}, "sha512-5qfNQeaIptMaJKyoJ6N/q4gIq0DBp2FCRaLNuUI3LlJKL4S37DY/rLL1uAxA4wrPB39tJ3s+f7kgI79O4ScSug=="],

    "magic-string": ["magic-string@0.25.9", "", { "dependencies": { "sourcemap-codec": "^1.4.8" } }, "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ=="],

    "mime": ["mime@3.0.0", "", { "bin": { "mime": "cli.js" } }, "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A=="],

    "miniflare": ["miniflare@3.20250129.0", "", { "dependencies": { "@cspotcode/source-map-support": "0.8.1", "acorn": "^8.8.0", "acorn-walk": "^8.2.0", "exit-hook": "^2.2.1", "glob-to-regexp": "^0.4.1", "stoppable": "^1.1.0", "undici": "^5.28.4", "workerd": "1.20250129.0", "ws": "^8.18.0", "youch": "^3.2.2", "zod": "^3.22.3" }, "bin": { "miniflare": "bootstrap.js" } }, "sha512-qYlGEjMl/2kJdgNaztj4hpA64d6Dl79Lx/NL61p/v5XZRiWanBOTgkQqdPxCKZOj6KQnioqhC7lfd6jDXKSs2A=="],

    "mlly": ["mlly@1.7.4", "", { "dependencies": { "acorn": "^8.14.0", "pathe": "^2.0.1", "pkg-types": "^1.3.0", "ufo": "^1.5.4" } }, "sha512-qmdSIPC4bDJXgZTCR7XosJiNKySV7O215tsPtDN9iEO/7q/76b/ijtgRu/+epFXSJhijtTCCGp3DWS549P3xKw=="],

    "mustache": ["mustache@4.2.0", "", { "bin": { "mustache": "bin/mustache" } }, "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ=="],

    "ohash": ["ohash@1.1.4", "", {}, "sha512-FlDryZAahJmEF3VR3w1KogSEdWX3WhA5GPakFx4J81kEAiHyLMpdLLElS8n8dfNadMgAne/MywcvmogzscVt4g=="],

    "path-to-regexp": ["path-to-regexp@6.3.0", "", {}, "sha512-Yhpw4T9C6hPpgPeA28us07OJeqZ5EzQTkbfwuhsUg0c237RomFoETJgmp2sa3F/41gfLE6G5cqcYwznmeEeOlQ=="],

    "pathe": ["pathe@1.1.2", "", {}, "sha512-whLdWMYL2TwI08hn8/ZqAbrVemu0LNaNNJZX73O6qaIdCTfXutsLhMkjdENX0qhsQ9uIimo4/aQOmXkoon2nDQ=="],

    "pkg-types": ["pkg-types@1.3.1", "", { "dependencies": { "confbox": "^0.1.8", "mlly": "^1.7.4", "pathe": "^2.0.1" } }, "sha512-/Jm5M4RvtBFVkKWRu2BLUTNP8/M2a+UwuAX+ae4770q1qVGtfjG+WTCupoZixokjmHiry8uI+dlY8KXYV5HVVQ=="],

    "printable-characters": ["printable-characters@1.0.42", "", {}, "sha512-dKp+C4iXWK4vVYZmYSd0KBH5F/h1HoZRsbJ82AVKRO3PEo8L4lBS/vLwhVtpwwuYcoIsVY+1JYKR268yn480uQ=="],

    "rollup-plugin-inject": ["rollup-plugin-inject@3.0.2", "", { "dependencies": { "estree-walker": "^0.6.1", "magic-string": "^0.25.3", "rollup-pluginutils": "^2.8.1" } }, "sha512-ptg9PQwzs3orn4jkgXJ74bfs5vYz1NCZlSQMBUA0wKcGp5i5pA1AO3fOUEte8enhGUC+iapTCzEWw2jEFFUO/w=="],

    "rollup-plugin-node-polyfills": ["rollup-plugin-node-polyfills@0.2.1", "", { "dependencies": { "rollup-plugin-inject": "^3.0.0" } }, "sha512-4kCrKPTJ6sK4/gLL/U5QzVT8cxJcofO0OU74tnB19F40cmuAKSzH5/siithxlofFEjwvw1YAhPmbvGNA6jEroA=="],

    "rollup-pluginutils": ["rollup-pluginutils@2.8.2", "", { "dependencies": { "estree-walker": "^0.6.1" } }, "sha512-EEp9NhnUkwY8aif6bxgovPHMoMoNr2FulJziTndpt5H9RdwC47GSGuII9XxpSdzVGM0GWrNPHV6ie1LTNJPaLQ=="],

    "source-map": ["source-map@0.6.1", "", {}, "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="],

    "sourcemap-codec": ["sourcemap-codec@1.4.8", "", {}, "sha512-9NykojV5Uih4lgo5So5dtw+f0JgJX30KCNI8gwhz2J9A15wD0Ml6tjHKwf6fTSa6fAdVBdZeNOs9eJ71qCk8vA=="],

    "stacktracey": ["stacktracey@2.1.8", "", { "dependencies": { "as-table": "^1.0.36", "get-source": "^2.0.12" } }, "sha512-Kpij9riA+UNg7TnphqjH7/CzctQ/owJGNbFkfEeve4Z4uxT5+JapVLFXcsurIfN34gnTWZNJ/f7NMG0E8JDzTw=="],

    "stoppable": ["stoppable@1.1.0", "", {}, "sha512-KXDYZ9dszj6bzvnEMRYvxgeTHU74QBFL54XKtP3nyMuJ81CFYtABZ3bAzL2EdFUaEwJOBOgENyFj3R7oTzDyyw=="],

    "ufo": ["ufo@1.5.4", "", {}, "sha512-UsUk3byDzKd04EyoZ7U4DOlxQaD14JUKQl6/P7wiX4FNvUfm3XL246n9W5AmqwW5RSFJ27NAuM0iLscAOYUiGQ=="],

    "undici": ["undici@5.28.5", "", { "dependencies": { "@fastify/busboy": "^2.0.0" } }, "sha512-zICwjrDrcrUE0pyyJc1I2QzBkLM8FINsgOrt6WjA+BgajVq9Nxu2PbFFXUrAggLfDXlZGZBVZYw7WNV5KiBiBA=="],

    "unenv": ["unenv@2.0.0-rc.1", "", { "dependencies": { "defu": "^6.1.4", "mlly": "^1.7.4", "ohash": "^1.1.4", "pathe": "^1.1.2", "ufo": "^1.5.4" } }, "sha512-PU5fb40H8X149s117aB4ytbORcCvlASdtF97tfls4BPIyj4PeVxvpSuy1jAptqYHqB0vb2w2sHvzM0XWcp2OKg=="],

    "workerd": ["workerd@1.20250129.0", "", { "optionalDependencies": { "@cloudflare/workerd-darwin-64": "1.20250129.0", "@cloudflare/workerd-darwin-arm64": "1.20250129.0", "@cloudflare/workerd-linux-64": "1.20250129.0", "@cloudflare/workerd-linux-arm64": "1.20250129.0", "@cloudflare/workerd-windows-64": "1.20250129.0" }, "bin": { "workerd": "bin/workerd" } }, "sha512-Rprz8rxKTF4l6q/nYYI07lBetJnR19mGipx+u/a27GZOPKMG5SLIzA2NciZlJaB2Qd5YY+4p/eHOeKqo5keVWA=="],

    "wrangler": ["wrangler@3.107.3", "", { "dependencies": { "@cloudflare/kv-asset-handler": "0.3.4", "@esbuild-plugins/node-globals-polyfill": "0.2.3", "@esbuild-plugins/node-modules-polyfill": "0.2.2", "blake3-wasm": "2.1.5", "esbuild": "0.17.19", "miniflare": "3.20250129.0", "path-to-regexp": "6.3.0", "unenv": "2.0.0-rc.1", "workerd": "1.20250129.0" }, "optionalDependencies": { "fsevents": "~2.3.2" }, "peerDependencies": { "@cloudflare/workers-types": "^4.20250129.0" }, "optionalPeers": ["@cloudflare/workers-types"], "bin": { "wrangler": "bin/wrangler.js", "wrangler2": "bin/wrangler.js" } }, "sha512-N9ZMDHZ+DI5/B0yclr3bG57U/Zw7wSzGdpO2l7j6+3q8yUf+4Fk0Rvneo2t8rjLewKlvqgt9D9siFuo8MXJ55Q=="],

    "ws": ["ws@8.18.0", "", { "peerDependencies": { "bufferutil": "^4.0.1", "utf-8-validate": ">=5.0.2" }, "optionalPeers": ["bufferutil", "utf-8-validate"] }, "sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw=="],

    "youch": ["youch@3.3.4", "", { "dependencies": { "cookie": "^0.7.1", "mustache": "^4.2.0", "stacktracey": "^2.1.8" } }, "sha512-UeVBXie8cA35DS6+nBkls68xaBBXCye0CNznrhszZjTbRVnJKQuNsyLKBTTL4ln1o1rh2PKtv35twV7irj5SEg=="],

    "zod": ["zod@3.24.1", "", {}, "sha512-muH7gBL9sI1nciMZV67X5fTKKBLtwpZ5VBp1vsOQzj1MhrBZ4wlVCm3gedKZWLp0Oyel8sIGfeiz54Su+OVT+A=="],

    "mlly/pathe": ["pathe@2.0.2", "", {}, "sha512-15Ztpk+nov8DR524R4BF7uEuzESgzUEAV4Ah7CUMNGXdE5ELuvxElxGXndBl32vMSsWa1jpNf22Z+Er3sKwq+w=="],

    "pkg-types/pathe": ["pathe@2.0.2", "", {}, "sha512-15Ztpk+nov8DR524R4BF7uEuzESgzUEAV4Ah7CUMNGXdE5ELuvxElxGXndBl32vMSsWa1jpNf22Z+Er3sKwq+w=="],
  }
}

================
File: IDEAS.md
================
# IDEAS.md

## Key Principles:
- Each DO should be self-contained and useful in isolation
- Communication between DOs should enhance functionality, not be required for basic operation
- The edge location should provide meaningful advantages
- State persistence should enable unique capabilities
- Real-time interaction should be core to the design

_________

## Potential Use Cases
1. Real-time Collaborative IDE
- Each file is a DO with its own operational transform engine
- Real-time cursors and editing between users
- File-specific permissions and history
- Instant file search within its scope

2. Distributed Task Runner
- Each stage manages its own tasks
- Tasks can communicate status up the chain
- Automatic retry and failure management
- Real-time progress monitoring

3. IoT Device Management
- Each level manages its own device fleet
- Real-time sensor data aggregation
- Hierarchical alerts and monitoring
- Local state caching for offline resilience

4. Game Server Infrastructure
- Each instance is its own game server
- Real-time player state management
- Instance-to-instance communication
- Regional matchmaking

5. Content Management System
- Each page manages its own content and cache
- Real-time preview and collaboration
- Hierarchical permissions
- Instant content propagation

6. Distributed Chat System
- Each thread manages its own messages
- Real-time presence and typing indicators
- Message persistence and search
- Cross-thread notifications

# Advanced Edge Computing Concepts

1. AI Agent Home
- Each DO is a persistent AI agent with memory
- Natural language terminal interface
- Can spawn child processes for parallel tasks
- Maintains conversation history and learned behaviors
- WebSocket to other agents for collaborative problem solving
- Built-in function calling system

2. Edge-Native Virtual Machine
- Each DO is a lightweight VM
- Custom WASM runtime environment
- File system simulation
- Network interface simulation
- Process management

3. Universal State Machine
- Each DO is a programmable state machine
- Custom state transition rules
- Event sourcing
- Time-travel debugging
- Visual state flow representation

4. Edge Database Engine
- Each DO is a full database engine
- Custom query language
- Index management
- Transaction support
- Real-time query subscriptions

5. Edge Operating System
- Each DO is a minimal operating system
- Process scheduling
- Memory management
- I/O handling
- System calls

# Edge AI Applications

1. Edge Prompt Chain Debugger
- Each DO is a live prompt engineering lab
- Visual chain execution with real-time state
- Modify prompts mid-chain and see changes instantly
- Branch and compare different prompt paths
- Export optimized chains as code
- Record token usage and cost analytics

2. AI Document Companion
- Each DO "inhabits" a document (PDF, doc, webpage)
- Builds deep contextual understanding over time
- Learns from every user interaction
- Maintains conversation history per-user
- Auto-generates tests to verify its knowledge
- Identifies and resolves knowledge conflicts

3. Code Evolution Engine
- Each DO manages a single code file/module
- Continuous background code improvement
- Suggests refactors based on usage patterns
- Auto-generates tests and documentation
- Learns your coding style and preferences
- Real-time pair programming with context

4. AI Protocol Adapter
- Each DO is an AI-powered API transformer
- Auto-converts between API formats/versions
- Learns from traffic patterns
- Self-heals breaking changes
- Generates SDK code on demand
- Real-time API documentation

# Edge Infrastructure Tools

1. Personal URL Shortener Plus
- Each DO is a smart link redirector
- A/B testing built in
- Real-time analytics
- Traffic shaping/throttling
- Geographic routing

2. Edge Load Balancer
- Each DO is a smart load balancer
- Real-time health checks
- Dynamic routing rules
- Circuit breaking
- Traffic visualization

3. Edge Rate Limiter
- Each DO manages rate limiting
- Token bucket algorithm
- Real-time quota adjustments
- Cross-region coordination
- Usage analytics

4. Edge A/B Testing Engine
- Each DO manages split testing
- Real-time variant assignment
- Statistical analysis
- User segmentation
- Results visualization

================
File: package.json
================
{
  "name": "fleet-pattern",
  "version": "1.0.0",
  "description": "A demonstration of hierarchical Durable Objects in Cloudflare Workers",
  "module": "index.ts",
  "type": "module",
  "scripts": {
    "dev": "wrangler dev",
    "deploy": "bunx wrangler deploy"
  },
  "author": "Jordan Coeyman",
  "license": "MIT",
  "keywords": [
    "cloudflare-workers",
    "durable-objects",
    "websockets",
    "typescript",
    "edge-computing",
    "real-time"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/acoyfellow/fleet-pattern"
  },
  "dependencies": {
    "hono": "^4.6.20"
  },
  "devDependencies": {
    "@cloudflare/workers-types": "^4.20250204.0",
    "wrangler": "^3.107.3"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}

================
File: README.md
================
# Fleet - Hierarchical Durable Objects Demo

A demonstration of hierarchical Durable Objects in Cloudflare Workers, enabling infinite nesting of manager/agent relationships through URL paths.

![alt text](https://github.com/acoyfellow/fleet-pattern/blob/main/public/fleet-pattern.jpg?raw=true)

## Features

- **Single DO Architecture**: Unified Durable Object class handling both manager and agent roles
- **Dynamic Hierarchy**: Automatic DO creation and management based on URL paths
- **Real-time Updates**: WebSocket-based communication for instant state changes
- **Production Ready**:
  - Input validation
  - Error handling
  - Type safety
  - Clean shutdown procedures

## Setup

1. Copy `wrangler.example.toml` to `wrangler.toml`:
```bash
cp wrangler.example.toml wrangler.toml
```

2. Install dependencies:
```bash
npm install
# or if using bun
bun install
```

3. Start the development server:
```bash
npm run dev
# or
bun run dev
```

4. Deploy to Cloudflare Workers:
```bash
npm run deploy
# or
bun run deploy
```

## Architecture

### URL-Based Hierarchy
```
Root (/)
├── agent1
│   ├── subagent1
│   └── subagent2
│       └── subagent2
└── agent2
    └── subagent3
```

Each path segment represents a unique Durable Object instance, creating an infinitely nestable hierarchy.

### State Management

Each DO maintains:
- Local counter
- List of child agents
- WebSocket connections

### Communication

- **WebSocket Protocol**: Real-time bidirectional communication
- **Message Types**:
  - `increment`: Update local counter
  - `createAgent`: Spawn new child agent
  - `deleteAgent`: Remove child agent and its subtree
  - `state`: Current DO state updates
  - `error`: Error notifications

## Security

- Input validation for agent names (alphanumeric, dash, underscore, 1-32 chars)
- Secure WebSocket handling with proper connection lifecycle
- Hierarchical deletion safety with cascading cleanup

## Example Usage

1. **Root Manager** (`/`):
   - View and manage top-level agents
   - Monitor system state

2. **Agent Management**:
   - Create: Enter agent name and click "Create"
   - Navigate: Click agent names to traverse hierarchy
   - Delete: Remove agents and their complete subtree

3. **Agent Communication**:
   - Direct Message: Use the message input field next to each agent to send them a private message
   - Broadcast: Use the broadcast input at the bottom to send a message to all child agents
   - Messages appear as alerts and are ephemeral (not stored)

4. **Nested Structures**:
   - `/team1/project1/task1`
   - `/region1/server1/process1`
   - `/department1/group1/user1`

## Technical Stack

- **Runtime**: [Cloudflare Workers](https://workers.cloudflare.com/)
- **State Management**: [Durable Objects](https://developers.cloudflare.com/workers/runtime-apis/durable-objects/)
- **Framework**: [Hono](https://hono.dev/)
- **Language**: [TypeScript](https://www.typescriptlang.org/)
- **Real-time**: WebSocket API

## Production Considerations

- Handles cascading deletions safely
- Provides real-time error feedback
- Maintains WebSocket connection state
- Implements proper error handling and validation

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ES2020",
    "lib": [
      "ES2020"
    ],
    "types": [
      "@cloudflare/workers-types"
    ],
    "moduleResolution": "node",
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "isolatedModules": true
  },
  "exclude": [
    "node_modules",
    "dist"
  ]
}

================
File: wrangler.example.toml
================
name = "fleet"
main = "src/index.ts"
compatibility_date = "2024-01-01"

assets = { directory = "public" }

[build.upload]
format = "modules"

[durable_objects]
bindings = [
  { name = "FLEET_DO", class_name = "FleetDO" }
]

[[migrations]]
tag = "v1"
new_classes = ["FleetDO"] 

[observability.logs]
enabled = true



================================================================
End of Codebase
================================================================
