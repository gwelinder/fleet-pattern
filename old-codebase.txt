<repomix>This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document. The content has been processed where comments have been removed, content has been formatted for parsing.
Generated by Repomix on: 2025-02-08T17:43:41.674Z<file_summary>This section contains a summary of this file.<purpose>This file contains a packed representation of the entire repository&apos;s contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.</purpose><file_format>The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file</file_format><usage_guidelines>- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.</usage_guidelines><notes>- Some files may have been excluded based on .gitignore rules and Repomix&apos;s configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: middleware.ts, .env.local, app/actionchat/page.tsx, app/actionchat/layout.tsx, app/actionchat/action.tsx, app/actionchat/component/fileupload.tsx, app/actionchat/[id]/page.tsx, app/actionchat/hooks/chat-scroll-anchor.tsx, app/actionchat/component/ChatComponent.tsx, app/actionchat/component/ChatWrapper.tsx, app/actionchat/component/ErrorBoundary.tsx, app/actionchat/component/PDFViewer.tsx, app/actionchat/component/UserChatList.tsx, app/aichat/layout.tsx, app/@modal/(.)signin/SignInCard.tsx, app/@modal/(.)signin/ModalWrapper.tsx, app/@modal/(.)signup/ModalWrapper.tsx, app/@modal/ForgotPassword.tsx, app/@modal/Content.tsx, app/@modal/(.)signin/CloseButton.tsx, app/api/chat/SaveToDb.ts, app/@modal/(.)signup/CloseButton.tsx, app/@modal/(.)signin/page.tsx, postcss.config.mjs, app/globals.css, app/@modal/(.)signup/SignUpCard.tsx, components.json, lib/server/server.ts, lib/server/admin.ts, lib/client/client.ts, types/database.d.ts, lib/server/supabase.ts, docs/PRD.md, docs/API.md, docs/Schema.md, plan.md, docs/SRS.md, docs/Roadmap_gemini.md, .cursorrules, docs/Roadmap_meta.md, app/actions/assistants.ts, docs/Roadmap_r1.md, docs/Roadmap_o3-mini.md, auth.ts, supabase/config.toml, components/ui/button.tsx, components/ui/icons.tsx, middleware.config.ts, app/documents/page.tsx, app/components/ui/Footer/Footer.tsx, app/components/ui/SnackbarMessage.tsx, app/components/ui/Navbar/Signout.tsx, app/(auth)/Content.tsx, app/(auth)/ForgotPassword.tsx, app/redirect/auth-password-update/PasswordUpdateForm.tsx, app/redirect/auth-password-update/action.ts, app/redirect/auth-password-update/messages.tsx, app/redirect/auth-password-update/page.tsx, app/protected/page.tsx, app/admin/page.tsx, app/api/auth/callback/route.ts, app/api/auth/confirm/route.ts, app/(auth)/OAuth.ts, app/(auth)/messages.tsx, app/(auth)/signin/SignInCard.tsx, app/(auth)/signin/page.tsx, app/(auth)/signup/SignUpCard.tsx, app/(auth)/signup/page.tsx, app/actions/companies.ts, components/ui/form.tsx, components/ui/input.tsx, components/chat.tsx, supabase/migrations/20240202_initial.sql, app/layout.tsx, app/page.tsx, components/providers/toaster-provider.tsx, lib/utils.ts, components/ui/toaster.tsx, components/ui/use-toast.ts, components/ui/toast.tsx, components/document-analysis.tsx, components/document-upload.tsx, components/files.tsx, .next/(chat)/api/files/delete/route.ts, .next/(chat)/api/files/upload/route.ts, .next/(chat)/api/files/list/route.ts, app/actions/analysis.ts, app/components/errorBoundary/ErrorBoundaryPage.tsx, app/components/ui/Navbar/SitemarkIcon.tsx, app/aichat/components/chat.tsx, app/aichat/[id]/page.tsx, app/components/landingpage/Testimonials.tsx, app/aichat/components/UserCharListDrawer.tsx, components/add-company-dialog.tsx, app/components/landingpage/Profile.tsx, app/components/landingpage/FeatureCard.tsx, app/components/landingpage/Banner.tsx, prettier.config.js, next.config.ts, instrumentation.ts, tsconfig.json, tailwind.config.ts, eslint.config.mjs, app/actions/documents.ts, app/@modal/CustomIcons.tsx, lib/companyProvider.tsx, components/company-selector.tsx, components/delete-company-dialog.tsx, components/ui/command.tsx, app/actions/document.ts, supabase/migrations/00000000000000_initial.sql
- Files matching these patterns are excluded: drizzle/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Content has been formatted for parsing in xml style</notes><additional_info></additional_info></file_summary><directory_structure>app/
  (auth)/
    signin/
      page.tsx
      SignInCard.tsx
    signup/
      page.tsx
      SignUpCard.tsx
    Content.tsx
    ForgotPassword.tsx
    messages.tsx
    OAuth.ts
  @modal/
    (.)signin/
      CloseButton.tsx
      ModalWrapper.tsx
      page.tsx
      SignInCard.tsx
    (.)signup/
      CloseButton.tsx
      ModalWrapper.tsx
      SignUpCard.tsx
    Content.tsx
    CustomIcons.tsx
    ForgotPassword.tsx
  actionchat/
    [id]/
      page.tsx
    component/
      ChatComponent.tsx
      ChatWrapper.tsx
      ErrorBoundary.tsx
      fileupload.tsx
      PDFViewer.tsx
      UserChatList.tsx
    hooks/
      chat-scroll-anchor.tsx
    action.tsx
    layout.tsx
    page.tsx
  actions/
    analysis.ts
    assistants.ts
    companies.ts
    document.ts
    documents.ts
  admin/
    page.tsx
  aichat/
    [id]/
      page.tsx
    components/
      chat.tsx
      UserCharListDrawer.tsx
    layout.tsx
  api/
    auth/
      callback/
        route.ts
      confirm/
        route.ts
    chat/
      SaveToDb.ts
  components/
    errorBoundary/
      ErrorBoundaryPage.tsx
    landingpage/
      Banner.tsx
      FeatureCard.tsx
      Profile.tsx
      Testimonials.tsx
    ui/
      Footer/
        Footer.tsx
      Navbar/
        Signout.tsx
        SitemarkIcon.tsx
      SnackbarMessage.tsx
  documents/
    page.tsx
  protected/
    page.tsx
  redirect/
    auth-password-update/
      action.ts
      messages.tsx
      page.tsx
      PasswordUpdateForm.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  providers/
    toaster-provider.tsx
  ui/
    button.tsx
    command.tsx
    form.tsx
    icons.tsx
    input.tsx
    toast.tsx
    toaster.tsx
    use-toast.ts
  add-company-dialog.tsx
  chat.tsx
  company-selector.tsx
  delete-company-dialog.tsx
  document-analysis.tsx
  document-upload.tsx
  files.tsx
docs/
  API.md
  PRD.md
  Roadmap_gemini.md
  Roadmap_meta.md
  Roadmap_o3-mini.md
  Roadmap_r1.md
  Schema.md
  SRS.md
lib/
  client/
    client.ts
  server/
    admin.ts
    server.ts
    supabase.ts
  companyProvider.tsx
  utils.ts
supabase/
  migrations/
    20240202_initial.sql
  config.toml
types/
  database.d.ts
.cursorrules
auth.ts
components.json
eslint.config.mjs
instrumentation.ts
middleware.config.ts
middleware.ts
next.config.ts
plan.md
postcss.config.mjs
prettier.config.js
tailwind.config.ts
tsconfig.json</directory_structure><files>This section contains the contents of the repository&apos;s files.<file path="app/(auth)/signin/page.tsx">import &apos;server-only&apos;;
import React from &apos;react&apos;;
import SignInCard from &apos;./SignInCard&apos;;
import Content from &apos;../Content&apos;;
import { redirect } from &apos;next/navigation&apos;;
import { getSession } from &apos;@/lib/server/supabase&apos;;

export default async function AuthPage() {
  const session = await getSession();
  if (session) {
    redirect(&apos;/&apos;);
  }

  return (
    &lt;div className=&quot;flex flex-col justify-between pt-4 h-auto md:h-screen&quot;&gt;
      &lt;div className=&quot;flex flex-col-reverse md:flex-row justify-center gap-6 h-full md:h-screen p-1&quot;&gt;
        &lt;Content /&gt;
        &lt;SignInCard /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
}</file><file path="app/(auth)/signin/SignInCard.tsx">&apos;use client&apos;;
import React, { useState, useCallback } from &apos;react&apos;;
import { Card } from &apos;@/components/ui/card&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Input } from &apos;@/components/ui/input&apos;;
import { Label } from &apos;@/components/ui/label&apos;;
import { Checkbox } from &apos;@/components/ui/checkbox&apos;;
import { Separator } from &apos;@/components/ui/separator&apos;;
import { Alert, AlertDescription } from &apos;@/components/ui/alert&apos;;
import { Loader2, AlertCircle } from &apos;lucide-react&apos;;
import ForgotPassword from &apos;../ForgotPassword&apos;;
import { login } from &apos;../action&apos;;
import { signInWithGoogle } from &apos;../OAuth&apos;;
import { useFormStatus } from &apos;react-dom&apos;;
import Link from &apos;next/link&apos;;
import Messages from &apos;../messages&apos;;

export default function SignInCard() {
  const [email, setEmail] = useState(
    typeof window !== &apos;undefined&apos;
      ? localStorage.getItem(&apos;rememberedEmail&apos;) || &apos;&apos;
      : &apos;&apos;
  );
  const [password, setPassword] = useState(&apos;&apos;);
  const [rememberMe, setRememberMe] = useState(
    typeof window !== &apos;undefined&apos; &amp;&amp; !!localStorage.getItem(&apos;rememberedEmail&apos;)
  );
  const [emailError, setEmailError] = useState(false);
  const [emailErrorMessage, setEmailErrorMessage] = useState(&apos;&apos;);
  const [passwordError, setPasswordError] = useState(false);
  const [passwordErrorMessage, setPasswordErrorMessage] = useState(&apos;&apos;);
  const [open, setOpen] = useState(false);

  const handleClickOpen = () =&gt; {
    setOpen(true);
  };

  const handleClose = () =&gt; {
    setOpen(false);
  };

  const [alertMessage, setAlertMessage] = useState&lt;{
    type: &apos;error&apos; | &apos;success&apos; | null;
    message: string;
  }&gt;({ type: null, message: &apos;&apos; });

  const handleSubmit = async (formData: FormData) =&gt; {
    if (validateInputs()) {
      const result = await login(formData);

      setAlertMessage({
        type: result.success ? &apos;success&apos; : &apos;error&apos;,
        message: result.message
      });

      if (result.success) {
        if (rememberMe) {
          localStorage.setItem(&apos;rememberedEmail&apos;, email);
        } else {
          localStorage.removeItem(&apos;rememberedEmail&apos;);
        }
      }
    }
  };

  const validateInputs = useCallback(() =&gt; {
    let isValid = true;
    if (!email.trim() || !/\S+@\S+\.\S+/.test(email)) {
      setEmailError(true);
      setEmailErrorMessage(&apos;Please enter a valid email address.&apos;);
      isValid = false;
    } else {
      setEmailError(false);
      setEmailErrorMessage(&apos;&apos;);
    }
    if (!password.trim()) {
      setPasswordError(true);
      setPasswordErrorMessage(&apos;Error in password&apos;);
      isValid = false;
    } else {
      setPasswordError(false);
      setPasswordErrorMessage(&apos;&apos;);
    }
    return isValid;
  }, [email, password]);

  return (
    &lt;Card className=&quot;flex flex-col self-center w-full sm:w-[450px] p-4 sm:p-6 gap-4 shadow-lg&quot;&gt;
      &lt;h1 className=&quot;text-3xl sm:text-4xl font-bold&quot;&gt;Sign In&lt;/h1&gt;

      &lt;form action={handleSubmit} noValidate className=&quot;flex flex-col gap-4&quot;&gt;
        &lt;div className=&quot;space-y-2&quot;&gt;
          &lt;Label htmlFor=&quot;email&quot;&gt;Email&lt;/Label&gt;
          &lt;Input
            id=&quot;email&quot;
            type=&quot;email&quot;
            name=&quot;email&quot;
            placeholder=&quot;your@email.com&quot;
            autoComplete=&quot;email&quot;
            required
            value={email}
            onChange={(e) =&gt; setEmail(e.target.value)}
            className={emailError ? &apos;border-destructive&apos; : &apos;&apos;}
          /&gt;
          {emailError &amp;&amp; (
            &lt;p className=&quot;text-sm text-destructive&quot;&gt;{emailErrorMessage}&lt;/p&gt;
          )}
        &lt;/div&gt;

        &lt;div className=&quot;space-y-2&quot;&gt;
          &lt;div className=&quot;flex justify-between items-center&quot;&gt;
            &lt;Label htmlFor=&quot;password&quot;&gt;Password&lt;/Label&gt;
            &lt;Button
              onClick={handleClickOpen}
              variant=&quot;link&quot;
              className=&quot;p-0 h-auto&quot;
            &gt;
              Forgot your password?
            &lt;/Button&gt;
          &lt;/div&gt;
          &lt;Input
            id=&quot;password&quot;
            type=&quot;password&quot;
            name=&quot;password&quot;
            placeholder=&quot;••••••&quot;
            autoComplete=&quot;current-password&quot;
            required
            value={password}
            onChange={(e) =&gt; setPassword(e.target.value)}
            className={passwordError ? &apos;border-destructive&apos; : &apos;&apos;}
          /&gt;
          {passwordError &amp;&amp; (
            &lt;p className=&quot;text-sm text-destructive&quot;&gt;{passwordErrorMessage}&lt;/p&gt;
          )}
        &lt;/div&gt;

        &lt;div className=&quot;flex items-center space-x-2&quot;&gt;
          &lt;Checkbox
            id=&quot;remember&quot;
            checked={rememberMe}
            onCheckedChange={(checked) =&gt; setRememberMe(checked as boolean)}
          /&gt;
          &lt;Label htmlFor=&quot;remember&quot;&gt;Remember me&lt;/Label&gt;
        &lt;/div&gt;

        &lt;ForgotPassword open={open} handleClose={handleClose} /&gt;
        &lt;SubmitButton /&gt;
        &lt;Messages /&gt;

        {alertMessage.type &amp;&amp; (
          &lt;Alert
            variant={alertMessage.type === &apos;error&apos; ? &apos;destructive&apos; : &apos;default&apos;}
          &gt;
            &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;
            &lt;AlertDescription&gt;{alertMessage.message}&lt;/AlertDescription&gt;
          &lt;/Alert&gt;
        )}

        &lt;Button asChild variant=&quot;outline&quot;&gt;
          &lt;Link href=&quot;/signup&quot; replace&gt;
            Don&amp;apos;t have an account? Sign up
          &lt;/Link&gt;
        &lt;/Button&gt;
      &lt;/form&gt;

      &lt;div className=&quot;relative&quot;&gt;
        &lt;Separator /&gt;
        &lt;span className=&quot;absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 bg-background px-2 text-muted-foreground&quot;&gt;
          or
        &lt;/span&gt;
      &lt;/div&gt;

      &lt;Button
        variant=&quot;outline&quot;
        onClick={() =&gt; signInWithGoogle()}
        className=&quot;w-full&quot;
      &gt;
        &lt;svg
          className=&quot;mr-2 h-4 w-4&quot;
          aria-hidden=&quot;true&quot;
          focusable=&quot;false&quot;
          data-prefix=&quot;fab&quot;
          data-icon=&quot;google&quot;
          role=&quot;img&quot;
          xmlns=&quot;http://www.w3.org/2000/svg&quot;
          viewBox=&quot;0 0 488 512&quot;
        &gt;
          &lt;path
            fill=&quot;currentColor&quot;
            d=&quot;M488 261.8C488 403.3 391.1 504 248 504 110.8 504 0 393.2 0 256S110.8 8 248 8c66.8 0 123 24.5 166.3 64.9l-67.5 64.9C258.5 52.6 94.3 116.6 94.3 256c0 86.5 69.1 156.6 153.7 156.6 98.2 0 135-70.4 140.8-106.9H248v-85.3h236.1c2.3 12.7 3.9 24.9 3.9 41.4z&quot;
          &gt;&lt;/path&gt;
        &lt;/svg&gt;
        Sign in with Google
      &lt;/Button&gt;
    &lt;/Card&gt;
  );
}

function SubmitButton() {
  const { pending } = useFormStatus();

  return (
    &lt;Button type=&quot;submit&quot; className=&quot;w-full&quot; disabled={pending}&gt;
      {pending ? &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt; : &apos;Sign In&apos;}
    &lt;/Button&gt;
  );
}</file><file path="app/(auth)/signup/page.tsx">import &apos;server-only&apos;;
import React from &apos;react&apos;;
import SignUpCard from &apos;./SignUpCard&apos;;
import Content from &apos;../Content&apos;;
import { redirect } from &apos;next/navigation&apos;;
import { getSession } from &apos;@/lib/server/supabase&apos;;

export default async function AuthPage() {
  const session = await getSession();
  if (session) {
    redirect(&apos;/&apos;);
  }

  return (
    &lt;div className=&quot;flex flex-col justify-between pt-4 h-auto md:h-screen&quot;&gt;
      &lt;div className=&quot;flex flex-col-reverse md:flex-row justify-center gap-6 h-full md:h-screen p-1&quot;&gt;
        &lt;Content /&gt;
        &lt;SignUpCard /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
}</file><file path="app/(auth)/signup/SignUpCard.tsx">&apos;use client&apos;;
import React, { useState, useCallback } from &apos;react&apos;;
import { Card } from &apos;@/components/ui/card&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Input } from &apos;@/components/ui/input&apos;;
import { Label } from &apos;@/components/ui/label&apos;;
import { Separator } from &apos;@/components/ui/separator&apos;;
import { Alert, AlertDescription } from &apos;@/components/ui/alert&apos;;
import { Loader2, AlertCircle, Info } from &apos;lucide-react&apos;;
import ForgotPassword from &apos;../ForgotPassword&apos;;
import { signup } from &apos;../action&apos;;
import { signInWithGoogle } from &apos;../OAuth&apos;;
import { useFormStatus } from &apos;react-dom&apos;;
import Link from &apos;next/link&apos;;
import Messages from &apos;../messages&apos;;

export default function SignUpCard() {
  const [email, setEmail] = useState(&apos;&apos;);
  const [password, setPassword] = useState(&apos;&apos;);
  const [confirmPassword, setConfirmPassword] = useState(&apos;&apos;);
  const [fullName, setFullName] = useState(&apos;&apos;);
  const [emailError, setEmailError] = useState(false);
  const [emailErrorMessage, setEmailErrorMessage] = useState(&apos;&apos;);
  const [passwordError, setPasswordError] = useState(false);
  const [passwordErrorMessage, setPasswordErrorMessage] = useState(&apos;&apos;);
  const [confirmPasswordError, setConfirmPasswordError] = useState(false);
  const [confirmPasswordErrorMessage, setConfirmPasswordErrorMessage] =
    useState(&apos;&apos;);
  const [open, setOpen] = useState(false);
  const [passwordRequirements, setPasswordRequirements] = useState({
    length: false,
    uppercase: false,
    lowercase: false,
    number: false
  });

  const handleClose = () =&gt; {
    setOpen(false);
  };

  const [alertMessage, setAlertMessage] = useState&lt;{
    type: &apos;error&apos; | &apos;success&apos; | null;
    message: string;
  }&gt;({ type: null, message: &apos;&apos; });

  const handleSubmit = async (formData: FormData) =&gt; {
    if (validateInputs()) {
      const result = await signup(formData);

      setAlertMessage({
        type: result.success ? &apos;success&apos; : &apos;error&apos;,
        message: result.message
      });

      setTimeout(() =&gt; {
        setAlertMessage({ type: null, message: &apos;&apos; });
      }, 5000);
    }
  };

  const validateInputs = useCallback(() =&gt; {
    let isValid = true;

    if (!email.trim() || !/\S+@\S+\.\S+/.test(email)) {
      setEmailError(true);
      setEmailErrorMessage(&apos;Please enter a valid email address.&apos;);
      isValid = false;
    } else {
      setEmailError(false);
      setEmailErrorMessage(&apos;&apos;);
    }

    if (!password.trim()) {
      setPasswordError(true);
      setPasswordErrorMessage(&apos;Password cannot be empty.&apos;);
      isValid = false;
    } else {
      let passwordErrorMessage = &apos;&apos;;

      if (password.length &lt; 6) {
        passwordErrorMessage += &apos;Password must be at least 6 characters long. &apos;;
        isValid = false;
      }

      if (!/\d/.test(password)) {
        passwordErrorMessage += &apos;Password must contain at least one number. &apos;;
        isValid = false;
      }

      if (!isValid) {
        setPasswordError(true);
        setPasswordErrorMessage(passwordErrorMessage.trim());
      } else {
        setPasswordError(false);
        setPasswordErrorMessage(&apos;&apos;);
      }
    }

    if (password !== confirmPassword) {
      setConfirmPasswordError(true);
      setConfirmPasswordErrorMessage(&apos;Passwords do not match.&apos;);
      isValid = false;
    } else {
      setConfirmPasswordError(false);
      setConfirmPasswordErrorMessage(&apos;&apos;);
    }

    return isValid;
  }, [email, password, confirmPassword]);

  const validatePassword = (password: string) =&gt; {
    const requirements = {
      length: password.length &gt;= 6,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      number: /[0-9]/.test(password)
    };
    setPasswordRequirements(requirements);
  };

  return (
    &lt;div className=&quot;flex justify-center items-center&quot;&gt;
      &lt;Card className=&quot;flex flex-col self-center w-full sm:w-[350px] md:w-[400px] p-4 sm:p-6 md:p-8 space-y-4 shadow-lg&quot;&gt;
        &lt;h2 className=&quot;text-2xl font-bold&quot;&gt;Sign Up&lt;/h2&gt;

        &lt;form
          action={handleSubmit}
          noValidate
          className=&quot;flex flex-col space-y-4&quot;
        &gt;
          &lt;div className=&quot;space-y-2&quot;&gt;
            &lt;Label htmlFor=&quot;email&quot;&gt;Email&lt;/Label&gt;
            &lt;Input
              id=&quot;email&quot;
              type=&quot;email&quot;
              name=&quot;email&quot;
              placeholder=&quot;your@email.com&quot;
              autoComplete=&quot;email&quot;
              required
              value={email}
              onChange={(e) =&gt; setEmail(e.target.value)}
              className={emailError ? &apos;border-red-500&apos; : &apos;&apos;}
            /&gt;
            {emailError &amp;&amp; (
              &lt;p className=&quot;text-sm text-red-500&quot;&gt;{emailErrorMessage}&lt;/p&gt;
            )}
          &lt;/div&gt;

          &lt;div className=&quot;space-y-2&quot;&gt;
            &lt;Label htmlFor=&quot;fullName&quot;&gt;Full Name&lt;/Label&gt;
            &lt;Input
              id=&quot;fullName&quot;
              name=&quot;fullName&quot;
              placeholder=&quot;John Doe&quot;
              autoComplete=&quot;name&quot;
              value={fullName}
              onChange={(e) =&gt; setFullName(e.target.value)}
            /&gt;
          &lt;/div&gt;

          &lt;div className=&quot;space-y-2&quot;&gt;
            &lt;Label htmlFor=&quot;password&quot;&gt;Password&lt;/Label&gt;
            &lt;Input
              type=&quot;password&quot;
              id=&quot;password&quot;
              name=&quot;password&quot;
              placeholder=&quot;••••••&quot;
              autoComplete=&quot;new-password&quot;
              required
              value={password}
              onChange={(e) =&gt; {
                setPassword(e.target.value);
                validatePassword(e.target.value);
              }}
              className={passwordError ? &apos;border-red-500&apos; : &apos;&apos;}
            /&gt;
            {passwordError &amp;&amp; (
              &lt;p className=&quot;text-sm text-red-500&quot;&gt;{passwordErrorMessage}&lt;/p&gt;
            )}
          &lt;/div&gt;

          &lt;div className=&quot;space-y-2&quot;&gt;
            &lt;Label htmlFor=&quot;confirmPassword&quot;&gt;Confirm Password&lt;/Label&gt;
            &lt;Input
              type=&quot;password&quot;
              id=&quot;confirmPassword&quot;
              name=&quot;confirmPassword&quot;
              placeholder=&quot;••••••&quot;
              autoComplete=&quot;new-password&quot;
              required
              value={confirmPassword}
              onChange={(e) =&gt; setConfirmPassword(e.target.value)}
              className={confirmPasswordError ? &apos;border-red-500&apos; : &apos;&apos;}
            /&gt;
            {confirmPasswordError &amp;&amp; (
              &lt;p className=&quot;text-sm text-red-500&quot;&gt;
                {confirmPasswordErrorMessage}
              &lt;/p&gt;
            )}
          &lt;/div&gt;

          &lt;SubmitButton /&gt;

          {alertMessage.type &amp;&amp; (
            &lt;Alert
              variant={
                alertMessage.type === &apos;error&apos; ? &apos;destructive&apos; : &apos;default&apos;
              }
            &gt;
              &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;
              &lt;AlertDescription&gt;{alertMessage.message}&lt;/AlertDescription&gt;
            &lt;/Alert&gt;
          )}

          &lt;Button variant=&quot;outline&quot; asChild&gt;
            &lt;Link href=&quot;/signin&quot; replace&gt;
              Already have an account?
            &lt;/Link&gt;
          &lt;/Button&gt;
        &lt;/form&gt;

        &lt;div className=&quot;relative&quot;&gt;
          &lt;div className=&quot;absolute inset-0 flex items-center&quot;&gt;
            &lt;Separator /&gt;
          &lt;/div&gt;
          &lt;div className=&quot;relative flex justify-center text-xs uppercase&quot;&gt;
            &lt;span className=&quot;bg-background px-2 text-muted-foreground&quot;&gt;or&lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;Button
          variant=&quot;outline&quot;
          onClick={() =&gt; signInWithGoogle()}
          className=&quot;w-full&quot;
        &gt;
          &lt;svg className=&quot;mr-2 h-4 w-4&quot; viewBox=&quot;0 0 24 24&quot;&gt;
            &lt;path
              d=&quot;M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z&quot;
              fill=&quot;#4285F4&quot;
            /&gt;
            &lt;path
              d=&quot;M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z&quot;
              fill=&quot;#34A853&quot;
            /&gt;
            &lt;path
              d=&quot;M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z&quot;
              fill=&quot;#FBBC05&quot;
            /&gt;
            &lt;path
              d=&quot;M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z&quot;
              fill=&quot;#EA4335&quot;
            /&gt;
          &lt;/svg&gt;
          Sign up with Google
        &lt;/Button&gt;

        &lt;ForgotPassword open={open} handleClose={handleClose} /&gt;
      &lt;/Card&gt;

      &lt;div className=&quot;hidden md:flex justify-center items-center ml-8&quot;&gt;
        &lt;PasswordRequirements requirements={passwordRequirements} /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
}

function SubmitButton() {
  const { pending } = useFormStatus();

  return (
    &lt;Button type=&quot;submit&quot; className=&quot;w-full&quot; disabled={pending}&gt;
      {pending ? (
        &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;
      ) : (
        &apos;Create Account&apos;
      )}
    &lt;/Button&gt;
  );
}

interface PasswordRequirementsProps {
  requirements: {
    length: boolean;
    uppercase: boolean;
    lowercase: boolean;
    number: boolean;
  };
}

function PasswordRequirements({ requirements }: PasswordRequirementsProps) {
  return (
    &lt;div className=&quot;w-60 bg-white shadow rounded-2xl p-2&quot;&gt;
      &lt;p className=&quot;text-sm font-medium mb-2&quot;&gt;Password Requirements:&lt;/p&gt;
      &lt;ul className=&quot;pl-5 m-0&quot;&gt;
        &lt;li className={requirements.length ? &apos;text-green-600&apos; : &apos;text-red-600&apos;}&gt;
          Length (at least 6 characters)
        &lt;/li&gt;
        &lt;li className={requirements.number ? &apos;text-green-600&apos; : &apos;text-red-600&apos;}&gt;
          Number
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  );
}</file><file path="app/(auth)/Content.tsx">import React from &apos;react&apos;;
import { Gavel, Search, MessageCircle, Gift } from &apos;lucide-react&apos;;

const items = [
  {
    icon: &lt;Gavel className=&quot;h-6 w-6 text-muted-foreground&quot; /&gt;,
    title: &apos;Feature 1&apos;,
    description:
      &apos;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod, nulla sit amet aliquam lacinia, nisl nisl aliquam nisl, nec aliquam nisl nisl sit amet nisl.&apos;
  },
  {
    icon: &lt;Search className=&quot;h-6 w-6 text-muted-foreground&quot; /&gt;,
    title: &apos;Feature 2&apos;,
    description:
      &apos;Praesent et eros eu felis eleifend egestas. Nullam at dolor quis ante porta tincidunt. Sed euismod, nulla sit amet aliquam lacinia, nisl nisl aliquam nisl.&apos;
  },
  {
    icon: &lt;MessageCircle className=&quot;h-6 w-6 text-muted-foreground&quot; /&gt;,
    title: &apos;Feature 3&apos;,
    description:
      &apos;Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Sed euismod, nulla sit amet aliquam lacinia, nisl nisl aliquam nisl.&apos;
  },
  {
    icon: &lt;Gift className=&quot;h-6 w-6 text-muted-foreground&quot; /&gt;,
    title: &apos;Free Trial&apos;,
    description:
      &apos;Ut ornare lectus sit amet est placerat, nec elementum arcu dignissim. Sed euismod, nulla sit amet aliquam lacinia, nisl nisl aliquam nisl, nec aliquam nisl nisl sit amet nisl.&apos;
  }
];

export default function Content() {
  return (
    &lt;div className=&quot;flex flex-col self-center gap-8 max-w-[450px]&quot;&gt;
      {items.map((item, index) =&gt; (
        &lt;div key={index} className=&quot;flex gap-4&quot;&gt;
          {item.icon}
          &lt;div&gt;
            &lt;h3 className=&quot;font-medium mb-1&quot;&gt;{item.title}&lt;/h3&gt;
            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{item.description}&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      ))}
    &lt;/div&gt;
  );
}</file><file path="app/(auth)/ForgotPassword.tsx">&apos;use client&apos;;
import React, { useState } from &apos;react&apos;;
import { Loader2 } from &apos;lucide-react&apos;;
import { useFormStatus } from &apos;react-dom&apos;;

import { usePathname } from &apos;next/navigation&apos;;
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle
} from &apos;@/components/ui/dialog&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Input } from &apos;@/components/ui/input&apos;;
import { resetPasswordForEmail } from &apos;@/app/(auth)/action&apos;;

interface ForgotPasswordProps {
  open: boolean;
  handleClose: () =&gt; void;
}

export default function ForgotPassword({
  open,
  handleClose
}: ForgotPasswordProps) {
  const [email, setEmail] = useState(&apos;&apos;);
  const [error, setError] = useState(&apos;&apos;);
  const currentPathname = usePathname();

  const handleSubmit = async (formData: FormData) =&gt; {
    formData.append(&apos;currentPathname&apos;, currentPathname);
    if (email.trim() === &apos;&apos;) {
      setError(&apos;Email address is required&apos;);
      return;
    }
    await resetPasswordForEmail(formData);
    setError(&apos;&apos;);
    setEmail(&apos;&apos;);
  };

  return (
    &lt;Dialog open={open} onOpenChange={handleClose}&gt;
      &lt;DialogContent className=&quot;sm:max-w-md&quot;&gt;
        &lt;DialogHeader&gt;
          &lt;DialogTitle&gt;Reset Password&lt;/DialogTitle&gt;
        &lt;/DialogHeader&gt;
        &lt;form action={handleSubmit} noValidate className=&quot;space-y-4&quot;&gt;
          &lt;div className=&quot;space-y-2&quot;&gt;
            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;
              Enter your account&amp;apos;s email address, and we&amp;apos;ll send you a
              link to reset your password.
            &lt;/p&gt;
            &lt;Input
              required
              id=&quot;email&quot;
              name=&quot;email&quot;
              placeholder=&quot;Email address&quot;
              type=&quot;email&quot;
              value={email}
              onChange={(e) =&gt; setEmail(e.target.value)}
            /&gt;
            {error &amp;&amp; &lt;p className=&quot;text-sm text-destructive&quot;&gt;{error}&lt;/p&gt;}
          &lt;/div&gt;
          &lt;SubmitButton /&gt;
          &lt;div className=&quot;flex justify-end&quot;&gt;
            &lt;Button variant=&quot;ghost&quot; onClick={handleClose}&gt;
              Cancel
            &lt;/Button&gt;
          &lt;/div&gt;
        &lt;/form&gt;
      &lt;/DialogContent&gt;
    &lt;/Dialog&gt;
  );
}

function SubmitButton() {
  const { pending } = useFormStatus();

  return (
    &lt;Button type=&quot;submit&quot; className=&quot;w-full&quot; disabled={pending}&gt;
      {pending ? &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt; : &apos;Continue&apos;}
    &lt;/Button&gt;
  );
}</file><file path="app/(auth)/messages.tsx">import React from &apos;react&apos;;
import { useSearchParams } from &apos;next/navigation&apos;;
import { Alert, AlertDescription } from &apos;@/components/ui/alert&apos;;
import { AlertCircle, Info } from &apos;lucide-react&apos;;

export default function Messages() {
  const searchParams = useSearchParams();
  const error = searchParams.get(&apos;error&apos;);
  const message = searchParams.get(&apos;message&apos;);

  if (!error &amp;&amp; !message) return null;

  return (
    &lt;&gt;
      {error &amp;&amp; (
        &lt;div className=&quot;w-full flex flex-col items-center&quot;&gt;
          &lt;Alert variant=&quot;destructive&quot; className=&quot;max-w-[90%]&quot;&gt;
            &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;
            &lt;AlertDescription&gt;{decodeURIComponent(error)}&lt;/AlertDescription&gt;
          &lt;/Alert&gt;
        &lt;/div&gt;
      )}
      {message &amp;&amp; (
        &lt;div className=&quot;w-full flex flex-col items-center&quot;&gt;
          &lt;Alert className=&quot;max-w-[90%]&quot;&gt;
            &lt;Info className=&quot;h-4 w-4&quot; /&gt;
            &lt;AlertDescription&gt;{decodeURIComponent(message)}&lt;/AlertDescription&gt;
          &lt;/Alert&gt;
        &lt;/div&gt;
      )}
    &lt;/&gt;
  );
}</file><file path="app/(auth)/OAuth.ts">import { createClient } from &apos;@/lib/client/client&apos;;

export async function signInWithGoogle() {
  const supabase = createClient();

  await supabase.auth.signInWithOAuth({
    provider: &apos;google&apos;,
    options: {
      redirectTo: `${location.origin}/api/auth/confirm`
    }
  });
}</file><file path="app/@modal/(.)signin/CloseButton.tsx">&apos;use client&apos;;
import React from &apos;react&apos;;
import { useRouter } from &apos;next/navigation&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { X } from &apos;lucide-react&apos;;

export default function CloseButton() {
  const router = useRouter();

  return (
    &lt;Button
      variant=&quot;ghost&quot;
      size=&quot;icon&quot;
      className=&quot;absolute top-2 right-2&quot;
      onClick={() =&gt; router.back()}
    &gt;
      &lt;X className=&quot;h-4 w-4&quot; /&gt;
    &lt;/Button&gt;
  );
}</file><file path="app/@modal/(.)signin/ModalWrapper.tsx">&apos;use client&apos;;
import React from &apos;react&apos;;
import { useRouter } from &apos;next/navigation&apos;;
import { Dialog, DialogContent, DialogTitle } from &apos;@/components/ui/dialog&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { X } from &apos;lucide-react&apos;;

interface ModalWrapperProps {
  children: React.ReactNode;
}

export default function ModalWrapper({ children }: ModalWrapperProps) {
  const router = useRouter();

  return (
    &lt;Dialog open onOpenChange={() =&gt; router.back()}&gt;
      &lt;DialogContent className=&quot;max-h-[100vh] w-[95%] sm:w-[90%] lg:w-[80%] max-w-[1000px] p-0 sm:p-0 md:p-6 bg-transparent sm:bg-background md:bg-background shadow-none sm:shadow-none md:shadow-lg my-4 rounded-lg overflow-y-auto overflow-x-hidden&quot;&gt;
        &lt;DialogTitle hidden&gt;Modal Content&lt;/DialogTitle&gt;

        &lt;Button
          variant=&quot;ghost&quot;
          size=&quot;icon&quot;
          onClick={() =&gt; router.back()}
          className=&quot;hidden md:block absolute top-2 right-2&quot;
        &gt;
          &lt;X className=&quot;h-4 w-4&quot; /&gt;
        &lt;/Button&gt;
        {children}
      &lt;/DialogContent&gt;
    &lt;/Dialog&gt;
  );
}</file><file path="app/@modal/(.)signin/page.tsx">import React from &apos;react&apos;;
import SignInCard from &apos;./SignInCard&apos;;
import Content from &apos;../Content&apos;;
import ModalWrapper from &apos;./ModalWrapper&apos;;
import { getSession } from &apos;@/lib/server/supabase&apos;;

export const dynamic = &apos;force-dynamic&apos;;

export default async function SignInModal() {
  const session = await getSession();

  if (session) {
    return null;
  }
  return (
    &lt;ModalWrapper&gt;
      &lt;div className=&quot;container flex flex-col md:flex-row gap-2 justify-center items-center overflow-x-hidden&quot;&gt;
        &lt;div className=&quot;xs:w-full md:w-5/12 pb-4 sm:pb-2 md:pb-0 flex justify-center items-center order-2 md:order-1 rounded-md&quot;&gt;
          &lt;Content /&gt;
        &lt;/div&gt;
        &lt;div className=&quot;xs:w-full md:w-6/12 pt-4 sm:pt-2 md:pt-1 pb-0 md:pb-1 order-1 md:order-2&quot;&gt;
          &lt;SignInCard /&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/ModalWrapper&gt;
  );
}</file><file path="app/@modal/(.)signin/SignInCard.tsx">&apos;use client&apos;;
import React, { useState, useCallback } from &apos;react&apos;;
import { useFormStatus } from &apos;react-dom&apos;;
import Link from &apos;next/link&apos;;
import { Card, CardContent } from &apos;@/components/ui/card&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Input } from &apos;@/components/ui/input&apos;;
import { Label } from &apos;@/components/ui/label&apos;;
import { Checkbox } from &apos;@/components/ui/checkbox&apos;;
import { Alert, AlertDescription } from &apos;@/components/ui/alert&apos;;
import { Separator } from &apos;@/components/ui/separator&apos;;
import { Loader2 } from &apos;lucide-react&apos;;
import ForgotPassword from &apos;../ForgotPassword&apos;;
import { GoogleIcon } from &apos;../CustomIcons&apos;;
import { login } from &apos;../action&apos;;
import { signInWithGoogle } from &apos;../OAuth&apos;;

export default function SignInCard() {
  const [email, setEmail] = useState(
    typeof window !== &apos;undefined&apos;
      ? localStorage.getItem(&apos;rememberedEmail&apos;) || &apos;&apos;
      : &apos;&apos;
  );
  const [password, setPassword] = useState(&apos;&apos;);
  const [rememberMe, setRememberMe] = useState(
    typeof window !== &apos;undefined&apos; &amp;&amp; !!localStorage.getItem(&apos;rememberedEmail&apos;)
  );
  const [emailError, setEmailError] = useState(false);
  const [emailErrorMessage, setEmailErrorMessage] = useState(&apos;&apos;);
  const [passwordError, setPasswordError] = useState(false);
  const [passwordErrorMessage, setPasswordErrorMessage] = useState(&apos;&apos;);
  const [open, setOpen] = useState(false);

  const handleClickOpen = () =&gt; {
    setOpen(true);
  };

  const handleClose = () =&gt; {
    setOpen(false);
  };

  const [alertMessage, setAlertMessage] = useState&lt;{
    type: &apos;error&apos; | &apos;success&apos; | null;
    message: string;
  }&gt;({ type: null, message: &apos;&apos; });

  const handleSubmit = async (formData: FormData) =&gt; {
    if (validateInputs()) {
      const result = await login(formData);

      setAlertMessage({
        type: result.success ? &apos;success&apos; : &apos;error&apos;,
        message: result.message
      });

      if (result.success) {
        if (rememberMe) {
          localStorage.setItem(&apos;rememberedEmail&apos;, email);
        } else {
          localStorage.removeItem(&apos;rememberedEmail&apos;);
        }
      }
    }
  };

  const validateInputs = useCallback(() =&gt; {
    let isValid = true;
    if (!email.trim() || !/\S+@\S+\.\S+/.test(email)) {
      setEmailError(true);
      setEmailErrorMessage(&apos;Please enter a valid email address.&apos;);
      isValid = false;
    } else {
      setEmailError(false);
      setEmailErrorMessage(&apos;&apos;);
    }
    if (!password.trim()) {
      setPasswordError(true);
      setPasswordErrorMessage(&apos;Error in password&apos;);
      isValid = false;
    } else {
      setPasswordError(false);
      setPasswordErrorMessage(&apos;&apos;);
    }
    return isValid;
  }, [email, password]);

  return (
    &lt;Card className=&quot;flex flex-col self-center w-full sm:w-[450px] shadow-lg&quot;&gt;
      &lt;CardContent className=&quot;flex flex-col gap-4 p-4 sm:p-6&quot;&gt;
        &lt;h1 className=&quot;text-3xl font-semibold&quot;&gt;Sign In&lt;/h1&gt;
        &lt;form action={handleSubmit} noValidate className=&quot;flex flex-col gap-4&quot;&gt;
          &lt;div className=&quot;space-y-2&quot;&gt;
            &lt;Label htmlFor=&quot;email&quot;&gt;Email&lt;/Label&gt;
            &lt;Input
              id=&quot;email&quot;
              type=&quot;email&quot;
              name=&quot;email&quot;
              placeholder=&quot;your@email.com&quot;
              autoComplete=&quot;email&quot;
              required
              className={emailError ? &apos;border-destructive&apos; : &apos;&apos;}
              value={email}
              onChange={(e) =&gt; setEmail(e.target.value)}
            /&gt;
            {emailError &amp;&amp; (
              &lt;p className=&quot;text-sm text-destructive&quot;&gt;{emailErrorMessage}&lt;/p&gt;
            )}
          &lt;/div&gt;

          &lt;div className=&quot;space-y-2&quot;&gt;
            &lt;div className=&quot;flex justify-between items-center&quot;&gt;
              &lt;Label htmlFor=&quot;password&quot;&gt;Password&lt;/Label&gt;
              &lt;Button
                variant=&quot;link&quot;
                className=&quot;p-0 h-auto font-normal&quot;
                onClick={handleClickOpen}
                type=&quot;button&quot;
              &gt;
                Forgot your password?
              &lt;/Button&gt;
            &lt;/div&gt;
            &lt;Input
              name=&quot;password&quot;
              placeholder=&quot;••••••&quot;
              type=&quot;password&quot;
              id=&quot;password&quot;
              autoComplete=&quot;current-password&quot;
              required
              className={passwordError ? &apos;border-destructive&apos; : &apos;&apos;}
              value={password}
              onChange={(e) =&gt; setPassword(e.target.value)}
            /&gt;
            {passwordError &amp;&amp; (
              &lt;p className=&quot;text-sm text-destructive&quot;&gt;{passwordErrorMessage}&lt;/p&gt;
            )}
          &lt;/div&gt;

          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;
            &lt;Checkbox
              id=&quot;remember&quot;
              checked={rememberMe}
              onCheckedChange={(checked) =&gt; setRememberMe(checked as boolean)}
            /&gt;
            &lt;label
              htmlFor=&quot;remember&quot;
              className=&quot;text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70&quot;
            &gt;
              Remember me
            &lt;/label&gt;
          &lt;/div&gt;

          &lt;ForgotPassword open={open} handleClose={handleClose} /&gt;
          &lt;SubmitButton /&gt;

          {alertMessage.type &amp;&amp; (
            &lt;Alert
              variant={
                alertMessage.type === &apos;error&apos; ? &apos;destructive&apos; : &apos;default&apos;
              }
            &gt;
              &lt;AlertDescription&gt;{alertMessage.message}&lt;/AlertDescription&gt;
            &lt;/Alert&gt;
          )}

          &lt;Button asChild variant=&quot;outline&quot; className=&quot;w-full&quot;&gt;
            &lt;Link href=&quot;/signup&quot; replace&gt;
              Don&amp;apos;t have an account? Sign up
            &lt;/Link&gt;
          &lt;/Button&gt;
        &lt;/form&gt;

        &lt;div className=&quot;flex items-center gap-2&quot;&gt;
          &lt;Separator className=&quot;flex-1&quot; /&gt;
          &lt;span className=&quot;text-muted-foreground text-sm&quot;&gt;or&lt;/span&gt;
          &lt;Separator className=&quot;flex-1&quot; /&gt;
        &lt;/div&gt;

        &lt;Button
          type=&quot;button&quot;
          variant=&quot;outline&quot;
          className=&quot;w-full&quot;
          onClick={() =&gt; signInWithGoogle()}
        &gt;
          &lt;GoogleIcon className=&quot;mr-2 h-4 w-4&quot; /&gt;
          Sign in with Google
        &lt;/Button&gt;
      &lt;/CardContent&gt;
    &lt;/Card&gt;
  );
}

function SubmitButton() {
  const { pending } = useFormStatus();

  return (
    &lt;Button type=&quot;submit&quot; className=&quot;w-full&quot; disabled={pending}&gt;
      {pending ? &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt; : &apos;Sign In&apos;}
    &lt;/Button&gt;
  );
}</file><file path="app/@modal/(.)signup/CloseButton.tsx">&apos;use client&apos;;
import { useRouter } from &apos;next/navigation&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { X } from &apos;lucide-react&apos;;

export default function CloseButton() {
  const router = useRouter();

  return (
    &lt;Button
      variant=&quot;ghost&quot;
      size=&quot;icon&quot;
      onClick={() =&gt; router.back()}
      className=&quot;absolute top-2 right-2&quot;
    &gt;
      &lt;X className=&quot;h-4 w-4&quot; /&gt;
      &lt;span className=&quot;sr-only&quot;&gt;Close&lt;/span&gt;
    &lt;/Button&gt;
  );
}</file><file path="app/@modal/(.)signup/ModalWrapper.tsx">&apos;use client&apos;;
import React from &apos;react&apos;;
import { useRouter } from &apos;next/navigation&apos;;
import { Dialog, DialogContent, DialogTitle } from &apos;@/components/ui/dialog&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { X } from &apos;lucide-react&apos;;

interface ModalWrapperProps {
  children: React.ReactNode;
}

export default function ModalWrapper({ children }: ModalWrapperProps) {
  const router = useRouter();

  return (
    &lt;Dialog open onOpenChange={() =&gt; router.back()}&gt;
      &lt;DialogContent className=&quot;max-h-[100vh] w-[95%] sm:w-[90%] lg:w-[80%] max-w-[1200px] p-0 sm:p-0 md:p-6 bg-transparent sm:bg-background md:bg-background shadow-none sm:shadow-none md:shadow-lg my-4 rounded-lg overflow-y-auto overflow-x-hidden&quot;&gt;
        &lt;DialogTitle className=&quot;sr-only&quot;&gt;Sign Up Modal&lt;/DialogTitle&gt;
        &lt;Button
          variant=&quot;ghost&quot;
          size=&quot;icon&quot;
          onClick={() =&gt; router.back()}
          className=&quot;hidden md:block absolute top-2 right-2&quot;
        &gt;
          &lt;X className=&quot;h-4 w-4&quot; /&gt;
        &lt;/Button&gt;
        {children}
      &lt;/DialogContent&gt;
    &lt;/Dialog&gt;
  );
}</file><file path="app/@modal/(.)signup/SignUpCard.tsx">&apos;use client&apos;;
import React, { useState, useCallback } from &apos;react&apos;;
import Link from &apos;next/link&apos;;
import { Card, CardContent, CardHeader, CardTitle } from &apos;@/components/ui/card&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Input } from &apos;@/components/ui/input&apos;;
import { Label } from &apos;@/components/ui/label&apos;;
import { Alert, AlertDescription } from &apos;@/components/ui/alert&apos;;
import { Loader2, Mail } from &apos;lucide-react&apos;;
import ForgotPassword from &apos;../ForgotPassword&apos;;
import { signup } from &apos;../action&apos;;
import { useFormStatus } from &apos;react-dom&apos;;
import { signInWithGoogle } from &apos;../OAuth&apos;;

export default function SignInCard() {
  const [email, setEmail] = useState(&apos;&apos;);
  const [password, setPassword] = useState(&apos;&apos;);
  const [confirmPassword, setConfirmPassword] = useState(&apos;&apos;);
  const [fullName, setFullName] = useState(&apos;&apos;);
  const [emailError, setEmailError] = useState(false);
  const [emailErrorMessage, setEmailErrorMessage] = useState(&apos;&apos;);
  const [passwordError, setPasswordError] = useState(false);
  const [passwordErrorMessage, setPasswordErrorMessage] = useState(&apos;&apos;);
  const [confirmPasswordError, setConfirmPasswordError] = useState(false);
  const [confirmPasswordErrorMessage, setConfirmPasswordErrorMessage] =
    useState(&apos;&apos;);
  const [open, setOpen] = useState(false);
  const [passwordRequirements, setPasswordRequirements] = useState({
    length: false,
    uppercase: false,
    lowercase: false,
    number: false
  });
  const handleClose = () =&gt; {
    setOpen(false);
  };

  const [alertMessage, setAlertMessage] = useState&lt;{
    type: &apos;error&apos; | &apos;success&apos; | null;
    message: string;
  }&gt;({ type: null, message: &apos;&apos; });

  const handleSubmit = async (formData: FormData) =&gt; {
    if (validateInputs()) {
      const result = await signup(formData);

      setAlertMessage({
        type: result.success ? &apos;success&apos; : &apos;error&apos;,
        message: result.message
      });


      setTimeout(() =&gt; {
        setAlertMessage({ type: null, message: &apos;&apos; });
      }, 5000);
    }
  };

  const validateInputs = useCallback(() =&gt; {
    let isValid = true;

    if (!email.trim() || !/\S+@\S+\.\S+/.test(email)) {
      setEmailError(true);
      setEmailErrorMessage(&apos;Please enter a valid email address.&apos;);
      isValid = false;
    } else {
      setEmailError(false);
      setEmailErrorMessage(&apos;&apos;);
    }

    if (!password.trim()) {
      setPasswordError(true);
      setPasswordErrorMessage(&apos;Password cannot be empty.&apos;);
      isValid = false;
    } else {
      let passwordErrorMessage = &apos;&apos;;

      if (password.length &lt; 6) {
        passwordErrorMessage += &apos;Password must be at least 6 characters long. &apos;;
        isValid = false;
      }

      if (!/\d/.test(password)) {
        passwordErrorMessage += &apos;Password must contain at least one number. &apos;;
        isValid = false;
      }

      if (!isValid) {
        setPasswordError(true);
        setPasswordErrorMessage(passwordErrorMessage.trim());
      } else {
        setPasswordError(false);
        setPasswordErrorMessage(&apos;&apos;);
      }
    }

    if (password !== confirmPassword) {
      setConfirmPasswordError(true);
      setConfirmPasswordErrorMessage(&apos;Passwords do not match.&apos;);
      isValid = false;
    } else {
      setConfirmPasswordError(false);
      setConfirmPasswordErrorMessage(&apos;&apos;);
    }

    return isValid;
  }, [email, password, confirmPassword]);

  const validatePassword = (password: string) =&gt; {
    const requirements = {
      length: password.length &gt;= 6,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      number: /[0-9]/.test(password)
    };
    setPasswordRequirements(requirements);
  };

  return (
    &lt;div className=&quot;flex justify-center items-center&quot;&gt;
      &lt;Card className=&quot;flex flex-col w-full sm:w-[350px] md:w-[400px] p-4 gap-4 shadow-md rounded-md&quot;&gt;
        &lt;CardHeader className=&quot;w-full&quot;&gt;
          &lt;CardTitle className=&quot;text-xl font-bold&quot;&gt;Sign Up&lt;/CardTitle&gt;
        &lt;/CardHeader&gt;
        &lt;CardContent className=&quot;w-full&quot;&gt;
          &lt;form
            onSubmit={(e) =&gt; {
              e.preventDefault();
              handleSubmit(new FormData(e.currentTarget));
            }}
            className=&quot;flex flex-col w-full space-y-4&quot;
            noValidate
          &gt;
            &lt;div className=&quot;flex flex-col&quot;&gt;
              &lt;Label htmlFor=&quot;email&quot; className=&quot;mb-1&quot;&gt;
                Email
              &lt;/Label&gt;
              &lt;Input
                id=&quot;email&quot;
                type=&quot;email&quot;
                name=&quot;email&quot;
                placeholder=&quot;your@email.com&quot;
                autoComplete=&quot;email&quot;
                required
                value={email}
                onChange={(e) =&gt; setEmail(e.target.value)}
                className={emailError ? &apos;border-red-500&apos; : &apos;&apos;}
              /&gt;
              {emailError &amp;&amp; (
                &lt;p className=&quot;text-xs text-red-500 mt-1&quot;&gt;{emailErrorMessage}&lt;/p&gt;
              )}
            &lt;/div&gt;
            &lt;div className=&quot;flex flex-col&quot;&gt;
              &lt;Label htmlFor=&quot;fullName&quot; className=&quot;mb-1&quot;&gt;
                Full Name
              &lt;/Label&gt;
              &lt;Input
                id=&quot;fullName&quot;
                name=&quot;fullName&quot;
                placeholder=&quot;John Doe&quot;
                autoComplete=&quot;name&quot;
                value={fullName}
                onChange={(e) =&gt; setFullName(e.target.value)}
              /&gt;
            &lt;/div&gt;
            &lt;div className=&quot;flex flex-col&quot;&gt;
              &lt;Label htmlFor=&quot;password&quot; className=&quot;mb-1&quot;&gt;
                Password
              &lt;/Label&gt;
              &lt;Input
                id=&quot;password&quot;
                name=&quot;password&quot;
                type=&quot;password&quot;
                placeholder=&quot;••••••&quot;
                autoComplete=&quot;new-password&quot;
                required
                value={password}
                onChange={(e) =&gt; {
                  setPassword(e.target.value);
                  validatePassword(e.target.value);
                }}
                className={passwordError ? &apos;border-red-500&apos; : &apos;&apos;}
              /&gt;
              {passwordError &amp;&amp; (
                &lt;p className=&quot;text-xs text-red-500 mt-1&quot;&gt;
                  {passwordErrorMessage}
                &lt;/p&gt;
              )}
            &lt;/div&gt;
            &lt;div className=&quot;flex flex-col&quot;&gt;
              &lt;Label htmlFor=&quot;confirmPassword&quot; className=&quot;mb-1&quot;&gt;
                Confirm Password
              &lt;/Label&gt;
              &lt;Input
                id=&quot;confirmPassword&quot;
                name=&quot;confirmPassword&quot;
                type=&quot;password&quot;
                placeholder=&quot;••••••&quot;
                autoComplete=&quot;new-password&quot;
                required
                value={confirmPassword}
                onChange={(e) =&gt; setConfirmPassword(e.target.value)}
                className={confirmPasswordError ? &apos;border-red-500&apos; : &apos;&apos;}
              /&gt;
              {confirmPasswordError &amp;&amp; (
                &lt;p className=&quot;text-xs text-red-500 mt-1&quot;&gt;
                  {confirmPasswordErrorMessage}
                &lt;/p&gt;
              )}
            &lt;/div&gt;
            &lt;SubmitButton /&gt;
            {alertMessage.type &amp;&amp; (
              &lt;Alert
                variant={
                  alertMessage.type === &apos;error&apos; ? &apos;destructive&apos; : &apos;default&apos;
                }
                className=&quot;w-full mt-2&quot;
              &gt;
                &lt;AlertDescription&gt;{alertMessage.message}&lt;/AlertDescription&gt;
              &lt;/Alert&gt;
            )}
            &lt;Link href=&quot;/signin&quot; className=&quot;self-center&quot;&gt;
              &lt;Button variant=&quot;outline&quot; type=&quot;button&quot;&gt;
                Already have an account?
              &lt;/Button&gt;
            &lt;/Link&gt;
          &lt;/form&gt;
          &lt;div className=&quot;relative flex items-center py-4&quot;&gt;
            &lt;div className=&quot;flex-grow border-t border-gray-200&quot; /&gt;
            &lt;span className=&quot;mx-2 text-xs text-gray-500&quot;&gt;or&lt;/span&gt;
            &lt;div className=&quot;flex-grow border-t border-gray-200&quot; /&gt;
          &lt;/div&gt;
          &lt;Button
            type=&quot;button&quot;
            variant=&quot;outline&quot;
            onClick={() =&gt; signInWithGoogle()}
            className=&quot;w-full flex items-center justify-center gap-2&quot;
          &gt;
            &lt;Mail className=&quot;w-4 h-4&quot; /&gt;
            Sign up with Google
          &lt;/Button&gt;
          &lt;ForgotPassword open={open} handleClose={handleClose} /&gt;
        &lt;/CardContent&gt;
      &lt;/Card&gt;
      &lt;div className=&quot;hidden md:flex justify-center items-center ml-2&quot;&gt;
        &lt;PasswordRequirements requirements={passwordRequirements} /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
}

function SubmitButton() {
  const { pending } = useFormStatus();

  return (
    &lt;Button type=&quot;submit&quot; disabled={pending} className=&quot;w-full my-2&quot;&gt;
      {pending ? (
        &lt;Loader2 size={24} className=&quot;animate-spin&quot; /&gt;
      ) : (
        &apos;Create Account&apos;
      )}
    &lt;/Button&gt;
  );
}

interface PasswordRequirementsProps {
  requirements: {
    length: boolean;
    uppercase: boolean;
    lowercase: boolean;
    number: boolean;
  };
}

function PasswordRequirements({ requirements }: PasswordRequirementsProps) {
  return (
    &lt;div className=&quot;w-60 bg-white shadow rounded-md p-2&quot;&gt;
      &lt;p className=&quot;text-sm font-semibold mb-2&quot;&gt;Password Requirements:&lt;/p&gt;
      &lt;ul className=&quot;list-disc pl-5 m-0&quot;&gt;
        &lt;li className={requirements.length ? &apos;text-green-500&apos; : &apos;text-red-500&apos;}&gt;
          Length (at least 6 characters)
        &lt;/li&gt;
        &lt;li className={requirements.number ? &apos;text-green-500&apos; : &apos;text-red-500&apos;}&gt;
          Number
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  );
}</file><file path="app/@modal/Content.tsx">import React from &apos;react&apos;;
import { Gavel, Search, MessageCircle, Gift } from &apos;lucide-react&apos;;

const items = [
  {
    icon: &lt;Gavel className=&quot;text-muted-foreground h-5 w-5&quot; /&gt;,
    title: &apos;Feature 1&apos;,
    description:
      &apos;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod, nulla sit amet aliquam lacinia, nisl nisl aliquam nisl, nec aliquam nisl nisl sit amet nisl.&apos;
  },
  {
    icon: &lt;Search className=&quot;text-muted-foreground h-5 w-5&quot; /&gt;,
    title: &apos;Feature 2&apos;,
    description:
      &apos;Praesent et eros eu felis eleifend egestas. Nullam at dolor quis ante porta tincidunt. Sed euismod, nulla sit amet aliquam lacinia, nisl nisl aliquam nisl.&apos;
  },
  {
    icon: &lt;MessageCircle className=&quot;text-muted-foreground h-5 w-5&quot; /&gt;,
    title: &apos;Feature 3&apos;,
    description:
      &apos;Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Sed euismod, nulla sit amet aliquam lacinia, nisl nisl aliquam nisl.&apos;
  },
  {
    icon: &lt;Gift className=&quot;text-muted-foreground h-5 w-5&quot; /&gt;,
    title: &apos;Free Trial&apos;,
    description:
      &apos;Ut ornare lectus sit amet est placerat, nec elementum arcu dignissim. Sed euismod, nulla sit amet aliquam lacinia, nisl nisl aliquam nisl, nec aliquam nisl nisl sit amet nisl.&apos;
  }
];

export default function Content() {
  return (
    &lt;div className=&quot;flex flex-col self-center gap-8 max-w-[450px]&quot;&gt;
      {items.map((item, index) =&gt; (
        &lt;div key={index} className=&quot;flex gap-4&quot;&gt;
          {item.icon}
          &lt;div&gt;
            &lt;h3 className=&quot;font-medium mb-1&quot;&gt;{item.title}&lt;/h3&gt;
            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{item.description}&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      ))}
    &lt;/div&gt;
  );
}</file><file path="app/@modal/CustomIcons.tsx">import React from &apos;react&apos;;
import { cn } from &apos;@/lib/utils&apos;;

interface IconProps extends React.SVGProps&lt;SVGSVGElement&gt; {
  className?: string;
}

export function FacebookIcon({ className, ...props }: IconProps) {
  return (
    &lt;svg
      width=&quot;16&quot;
      height=&quot;16&quot;
      viewBox=&quot;0 0 16 16&quot;
      fill=&quot;none&quot;
      xmlns=&quot;http://www.w3.org/2000/svg&quot;
      className={cn(&apos;h-4 w-4&apos;, className)}
      {...props}
    &gt;
      &lt;path
        d=&quot;M6.68 15.92C2.88 15.24 0 11.96 0 8C0 3.6 3.6 0 8 0C12.4 0 16 3.6 16 8C16 11.96 13.12 15.24 9.32 15.92L8.88 15.56H7.12L6.68 15.92Z&quot;
        fill=&quot;url(#paint0_linear_795_116)&quot;
      /&gt;
      &lt;path
        d=&quot;M11.12 10.2391L11.48 7.99914H9.36V6.43914C9.36 5.79914 9.6 5.31914 10.56 5.31914H11.6V3.27914C11.04 3.19914 10.4 3.11914 9.84 3.11914C8 3.11914 6.72 4.23914 6.72 6.23914V7.99914H4.72V10.2391H6.72V15.8791C7.16 15.9591 7.6 15.9991 8.04 15.9991C8.48 15.9991 8.92 15.9591 9.36 15.8791V10.2391H11.12Z&quot;
        fill=&quot;white&quot;
      /&gt;
      &lt;defs&gt;
        &lt;linearGradient
          id=&quot;paint0_linear_795_116&quot;
          x1=&quot;8&quot;
          y1=&quot;0&quot;
          x2=&quot;8&quot;
          y2=&quot;15.9991&quot;
          gradientUnits=&quot;userSpaceOnUse&quot;
        &gt;
          &lt;stop stopColor=&quot;#1AAFFF&quot; /&gt;
          &lt;stop offset=&quot;1&quot; stopColor=&quot;#0163E0&quot; /&gt;
        &lt;/linearGradient&gt;
      &lt;/defs&gt;
    &lt;/svg&gt;
  );
}

export function GoogleIcon({ className, ...props }: IconProps) {
  return (
    &lt;svg
      width=&quot;16&quot;
      height=&quot;16&quot;
      viewBox=&quot;0 0 16 16&quot;
      fill=&quot;none&quot;
      xmlns=&quot;http://www.w3.org/2000/svg&quot;
      className={cn(&apos;h-4 w-4&apos;, className)}
      {...props}
    &gt;
      &lt;path
        d=&quot;M15.68 8.18182C15.68 7.61455 15.6291 7.06909 15.5345 6.54545H8V9.64364H12.3055C12.1164 10.64 11.5491 11.4836 10.6982 12.0509V14.0655H13.2945C14.8073 12.6691 15.68 10.6182 15.68 8.18182Z&quot;
        fill=&quot;#4285F4&quot;
      /&gt;
      &lt;path
        d=&quot;M8 16C10.16 16 11.9709 15.2873 13.2945 14.0655L10.6982 12.0509C9.98545 12.5309 9.07636 12.8218 8 12.8218C5.92 12.8218 4.15273 11.4182 3.52 9.52727H0.858182V11.5927C2.17455 14.2036 4.87273 16 8 16Z&quot;
        fill=&quot;#34A853&quot;
      /&gt;
      &lt;path
        d=&quot;M3.52 9.52C3.36 9.04 3.26545 8.53091 3.26545 8C3.26545 7.46909 3.36 6.96 3.52 6.48V4.41455H0.858182C0.312727 5.49091 0 6.70545 0 8C0 9.29455 0.312727 10.5091 0.858182 11.5855L2.93091 9.97091L3.52 9.52Z&quot;
        fill=&quot;#FBBC05&quot;
      /&gt;
      &lt;path
        d=&quot;M8 3.18545C9.17818 3.18545 10.2255 3.59273 11.0618 4.37818L13.3527 2.08727C11.9636 0.792727 10.16 0 8 0C4.87273 0 2.17455 1.79636 0.858182 4.41455L3.52 6.48C4.15273 4.58909 5.92 3.18545 8 3.18545Z&quot;
        fill=&quot;#EA4335&quot;
      /&gt;
    &lt;/svg&gt;
  );
}</file><file path="app/@modal/ForgotPassword.tsx">import React, { useState } from &apos;react&apos;;
import { useFormStatus } from &apos;react-dom&apos;;
import { usePathname } from &apos;next/navigation&apos;;
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle
} from &apos;@/components/ui/dialog&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Input } from &apos;@/components/ui/input&apos;;
import { Loader2 } from &apos;lucide-react&apos;;
import { resetPasswordForEmail } from &apos;./action&apos;;

interface ForgotPasswordProps {
  open: boolean;
  handleClose: () =&gt; void;
}

export default function ForgotPassword({
  open,
  handleClose
}: ForgotPasswordProps) {
  const [email, setEmail] = useState(&apos;&apos;);
  const [error, setError] = useState(&apos;&apos;);
  const currentPathname = usePathname();

  const handleSubmit = async (formData: FormData) =&gt; {
    formData.append(&apos;currentPathname&apos;, currentPathname);
    if (email.trim() === &apos;&apos;) {
      setError(&apos;Email address is required&apos;);
      return;
    }
    await resetPasswordForEmail(formData);
    setError(&apos;&apos;);
    setEmail(&apos;&apos;);
  };

  return (
    &lt;Dialog open={open} onOpenChange={() =&gt; handleClose()}&gt;
      &lt;DialogContent&gt;
        &lt;DialogHeader&gt;
          &lt;DialogTitle&gt;Reset Password&lt;/DialogTitle&gt;
        &lt;/DialogHeader&gt;
        &lt;form action={handleSubmit} noValidate className=&quot;flex flex-col gap-4&quot;&gt;
          &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;
            Enter your account&amp;apos;s email address, and we&amp;apos;ll send you a
            link to reset your password.
          &lt;/p&gt;
          &lt;Input
            required
            id=&quot;email&quot;
            name=&quot;email&quot;
            placeholder=&quot;Email address&quot;
            type=&quot;email&quot;
            value={email}
            onChange={(e) =&gt; setEmail(e.target.value)}
          /&gt;
          {error &amp;&amp; &lt;p className=&quot;text-sm text-destructive&quot;&gt;{error}&lt;/p&gt;}
          &lt;SubmitButton /&gt;
          &lt;div className=&quot;flex justify-end&quot;&gt;
            &lt;Button type=&quot;button&quot; variant=&quot;ghost&quot; onClick={handleClose}&gt;
              Cancel
            &lt;/Button&gt;
          &lt;/div&gt;
        &lt;/form&gt;
      &lt;/DialogContent&gt;
    &lt;/Dialog&gt;
  );
}

function SubmitButton() {
  const { pending } = useFormStatus();

  return (
    &lt;Button type=&quot;submit&quot; className=&quot;w-full&quot; disabled={pending}&gt;
      {pending ? &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt; : &apos;Continue&apos;}
    &lt;/Button&gt;
  );
}</file><file path="app/actionchat/[id]/page.tsx">import React from &apos;react&apos;;
import { type Metadata } from &apos;next&apos;;
import { createServerSupabaseClient } from &apos;@/lib/server/server&apos;;
import ChatComponentPage from &apos;../component/ChatComponent&apos;;
import { getUserInfo } from &apos;@/lib/server/supabase&apos;;
import { notFound } from &apos;next/navigation&apos;;
import { AI as AiProvider } from &apos;../action&apos;;
import type { ServerMessage } from &apos;../action&apos;;
import DocumentViewer from &apos;../component/PDFViewer&apos;;
import { unstable_noStore as noStore } from &apos;next/cache&apos;;

export const maxDuration = 60;

export const metadata: Metadata = {
  robots: {
    follow: false,
    index: false
  }
};

type Source = {
  title: string;
  url: string;
};


function isJsonString(value: unknown): value is string {
  return typeof value === &apos;string&apos;;
}

async function getChatMessages(chatId: string) {
  noStore();
  const supabase = await createServerSupabaseClient();

  try {
    const { data: chatData, error } = await supabase
      .from(&apos;chat_sessions&apos;)
      .select(
        `
        user_id,
        chat_messages!inner (
          is_user_message,
          content,
          created_at,
          sources
        )
      `
      )
      .eq(&apos;id&apos;, chatId)
      .order(&apos;created_at&apos;, {
        ascending: true,
        referencedTable: &apos;chat_messages&apos;
      })
      .single();

    if (error || !chatData) return { messages: [], userId: null };

    return {
      messages: chatData.chat_messages.map((message): ServerMessage =&gt; {
        let parsedSources: Source[] = [];

        if (message.sources) {
          try {

            if (isJsonString(message.sources)) {
              const parsed = JSON.parse(message.sources);

              if (
                Array.isArray(parsed) &amp;&amp;
                parsed.every(
                  (item) =&gt;
                    typeof item === &apos;object&apos; &amp;&amp;
                    item !== null &amp;&amp;
                    &apos;title&apos; in item &amp;&amp;
                    &apos;url&apos; in item
                )
              ) {
                parsedSources = parsed as Source[];
              }
            }
          } catch (e) {
            console.error(&apos;Error parsing sources:&apos;, e);
          }
        }

        return {
          role: message.is_user_message ? &apos;user&apos; : (&apos;assistant&apos; as const),
          content: message.content || &apos;&apos;,
          sources: parsedSources
        };
      }),
      userId: chatData.user_id
    };
  } catch (error) {
    console.error(&apos;Error fetching chat data:&apos;, error);
    return { messages: [], userId: null };
  }
}
interface PageProps {
  params: Promise&lt;{ id: string }&gt;;
  searchParams: Promise&lt;{ [key: string]: string | &apos;&apos; }&gt;;
}

export default async function Page(props: PageProps) {
  const [params, searchParams] = await Promise.all([
    props.params,
    props.searchParams
  ]);
  const userInfo = await getUserInfo();

  const { messages, userId } = await getChatMessages(params.id);
  if (userId &amp;&amp; userId !== userInfo?.id) {
    notFound();
  }

  return (
    &lt;div className=&quot;flex w-full overflow-hidden&quot;&gt;
      &lt;div className=&quot;flex-1&quot;&gt;
        &lt;AiProvider initialAIState={messages}&gt;
          &lt;ChatComponentPage userInfo={userInfo} /&gt;
        &lt;/AiProvider&gt;
      &lt;/div&gt;

      {searchParams.pdf ? (
        &lt;DocumentViewerSuspended
          fileName={decodeURIComponent(searchParams.pdf)}
        /&gt;
      ) : null}
    &lt;/div&gt;
  );
}

async function DocumentViewerSuspended({ fileName }: { fileName: string }) {
  const session = await getUserInfo();
  const userId = session?.id;

  const hasActiveSubscription = Boolean(session);

  return (
    &lt;DocumentViewer
      fileName={fileName}
      userId={userId}
      hasActiveSubscription={hasActiveSubscription}
    /&gt;
  );
}</file><file path="app/actionchat/component/ChatComponent.tsx">&apos;use client&apos;;
import React, { useState, KeyboardEvent } from &apos;react&apos;;
import { useUIState, useActions, readStreamableValue } from &apos;ai/rsc&apos;;
import { type AI } from &apos;../action&apos;;
import { UserMessage } from &apos;./ChatWrapper&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Input } from &apos;@/components/ui/input&apos;;
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from &apos;@/components/ui/select&apos;;
import {
  Popover,
  PopoverContent,
  PopoverTrigger
} from &apos;@/components/ui/popover&apos;;
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger
} from &apos;@/components/ui/tooltip&apos;;
import {
  Send,
  StopCircle,
  MessageCircle,
  FileText,
  Search,
  Loader2
} from &apos;lucide-react&apos;;
import { useRouter, useParams } from &apos;next/navigation&apos;;
import { ChatScrollAnchor } from &apos;../hooks/chat-scroll-anchor&apos;;
import { Tables } from &apos;@/types/database&apos;;
import ErrorBoundary from &apos;./ErrorBoundary&apos;;
import { useUpload } from &apos;../context/uploadContext&apos;;
import Link from &apos;next/link&apos;;
import { useSWRConfig } from &apos;swr&apos;;
import { cn } from &apos;@/lib/utils&apos;;

type UserData = Pick&lt;Tables&lt;&apos;users&apos;&gt;, &apos;email&apos; | &apos;full_name&apos;&gt;;

interface ChatComponentPageProps {
  userInfo: UserData | null;
}

export default function ChatComponentPage({
  userInfo
}: ChatComponentPageProps) {
  const [inputValue, setInputValue] = useState(&apos;&apos;);
  const router = useRouter();
  const [messages, setMessages] = useUIState&lt;typeof AI&gt;();
  const [rateLimitInfo, setRateLimitInfo] = useState&lt;{
    success: boolean;
    message?: string;
    reset?: number;
  } | null&gt;(null);
  const { submitMessage, uploadFilesAndQuery, SearchTool } =
    useActions&lt;typeof AI&gt;();
  const { selectedBlobs, selectedMode, setSelectedMode } = useUpload();

  const [selectedModel, setSelectedModel] = useState&lt;&apos;claude3&apos; | &apos;chatgpt4&apos;&gt;(
    &apos;claude3&apos;
  );
  const [loadingState, setLoadingState] = useState&lt;&apos;searching&apos; | &apos;done&apos; | null&gt;(
    null
  );
  const [anchorEl, setAnchorEl] = useState&lt;null | HTMLElement&gt;(null);
  const open = Boolean(anchorEl);


  const handleClick = (event: React.MouseEvent&lt;HTMLElement&gt;) =&gt; {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () =&gt; {
    setAnchorEl(null);
  };
  const { id } = useParams();
  const currentChatId = (id as string) || &apos;&apos;;
  const handleKeyDown = (event: KeyboardEvent&lt;HTMLDivElement&gt;) =&gt; {
    if (event.key === &apos;Enter&apos; &amp;&amp; event.shiftKey) {

    } else if (event.key === &apos;Enter&apos;) {
      event.preventDefault();
      handleSubmit(event);
    }
  };

  const { mutate } = useSWRConfig();
  return (
    &lt;ErrorBoundary&gt;
      &lt;div className=&quot;flex flex-col h-screen overflow-hidden mx-auto&quot;&gt;
        {userInfo &amp;&amp; (
          &lt;div className=&quot;max-w-[120px] bg-white rounded m-1 self-end md:self-start&quot;&gt;
            &lt;Select
              value={selectedModel}
              onValueChange={(value) =&gt;
                setSelectedModel(value as &apos;claude3&apos; | &apos;chatgpt4&apos;)
              }
            &gt;
              &lt;SelectTrigger&gt;
                &lt;SelectValue placeholder=&quot;Select model&quot; /&gt;
              &lt;/SelectTrigger&gt;
              &lt;SelectContent&gt;
                &lt;SelectItem value=&quot;claude3&quot;&gt;Claude&lt;/SelectItem&gt;
                &lt;SelectItem value=&quot;chatgpt4&quot;&gt;GPT-4&lt;/SelectItem&gt;
              &lt;/SelectContent&gt;
            &lt;/Select&gt;
          &lt;/div&gt;
        )}

        {messages.length === 0 ? (
          &lt;div className=&quot;flex flex-col justify-center items-center h-full text-center p-4&quot;&gt;
            &lt;h2 className=&quot;text-2xl text-gray-600 mb-4&quot;&gt;
              Chat with our AI Assistant
            &lt;/h2&gt;

            &lt;p className=&quot;text-gray-600 mb-4&quot;&gt;
              Experience the power of AI-driven conversations with our chat
              template. Ask questions on any topic and get informative responses
              instantly.
            &lt;/p&gt;

            &lt;div className=&quot;text-gray-600 mb-4 max-w-[600px] border border-gray-200 rounded-lg p-4 bg-blue-50/20&quot;&gt;
              &lt;strong&gt;🔍 Web Search Mode:&lt;/strong&gt; Powered by{&apos; &apos;}
              &lt;a
                href=&quot;https://tavily.com/&quot;
                target=&quot;_blank&quot;
                rel=&quot;noopener&quot;
                className=&quot;text-blue-600 hover:underline&quot;
              &gt;
                Tavily AI
              &lt;/a&gt;
              , our search feature provides real-time, accurate information from
              across the web.
            &lt;/div&gt;

            &lt;div className=&quot;flex gap-4 mt-8 justify-center&quot;&gt;
              &lt;TooltipProvider&gt;
                &lt;Tooltip&gt;
                  &lt;TooltipTrigger asChild&gt;
                    &lt;Button
                      variant={
                        selectedMode === &apos;default&apos; ? &apos;default&apos; : &apos;outline&apos;
                      }
                      size=&quot;lg&quot;
                      className=&quot;w-20 h-20 rounded-xl&quot;
                      onClick={() =&gt; setSelectedMode(&apos;default&apos;)}
                    &gt;
                      &lt;MessageCircle className=&quot;h-10 w-10&quot; /&gt;
                    &lt;/Button&gt;
                  &lt;/TooltipTrigger&gt;
                  &lt;TooltipContent&gt;Regular Chat Mode&lt;/TooltipContent&gt;
                &lt;/Tooltip&gt;

                &lt;Tooltip&gt;
                  &lt;TooltipTrigger asChild&gt;
                    &lt;Button
                      variant={selectedMode === &apos;pdf&apos; ? &apos;default&apos; : &apos;outline&apos;}
                      size=&quot;lg&quot;
                      className=&quot;w-20 h-20 rounded-xl&quot;
                      onClick={() =&gt; setSelectedMode(&apos;pdf&apos;)}
                    &gt;
                      &lt;FileText className=&quot;h-10 w-10&quot; /&gt;
                    &lt;/Button&gt;
                  &lt;/TooltipTrigger&gt;
                  &lt;TooltipContent&gt;PDF Chat Mode&lt;/TooltipContent&gt;
                &lt;/Tooltip&gt;

                &lt;Tooltip&gt;
                  &lt;TooltipTrigger asChild&gt;
                    &lt;Button
                      variant={
                        selectedMode === &apos;search&apos; ? &apos;default&apos; : &apos;outline&apos;
                      }
                      size=&quot;lg&quot;
                      className=&quot;w-20 h-20 rounded-xl&quot;
                      onClick={() =&gt; setSelectedMode(&apos;search&apos;)}
                    &gt;
                      &lt;Search className=&quot;h-10 w-10&quot; /&gt;
                    &lt;/Button&gt;
                  &lt;/TooltipTrigger&gt;
                  &lt;TooltipContent&gt;
                    Web Search Mode (Powered by Tavily AI)
                  &lt;/TooltipContent&gt;
                &lt;/Tooltip&gt;
              &lt;/TooltipProvider&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        ) : (
          &lt;div className=&quot;flex-1 overflow-auto w-full px-4 md:px-8 py-4&quot;&gt;
            {messages.map((message) =&gt; (
              &lt;div key={message.id} className=&quot;w-full max-w-3xl mx-auto p-1&quot;&gt;
                {message.display}
              &lt;/div&gt;
            ))}
            &lt;ChatScrollAnchor trackVisibility /&gt;
          &lt;/div&gt;
        )}

        {rateLimitInfo &amp;&amp;
          !rateLimitInfo.success &amp;&amp;
          rateLimitInfo.reset &amp;&amp;
          userInfo &amp;&amp; (
            &lt;div className=&quot;bg-gray-100 rounded-lg max-w-3xl p-4 my-2 text-center mx-auto&quot;&gt;
              &lt;p className=&quot;mb-2&quot;&gt;{rateLimitInfo.message}&lt;/p&gt;
              &lt;p className=&quot;mb-2 text-sm&quot;&gt;
                Please wait until{&apos; &apos;}
                {new Date(rateLimitInfo.reset * 1000).toLocaleTimeString()} to
                send more messages.
              &lt;/p&gt;
              &lt;Button asChild&gt;
                &lt;Link href=&quot;#&quot;&gt;Buy more credits&lt;/Link&gt;
              &lt;/Button&gt;
            &lt;/div&gt;
          )}

        &lt;form
          onSubmit={handleSubmit}
          className=&quot;sticky bottom-0 max-w-3xl mx-auto w-full p-4 flex gap-2&quot;
        &gt;
          &lt;Input
            value={inputValue}
            onChange={(e) =&gt; setInputValue(e.target.value)}
            onKeyDown={handleKeyDown}
            disabled={loadingState === &apos;searching&apos;}
            placeholder=&quot;Type your message...&quot;
            className=&quot;rounded-full&quot;
          /&gt;

          &lt;Button
            type=&quot;submit&quot;
            size=&quot;icon&quot;
            disabled={loadingState === &apos;searching&apos;}
          &gt;
            {loadingState === &apos;searching&apos; ? (
              &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;
            ) : (
              &lt;Send className=&quot;h-4 w-4&quot; /&gt;
            )}
          &lt;/Button&gt;

          {messages.length &gt; 0 &amp;&amp; (
            &lt;Popover&gt;
              &lt;PopoverTrigger asChild&gt;
                &lt;Button variant=&quot;outline&quot; size=&quot;icon&quot; className=&quot;rounded-full&quot;&gt;
                  {selectedMode === &apos;default&apos; ? (
                    &lt;MessageCircle className=&quot;h-4 w-4&quot; /&gt;
                  ) : selectedMode === &apos;pdf&apos; ? (
                    &lt;FileText className=&quot;h-4 w-4&quot; /&gt;
                  ) : (
                    &lt;Search className=&quot;h-4 w-4&quot; /&gt;
                  )}
                &lt;/Button&gt;
              &lt;/PopoverTrigger&gt;
              &lt;PopoverContent className=&quot;w-48&quot;&gt;
                &lt;div className=&quot;grid grid-cols-1 gap-1&quot;&gt;
                  {[
                    {
                      mode: &apos;default&apos;,
                      icon: MessageCircle,
                      label: &apos;Regular Chat&apos;
                    },
                    { mode: &apos;pdf&apos;, icon: FileText, label: &apos;PDF Chat&apos; },
                    { mode: &apos;search&apos;, icon: Search, label: &apos;Web Search&apos; }
                  ].map((item) =&gt; {
                    const Icon = item.icon;
                    return (
                      &lt;Button
                        key={item.mode}
                        variant={
                          selectedMode === item.mode ? &apos;default&apos; : &apos;ghost&apos;
                        }
                        className=&quot;w-full justify-start gap-2&quot;
                        onClick={() =&gt; {
                          setSelectedMode(
                            item.mode as &apos;default&apos; | &apos;pdf&apos; | &apos;search&apos;
                          );
                          handleClose();
                        }}
                      &gt;
                        &lt;Icon className=&quot;h-4 w-4&quot; /&gt;
                        {item.label}
                      &lt;/Button&gt;
                    );
                  })}
                &lt;/div&gt;
              &lt;/PopoverContent&gt;
            &lt;/Popover&gt;
          )}
        &lt;/form&gt;
      &lt;/div&gt;
    &lt;/ErrorBoundary&gt;
  );

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    const value = inputValue.trim();
    if (value === &apos;&apos;) {
      return;
    }

    if (!userInfo) {
      setInputValue(&apos;&apos;);
      return;
    }

    setMessages((currentMessages) =&gt; [
      ...currentMessages,
      {
        id: Date.now(),
        role: &apos;user&apos;,
        display: (
          &lt;UserMessage full_name={userInfo?.full_name || &apos;Default_user&apos;}&gt;
            {value}
          &lt;/UserMessage&gt;
        ),
        chatId: currentChatId
      }
    ]);
    setLoadingState(&apos;searching&apos;);

    let response;


    if (selectedMode === &apos;pdf&apos;) {
      response = await uploadFilesAndQuery(
        inputValue,
        currentChatId || &apos;&apos;,
        selectedModel,
        selectedBlobs
      );
    } else if (selectedMode === &apos;search&apos;) {
      response = await SearchTool(
        inputValue,
        selectedModel,
        currentChatId || &apos;&apos;
      );
    } else {
      // Default chat mode
      response = await submitMessage(
        inputValue,
        selectedModel,
        currentChatId || &apos;&apos;
      );
    }

    if (response.success === false) {
      // Only set rate limit info if it&apos;s actually a rate limit issue
      if (response.reset) {

        setRateLimitInfo({
          success: response.success,
          message: response.message,
          reset: response.reset
        });
      } else {

        setRateLimitInfo(null);
      }
      setLoadingState(null);
    } else {
      setMessages((currentMessages) =&gt; [
        ...currentMessages,
        {
          ...response,
          role: &apos;assistant&apos;,
          id: response.id || Date.now(),
          display: response.display
        }
      ]);
    }
    for await (const status of readStreamableValue(response.status)) {
      switch (status) {
        case &apos;searching&apos;:
          setLoadingState(&apos;searching&apos;);
          break;
        case &apos;done&apos;:
          setLoadingState(null);
          break;
        default:
          setLoadingState(null);
      }
    }
    if (response.chatId &amp;&amp; !currentChatId) {
      const currentSearchParams = new URLSearchParams(window.location.search);
      let newUrl = `/actionchat/${response.chatId}`;

      if (currentSearchParams.toString()) {
        newUrl += `?${currentSearchParams.toString()}`;
      }

      mutate((key) =&gt; Array.isArray(key) &amp;&amp; key[0] === &apos;chatPreviews&apos;);
      router.replace(newUrl, { scroll: false });
      router.refresh();
    }

    setInputValue(&apos;&apos;);
    setLoadingState(null);
  }
}</file><file path="app/actionchat/component/ChatWrapper.tsx">&apos;use client&apos;;
import React, { useState } from &apos;react&apos;;
import { StreamableValue, useStreamableValue } from &apos;ai/rsc&apos;;
import ReactMarkdown from &apos;react-markdown&apos;;
import remarkGfm from &apos;remark-gfm&apos;;
import remarkMath from &apos;remark-math&apos;;
import rehypeHighlight, { Options as HighlightOptions } from &apos;rehype-highlight&apos;;
import &apos;highlight.js/styles/github-dark.css&apos;;
import Link from &apos;next/link&apos;;
import {
  Copy,
  Check,
  Globe,
  ExternalLink,
  Link as LinkIcon,
  Bot
} from &apos;lucide-react&apos;;
import { encodeBase64 } from &apos;../lib/base64&apos;;
import { cn } from &apos;@/lib/utils&apos;;
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from &apos;@/components/ui/table&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import {
  Popover,
  PopoverContent,
  PopoverTrigger
} from &apos;@/components/ui/popover&apos;;

const highlightOptionsAI: HighlightOptions = {
  detect: true,
  prefix: &apos;hljs-&apos;
};

export function UserMessage({
  children,
  full_name
}: {
  children: React.ReactNode;
  full_name: string;
}) {
  return (
    &lt;div className=&quot;relative bg-green-100 text-green-900 pt-8 pb-4 rounded-lg m-2 ml-4 flex-grow overflow-hidden px-4 self-end break-words flex flex-col items-start shadow-md&quot;&gt;
      &lt;span className=&quot;font-bold text-xs absolute top-0 left-2.5 w-full whitespace-nowrap overflow-ellipsis&quot;&gt;
        {full_name}
      &lt;/span&gt;
      &lt;ReactMarkdown&gt;{children?.toString()}&lt;/ReactMarkdown&gt;
    &lt;/div&gt;
  );
}

export function BotMessage({
  children,
  textStream,
  className
}: {
  children?: React.ReactNode;
  textStream?: StreamableValue;
  className?: string;
}) {
  const [text] = useStreamableValue(textStream);
  const content = text
    ? text
    : typeof children === &apos;string&apos;
      ? children
      : children;
  const [isCopied, setIsCopied] = useState(false);

  const copyToClipboard = (str: string): void =&gt; {
    void window.navigator.clipboard.writeText(str);
  };

  const handleCopy = (content: string) =&gt; {
    copyToClipboard(content);
    setIsCopied(true);
    setTimeout(() =&gt; setIsCopied(false), 1000);
  };

  const createDocumentLink = (href: string) =&gt; {

    const params = new URLSearchParams(href.substring(1));


    const pdfTitle = params.get(&apos;pdf&apos;);
    const pageNumber = params.get(&apos;p&apos;);


    const newSearchParams = new URLSearchParams();

    if (pdfTitle) {

      const encodedFilename = encodeURIComponent(encodeBase64(pdfTitle));
      newSearchParams.set(&apos;pdf&apos;, encodedFilename);
    }

    if (pageNumber) {

      newSearchParams.set(&apos;p&apos;, pageNumber);
    }


    return `?${newSearchParams.toString()}`;
  };

  return (
    &lt;div
      className={cn(
        &apos;relative bg-gray-100 text-gray-800 rounded-lg my-2 self-start break-words flex flex-col items-start shadow-md p-6&apos;,
        className
      )}
    &gt;
      &lt;div className=&quot;absolute top-2.5 left-2.5&quot;&gt;
        &lt;Bot className=&quot;text-gray-600&quot; /&gt;
      &lt;/div&gt;
      &lt;Button
        variant=&quot;ghost&quot;
        size=&quot;icon&quot;
        className=&quot;absolute top-1 right-1 h-6 w-6&quot;
        onClick={() =&gt; handleCopy(content || &apos;&apos;)}
      &gt;
        {isCopied ? (
          &lt;Check className=&quot;h-4 w-4&quot; /&gt;
        ) : (
          &lt;Copy className=&quot;h-4 w-4&quot; /&gt;
        )}
      &lt;/Button&gt;

      &lt;ReactMarkdown
        components={{
          table: ({ children }) =&gt; (
            &lt;div className=&quot;w-full py-2 overflow-x-auto&quot;&gt;
              &lt;Table&gt;{children}&lt;/Table&gt;
            &lt;/div&gt;
          ),
          thead: ({ children }) =&gt; &lt;TableHeader&gt;{children}&lt;/TableHeader&gt;,
          tbody: ({ children }) =&gt; &lt;TableBody&gt;{children}&lt;/TableBody&gt;,
          tr: ({ children }) =&gt; &lt;TableRow&gt;{children}&lt;/TableRow&gt;,
          th: ({ children }) =&gt; (
            &lt;TableHead className=&quot;border border-gray-200 p-1 text-left text-sm font-normal break-normal hyphens-auto&quot;&gt;
              {children}
            &lt;/TableHead&gt;
          ),
          td: ({ children }) =&gt; (
            &lt;TableCell className=&quot;border border-gray-200 p-1 text-left text-sm font-normal break-normal hyphens-auto&quot;&gt;
              {children}
            &lt;/TableCell&gt;
          ),
          code({ className, children, ...props }) {
            const match = /language-(\w+)/.exec(className || &apos;&apos;);
            const language = match &amp;&amp; match[1] ? match[1] : &apos;&apos;;
            const inline = !language;
            if (inline) {
              return (
                &lt;code className={className} {...props}&gt;
                  {children}
                &lt;/code&gt;
              );
            }
            return (
              &lt;div
                style={{
                  position: &apos;relative&apos;,
                  borderRadius: &apos;5px&apos;,
                  padding: &apos;20px&apos;,
                  marginTop: &apos;20px&apos;,
                  maxWidth: &apos;100%&apos;
                }}
              &gt;
                &lt;span
                  style={{
                    position: &apos;absolute&apos;,
                    top: &apos;0&apos;,
                    left: &apos;5px&apos;,
                    fontSize: &apos;0.8em&apos;,
                    textTransform: &apos;uppercase&apos;
                  }}
                &gt;
                  {language}
                &lt;/span&gt;
                &lt;div
                  style={{
                    overflowX: &apos;auto&apos;,
                    maxWidth: &apos;650px&apos;
                  }}
                &gt;
                  &lt;pre style={{ margin: &apos;0&apos; }}&gt;
                    &lt;code className={className} {...props}&gt;
                      {children}
                    &lt;/code&gt;
                  &lt;/pre&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            );
          },
          a: ({ href, children }) =&gt; {
            if (href) {

              if (href.startsWith(&apos;http://&apos;) || href.startsWith(&apos;https://&apos;)) {

                return (
                  &lt;a href={href} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                    {children}
                  &lt;/a&gt;
                );
              } else {

                const fullHref = createDocumentLink(href);
                return (
                  &lt;Link href={fullHref} passHref prefetch={false}&gt;
                    {children}
                  &lt;/Link&gt;
                );
              }
            }
            return &lt;a&gt;{children}&lt;/a&gt;;
          }
        }}
        remarkPlugins={[remarkGfm, remarkMath]}
        rehypePlugins={[[rehypeHighlight, highlightOptionsAI]]}
      &gt;
        {content?.toString() || &apos;&apos;}
      &lt;/ReactMarkdown&gt;
    &lt;/div&gt;
  );
}

interface SearchResult {
  title: string;
  url: string;
}

export const InternetSearchToolResults = ({
  searchResults
}: {
  searchResults: SearchResult[];
}) =&gt; {
  const [anchorEl, setAnchorEl] = useState&lt;HTMLElement | null&gt;(null);
  const [hoveredUrl, setHoveredUrl] = useState&lt;string&gt;(&apos;&apos;);
  const [isPopoverOpen, setIsPopoverOpen] = useState(false);

  const handlePopoverOpen = (
    event: React.MouseEvent&lt;HTMLElement&gt;,
    url: string
  ) =&gt; {
    setAnchorEl(event.currentTarget);
    setHoveredUrl(url);
    setIsPopoverOpen(true);
  };

  const handleLinkMouseLeave = () =&gt; {
    // Start a timer to close the popover
    setTimeout(() =&gt; {
      if (!isPopoverOpen) {
        setAnchorEl(null);
        setHoveredUrl(&apos;&apos;);
      }
    }, 100);
  };

  const handlePopoverMouseEnter = () =&gt; {
    setIsPopoverOpen(true);
  };

  const handlePopoverMouseLeave = () =&gt; {
    setIsPopoverOpen(false);
    setAnchorEl(null);
    setHoveredUrl(&apos;&apos;);
  };

  return (
    &lt;div className=&quot;flex flex-col space-y-2&quot;&gt;
      {searchResults.map((result, index) =&gt; (
        &lt;div key={index} className=&quot;flex items-center space-x-2&quot;&gt;
          &lt;Globe className=&quot;h-4 w-4 text-primary shrink-0&quot; /&gt;
          &lt;Popover&gt;
            &lt;PopoverTrigger asChild&gt;
              &lt;Button
                variant=&quot;link&quot;
                className=&quot;p-0 h-auto font-normal&quot;
                onMouseEnter={(e) =&gt; handlePopoverOpen(e, result.url)}
                onMouseLeave={handleLinkMouseLeave}
              &gt;
                {result.title}
              &lt;/Button&gt;
            &lt;/PopoverTrigger&gt;
            &lt;PopoverContent
              className=&quot;w-auto max-w-sm p-2&quot;
              onMouseEnter={handlePopoverMouseEnter}
              onMouseLeave={handlePopoverMouseLeave}
            &gt;
              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;
                &lt;LinkIcon className=&quot;h-4 w-4&quot; /&gt;
                &lt;span className=&quot;text-sm truncate&quot;&gt;{hoveredUrl}&lt;/span&gt;
                &lt;a
                  href={hoveredUrl}
                  target=&quot;_blank&quot;
                  rel=&quot;noopener noreferrer&quot;
                  className=&quot;ml-auto&quot;
                &gt;
                  &lt;ExternalLink className=&quot;h-4 w-4&quot; /&gt;
                &lt;/a&gt;
              &lt;/div&gt;
            &lt;/PopoverContent&gt;
          &lt;/Popover&gt;
        &lt;/div&gt;
      ))}
    &lt;/div&gt;
  );
};</file><file path="app/actionchat/component/ErrorBoundary.tsx">&apos;use client&apos;;

import React, { Component, ReactNode } from &apos;react&apos;;
import { Button } from &apos;@/components/ui/button&apos;;

interface Props {
  children?: ReactNode;
}

interface State {
  hasError: boolean;
}

class ErrorBoundary extends Component&lt;Props, State&gt; {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(_: Error): State {
    return { hasError: true };
  }

  public render() {
    if (this.state.hasError) {
      return (
        &lt;div className=&quot;flex flex-col justify-center items-center h-[90vh] p-2 md:p-4 lg:p-8 text-center&quot;&gt;
          &lt;h1 className=&quot;text-3xl font-bold mb-4&quot;&gt;
            Sorry - something went wrong
          &lt;/h1&gt;
          &lt;p className=&quot;text-base mb-4&quot;&gt;
            If you are using Google Translate, it may crash the page. Please
            disable it.
          &lt;/p&gt;

          &lt;Button variant=&quot;default&quot; onClick={() =&gt; window.location.reload()}&gt;
            Reload the page
          &lt;/Button&gt;
        &lt;/div&gt;
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;</file><file path="app/actionchat/component/fileupload.tsx">&apos;use client&apos;;

import React, { useCallback, useRef } from &apos;react&apos;;
import { useDropzone, FileRejection, FileWithPath } from &apos;react-dropzone&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Progress } from &apos;@/components/ui/progress&apos;;
import { Alert, AlertDescription } from &apos;@/components/ui/alert&apos;;
import { Card } from &apos;@/components/ui/card&apos;;
import { useUpload } from &apos;../context/uploadContext&apos;;
import { Upload, X, FileText, Loader2 } from &apos;lucide-react&apos;;

const SUPPORTED_FILE_TYPES: { [key: string]: string[] } = {
  &apos;application/pdf&apos;: [&apos;.pdf&apos;, &apos;.PDF&apos;],
  &apos;application/vnd.openxmlformats-officedocument.wordprocessingml.document&apos;: [
    &apos;.docx&apos;,
    &apos;.DOCX&apos;
  ]
};

const MAX_FILE_SIZE = 50 * 1024 * 1024;

function LinearProgressWithLabel({
  value,
  status
}: {
  value: number;
  status: string;
}) {
  const statusesWithSpinner = [
    &apos;Uploading file...&apos;,
    &apos;Preparing file for analysis...&apos;,
    &apos;Analyzing file...&apos;,
    &apos;Finalizing files...&apos;,
    &apos;Still analyzing files...&apos;
  ];

  const shouldShowSpinner = statusesWithSpinner.includes(status);

  return (
    &lt;&gt;
      &lt;div className=&quot;flex items-center w-full mb-1&quot;&gt;
        &lt;div className=&quot;w-full mr-1&quot;&gt;
          &lt;Progress value={value} className=&quot;h-2&quot; /&gt;
        &lt;/div&gt;
        &lt;div className=&quot;min-w-[35px]&quot;&gt;
          &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;
            {`${Math.round(value)}%`}
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div className=&quot;flex items-center gap-1 ml-1 min-h-[20px]&quot;&gt;
        &lt;p className=&quot;text-sm text-muted-foreground font-medium flex items-center gap-1&quot;&gt;
          {status}
          {shouldShowSpinner &amp;&amp; (
            &lt;Loader2 className=&quot;h-4 w-4 animate-spin text-primary&quot; /&gt;
          )}
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/&gt;
  );
}

export default function ServerUploadPage() {
  const formRef = useRef&lt;HTMLFormElement | null&gt;(null);
  const {
    isUploading,
    uploadFile,
    uploadProgress,
    uploadStatus,
    statusSeverity,
    selectedFile,
    setSelectedFile
  } = useUpload();

  const validateFile = useCallback(
    (file: FileWithPath | null, fileRejections: FileRejection[]) =&gt; {
      if (fileRejections.length &gt; 0) {
        return false;
      }
      return true;
    },
    []
  );

  const onDrop = useCallback(
    (acceptedFiles: FileWithPath[], fileRejections: FileRejection[]) =&gt; {
      const file = acceptedFiles[0] || null;
      if (validateFile(file, fileRejections)) {
        setSelectedFile(file);
      }
    },
    [setSelectedFile, validateFile]
  );

  const handleRemoveFile = () =&gt; {
    setSelectedFile(null);
  };

  const handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {
    e.preventDefault();
    if (!selectedFile) return;

    try {
      await uploadFile(selectedFile);
    } finally {
      formRef.current?.reset();
    }
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: SUPPORTED_FILE_TYPES,
    maxSize: MAX_FILE_SIZE,
    multiple: false
  });

  return (
    &lt;Card className=&quot;max-w-[550px] mx-auto bg-white&quot;&gt;
      &lt;form onSubmit={handleSubmit} ref={formRef}&gt;
        &lt;div
          {...getRootProps()}
          className={`min-h-[50px] border-2 border-dashed rounded-lg flex items-center justify-center text-center cursor-pointer p-4 mb-1 transition-all duration-200 ease-in-out
            ${
              isDragActive
                ? &apos;border-primary bg-primary/5&apos;
                : &apos;border-gray-200 hover:border-primary hover:bg-primary/5&apos;
            }`}
        &gt;
          &lt;input {...getInputProps()} /&gt;
          &lt;div&gt;
            &lt;Upload
              className={`w-9 h-9 mx-auto ${
                isDragActive ? &apos;text-primary&apos; : &apos;text-gray-900&apos;
              }`}
            /&gt;
            &lt;h3
              className={`text-xl font-semibold mb-1 ${
                isDragActive ? &apos;text-primary&apos; : &apos;text-gray-900&apos;
              }`}
            &gt;
              {isDragActive ? &apos;Drop the file here...&apos; : &apos;Drag files here&apos;}
            &lt;/h3&gt;
            &lt;p className=&quot;text-gray-500 mb-0.5&quot;&gt;Or&lt;/p&gt;
            &lt;Button
              variant=&quot;outline&quot;
              className=&quot;px-6 hover:bg-transparent hover:border-primary&quot;
            &gt;
              Browse
            &lt;/Button&gt;
            &lt;p className=&quot;text-gray-500 mt-1 text-sm&quot;&gt;
              Supported formats: PDF, DOCX
            &lt;/p&gt;
            &lt;p className=&quot;text-gray-400 text-xs mt-0.5 italic&quot;&gt;
              Note that files with more than approximately 600 pages are not
              currently supported.
            &lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        {selectedFile &amp;&amp; (
          &lt;Card className=&quot;bg-gray-50 p-4 mb-2&quot;&gt;
            &lt;div className=&quot;flex justify-between items-center&quot;&gt;
              &lt;div className=&quot;flex items-center gap-2&quot;&gt;
                &lt;div className=&quot;w-10 h-10 bg-primary rounded-lg flex items-center justify-center text-white&quot;&gt;
                  &lt;FileText /&gt;
                &lt;/div&gt;
                &lt;div className=&quot;min-w-0 max-w-[80%]&quot;&gt;
                  &lt;p className=&quot;text-gray-900 font-medium overflow-hidden line-clamp-2 break-words leading-tight mb-0.5&quot;&gt;
                    {selectedFile.name}
                  &lt;/p&gt;
                  &lt;p className=&quot;text-sm text-gray-500&quot;&gt;
                    {(selectedFile.size / (1024 * 1024)).toFixed(2)} MB
                  &lt;/p&gt;
                &lt;/div&gt;
              &lt;/div&gt;
              &lt;Button
                variant=&quot;ghost&quot;
                size=&quot;icon&quot;
                onClick={handleRemoveFile}
                disabled={isUploading}
                className=&quot;text-gray-900 hover:text-primary&quot;
              &gt;
                &lt;X className=&quot;h-4 w-4&quot; /&gt;
              &lt;/Button&gt;
            &lt;/div&gt;
            &lt;div className=&quot;mt-2&quot;&gt;
              &lt;LinearProgressWithLabel
                value={uploadProgress}
                status={uploadStatus}
              /&gt;
              {uploadStatus &amp;&amp; statusSeverity !== &apos;info&apos; &amp;&amp; (
                &lt;Alert
                  variant={statusSeverity as &apos;default&apos; | &apos;destructive&apos;}
                  className=&quot;mt-1&quot;
                &gt;
                  &lt;AlertDescription&gt;{uploadStatus}&lt;/AlertDescription&gt;
                &lt;/Alert&gt;
              )}
            &lt;/div&gt;
          &lt;/Card&gt;
        )}

        &lt;Button
          type=&quot;submit&quot;
          className=&quot;w-full&quot;
          disabled={isUploading || !selectedFile}
        &gt;
          &lt;Upload className=&quot;mr-2 h-4 w-4&quot; /&gt;
          {isUploading ? &apos;Uploading...&apos; : &apos;Upload File&apos;}
        &lt;/Button&gt;
      &lt;/form&gt;
    &lt;/Card&gt;
  );
}</file><file path="app/actionchat/component/PDFViewer.tsx">&apos;use client&apos;;

import React from &apos;react&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { CircularProgress } from &apos;@/components/ui/progress&apos;;
import { X } from &apos;lucide-react&apos;;
import useSWRImmutable from &apos;swr/immutable&apos;;
import { createClient } from &apos;@/lib/client/client&apos;;
import Link from &apos;next/link&apos;;
import { decodeBase64 } from &apos;../lib/base64&apos;;
import { useSearchParams, useRouter } from &apos;next/navigation&apos;;
const supabase = createClient();

const fetcher = async (
  fileName: string,
  userId: string,
  fileExtension: string
) =&gt; {
  const decodedFileName = decodeURIComponent(fileName);
  const filePath = `${userId}/${decodedFileName}`;

  if (fileExtension === &apos;pdf&apos;) {
    const { data, error } = await supabase.storage
      .from(&apos;userfiles&apos;)
      .download(filePath);

    if (error) {
      console.error(&apos;Error downloading PDF:&apos;, error);
      return null;
    }

    const blob = new Blob([data], { type: &apos;application/pdf&apos; });
    return URL.createObjectURL(blob);
  } else if ([&apos;doc&apos;, &apos;docx&apos;].includes(fileExtension)) {
    const { data, error } = await supabase.storage
      .from(&apos;userfiles&apos;)
      .createSignedUrl(filePath, 300);

    if (error) {
      console.error(&apos;Error creating signed URL:&apos;, error);
      return null;
    }

    return data.signedUrl;
  }

  throw new Error(&apos;Unsupported file type&apos;);
};

export default function DocumentViewer({
  fileName,
  userId,
  hasActiveSubscription
}: {
  fileName: string;
  userId: string | undefined;
  hasActiveSubscription: boolean;
}) {
  const router = useRouter();
  const searchParams = useSearchParams();

  const handleClose = () =&gt; {
    const url = new URL(window.location.href);
    url.searchParams.delete(&apos;pdf&apos;);
    url.searchParams.delete(&apos;p&apos;);
    router.replace(url.pathname + url.search);
  };

  const decodedFileName = decodeURIComponent(decodeBase64(fileName));
  const fileExtension = decodedFileName.split(&apos;.&apos;).pop()?.toLowerCase() || &apos;&apos;;
  const page = Number(searchParams.get(&apos;p&apos;)) || 1;
  const {
    data: fileUrl,
    error,
    isLoading
  } = useSWRImmutable(
    userId &amp;&amp; hasActiveSubscription ? [fileName, userId, fileExtension] : null,
    ([fileName, userId, fileExtension]) =&gt;
      fetcher(fileName, userId, fileExtension)
  );

  if (!userId || !hasActiveSubscription) {
    return (
      &lt;div className=&quot;flex flex-col justify-center items-center h-[97vh] text-center&quot;&gt;
        &lt;p&gt;You need to be logged in with an active subscription to view this&lt;/p&gt;
        &lt;Button asChild className=&quot;mt-2&quot;&gt;
          &lt;Link href=&quot;/signin&quot;&gt;Sign in&lt;/Link&gt;
        &lt;/Button&gt;
      &lt;/div&gt;
    );
  }

  if (error) {
    console.error(&apos;Error loading document:&apos;, error);
    return (
      &lt;div className=&quot;flex flex-col justify-center items-center h-[97vh] text-center&quot;&gt;
        &lt;p&gt;There was an error loading the document. Please try again later.&lt;/p&gt;
      &lt;/div&gt;
    );
  }

  if (isLoading) {
    return (
      &lt;div className=&quot;w-[55%] border-l border-gray-200 hidden sm:flex flex-col justify-center items-center h-[97vh] text-center&quot;&gt;
        &lt;CircularProgress /&gt;
      &lt;/div&gt;
    );
  }

  if (!fileUrl) {
    return (
      &lt;div className=&quot;flex flex-col justify-center items-center h-[97vh] text-center&quot;&gt;
        &lt;p&gt;No file available.&lt;/p&gt;
      &lt;/div&gt;
    );
  }

  const isPdf = fileExtension === &apos;pdf&apos;;
  const isOfficeDocument = [&apos;doc&apos;, &apos;docx&apos;].includes(fileExtension);
  const iframeId = `document-viewer-${fileName.replace(/[^a-zA-Z0-9]/g, &apos;-&apos;)}`;

  return (
    &lt;div className=&quot;w-[55%] border-l border-gray-200 hidden sm:flex flex-row justify-center items-start overflow-hidden relative&quot;&gt;
      &lt;Button
        variant=&quot;ghost&quot;
        size=&quot;icon&quot;
        onClick={handleClose}
        className=&quot;absolute right-1 top-1 z-50 bg-white/70 hover:bg-white/90 p-0&quot;
      &gt;
        &lt;X className=&quot;h-4 w-4&quot; /&gt;
      &lt;/Button&gt;

      {isPdf ? (
        &lt;iframe
          key={`pdf-viewer-${page}`}
          id={iframeId}
          src={`${fileUrl}#page=${page}`}
          className=&quot;w-full h-full border-none&quot;
          title=&quot;PDF Viewer&quot;
          referrerPolicy=&quot;no-referrer&quot;
          aria-label={`PDF document: ${decodedFileName}`}
        /&gt;
      ) : isOfficeDocument ? (
        &lt;iframe
          id={iframeId}
          src={`https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(fileUrl)}`}
          className=&quot;w-full h-full border-none&quot;
          title=&quot;Office Document Viewer&quot;
          referrerPolicy=&quot;no-referrer&quot;
          aria-label={`Office document: ${decodedFileName}`}
        /&gt;
      ) : (
        &lt;p&gt;This file is not supported.&lt;/p&gt;
      )}
    &lt;/div&gt;
  );
}</file><file path="app/actionchat/component/UserChatList.tsx">&apos;use client&apos;;
import React, {
  type FC,
  useState,
  memo,
  useCallback,
  useMemo,
  useOptimistic,
  startTransition
} from &apos;react&apos;;
import { useActions } from &apos;ai/rsc&apos;;
import { type AI } from &apos;../action&apos;;
import {
  deleteChatData,
  fetchMoreChatPreviews,
  deleteFilterTagAndDocumentChunks,
  updateChatTitle
} from &apos;./action&apos;;
import Link from &apos;next/link&apos;;
import {
  useRouter,
  useParams,
  useSearchParams,
  usePathname
} from &apos;next/navigation&apos;;
import { format, isToday, isYesterday, subDays } from &apos;date-fns&apos;;
import { Tables } from &apos;@/types/database&apos;;
import useSWRInfinite from &apos;swr/infinite&apos;;
import { TZDate } from &apos;@date-fns/tz&apos;;
import { createClient } from &apos;@/lib/client/client&apos;;
import { decodeBase64, encodeBase64 } from &apos;../lib/base64&apos;;
import useSWRImmutable from &apos;swr/immutable&apos;;
import { useFormStatus } from &apos;react-dom&apos;;
import {
  Trash2,
  MoreHorizontal,
  Share2,
  Edit,
  FilePlus,
  MessageSquare,
  Loader2
} from &apos;lucide-react&apos;;

import { useUpload } from &apos;../context/uploadContext&apos;;
import ServerUploadPage from &apos;./fileupload&apos;;


import { Dialog, DialogContent, DialogFooter, DialogTitle } from &apos;@/components/ui/dialog&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Tooltip, TooltipContent, TooltipTrigger } from &apos;@/components/ui/tooltip&apos;;

type UserInfo = Pick&lt;Tables&lt;&apos;users&apos;&gt;, &apos;full_name&apos; | &apos;email&apos; | &apos;id&apos;&gt;;

type ChatPreview = {
  id: string;
  firstMessage: string;
  created_at: string;
};

interface CombinedDrawerProps {
  userInfo: UserInfo;
  initialChatPreviews: ChatPreview[];
}
interface FileObject {
  name: string;
  created_at: string;
  updated_at: string;
}

const fetcher = async (userId: string) =&gt; {
  const supabase = createClient();
  const { data: files, error } = await supabase.rpc(&apos;list_objects&apos;, {
    bucketid: &apos;userfiles&apos;,
    prefix: `${userId}/`,
    limits: 1000,
    offsets: 0
  });

  if (error) {
    console.error(&apos;Error fetching user files:&apos;, error);
    return [];
  }

  return (
    files.map((file) =&gt; ({
      ...file,
      name: decodeBase64(file.name.split(&apos;/&apos;).pop() || &apos;&apos;)
    })) || []
  );
};
const useCategorizedChats = (chatPreviews: ChatPreview[][] | undefined) =&gt; {
  return useMemo(() =&gt; {
    const chatPreviewsFlat = chatPreviews ? chatPreviews.flat() : [];
    const getZonedDate = (date: string) =&gt;
      new TZDate(new Date(date), &apos;Europe/Copenhagen&apos;);

    const today = chatPreviewsFlat.filter((chat) =&gt;
      isToday(getZonedDate(chat.created_at))
    );

    const yesterday = chatPreviewsFlat.filter((chat) =&gt;
      isYesterday(getZonedDate(chat.created_at))
    );

    const last7Days = chatPreviewsFlat.filter((chat) =&gt; {
      const chatDate = getZonedDate(chat.created_at);
      const sevenDaysAgo = subDays(new Date(), 7);
      return (
        chatDate &gt; sevenDaysAgo &amp;&amp; !isToday(chatDate) &amp;&amp; !isYesterday(chatDate)
      );
    });

    const last30Days = chatPreviewsFlat.filter((chat) =&gt; {
      const chatDate = getZonedDate(chat.created_at);
      const thirtyDaysAgo = subDays(new Date(), 30);
      const sevenDaysAgo = subDays(new Date(), 7);
      return chatDate &gt; thirtyDaysAgo &amp;&amp; chatDate &lt;= sevenDaysAgo;
    });

    const last2Months = chatPreviewsFlat.filter((chat) =&gt; {
      const chatDate = getZonedDate(chat.created_at);
      const sixtyDaysAgo = subDays(new Date(), 60);
      const thirtyDaysAgo = subDays(new Date(), 30);
      return chatDate &gt; sixtyDaysAgo &amp;&amp; chatDate &lt;= thirtyDaysAgo;
    });

    const older = chatPreviewsFlat.filter((chat) =&gt; {
      const sixtyDaysAgo = subDays(new Date(), 60);
      return getZonedDate(chat.created_at) &lt;= sixtyDaysAgo;
    });

    return { today, yesterday, last7Days, last30Days, last2Months, older };
  }, [chatPreviews]);
};

const CombinedDrawer: FC&lt;CombinedDrawerProps&gt; = ({
  userInfo,
  initialChatPreviews
}) =&gt; {
  const { selectedMode, selectedBlobs, setSelectedBlobs } = useUpload();
  const params = useParams();
  const router = useRouter();
  const searchParams = useSearchParams();
  const pathname = usePathname();
  const [isMobileOpen, setIsMobileOpen] = useState(false);

  const toggleMobileDrawer = (event: React.MouseEvent) =&gt; {
    event.stopPropagation();
    setIsMobileOpen(!isMobileOpen);
  };

  const currentChatId = typeof params.id === &apos;string&apos; ? params.id : undefined;

  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false);
  const [chatToDelete, setChatToDelete] = useState&lt;string | null&gt;(null);

  const {
    data: chatPreviews,
    mutate: mutateChatPreviews,
    isValidating: isLoadingMore,
    size,
    setSize
  } = useSWRInfinite(
    (index) =&gt; [`chatPreviews`, index],
    async ([, index]) =&gt; {
      const offset = index * 25;
      const newChatPreviews = await fetchMoreChatPreviews(offset);
      return newChatPreviews;
    },
    {
      fallbackData: [initialChatPreviews],
      revalidateFirstPage: false,
      revalidateOnFocus: false,
      revalidateOnReconnect: false,
      revalidateIfStale: false,
      revalidateOnMount: false
    }
  );

  const hasMore =
    chatPreviews &amp;&amp; chatPreviews[chatPreviews.length - 1]?.length === 30;

  const loadMoreChats = useCallback(() =&gt; {
    if (!isLoadingMore) {
      setSize(size + 1);
    }
  }, [isLoadingMore, setSize, size]);

  const handleDeleteClick = (id: string) =&gt; {
    setChatToDelete(id);
    setDeleteConfirmationOpen(true);
  };

  const handleDeleteConfirmation = async () =&gt; {
    if (chatToDelete) {
      try {
        await deleteChatData(chatToDelete);
        await mutateChatPreviews();

        if (chatToDelete === currentChatId) {
          router.push(&apos;/actionchat&apos;);
        }
      } catch (error) {
        console.error(&apos;Failed to delete the chat:&apos;, error);
      }
    }
    setDeleteConfirmationOpen(false);
    setChatToDelete(null);
  };

  const categorizedChats = useCategorizedChats(chatPreviews);

  const handleChatSelect = useCallback(() =&gt; {
    if (window.innerWidth &lt; 800) {
      setIsMobileOpen(false);
    }
  }, []);
  const {
    data: userFiles = [],
    isLoading: isLoadingFiles,
    mutate: mutateFiles
  } = useSWRImmutable&lt;FileObject[]&gt;(
    selectedMode === &apos;pdf&apos; &amp;&amp; userInfo.id ? `userFiles` : null,
    () =&gt; fetcher(userInfo.id)
  );

  const sortedUserFiles = useMemo(() =&gt; {
    return [...userFiles].sort(
      (a, b) =&gt;
        new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
    );
  }, [userFiles]);
  const { resetMessages } = useActions&lt;typeof AI&gt;();
  const handleClearMessages = async () =&gt; {
    const result = await resetMessages();
    if (result.success) {
      router.refresh();
    } else {
      console.error(&apos;Failed to reset messages:&apos;, result.message);
    }
  };
  const renderFileList = () =&gt; {
    const handleSelectBlob = (fileName: string, createdAt: string) =&gt; {
      const formattedDate = format(new Date(createdAt), &apos;yyyy-MM-dd&apos;);
      const filterTag = `${fileName}[[${formattedDate}]]`;

      if (selectedBlobs.includes(filterTag)) {
        setSelectedBlobs(selectedBlobs.filter((blob) =&gt; blob !== filterTag));
      } else {
        setSelectedBlobs([...selectedBlobs, filterTag]);
      }
    };

    const currentPdfParam = searchParams.get(&apos;pdf&apos;);
    const currentPdf = currentPdfParam
      ? decodeBase64(decodeURIComponent(currentPdfParam))
      : null;

    return (
      &lt;ul className=&quot;overflow-auto flex-1 border-t border-gray-200 mt-2&quot;&gt;
        {sortedUserFiles.map((file, index) =&gt; {
          const formattedDate = format(new Date(file.created_at), &apos;yyyy-MM-dd&apos;);
          const filterTag = `${file.name}[[${formattedDate}]]`;
          const isSelected = selectedBlobs.includes(filterTag);
          const currentParams = new URLSearchParams(searchParams.toString());
          currentParams.set(&apos;pdf&apos;, encodeURIComponent(encodeBase64(file.name)));
          const href = `${pathname}?${currentParams.toString()}`;
          const isCurrentFile = currentPdf === file.name;

          return (
            &lt;li key={index} className=&quot;flex border-b border-gray-200&quot;&gt;
              &lt;Link
                href={href}
                onClick={() =&gt; {
                  if (window.innerWidth &lt; 600) {
                    setIsMobileOpen(false);
                  }
                }}
                className={`flex-1 py-1 px-2 ${
                  isCurrentFile ? &apos;bg-gray-200&apos; : &apos;bg-transparent&apos;
                } hover:bg-gray-300`}
              &gt;
                &lt;div className=&quot;overflow-hidden text-ellipsis whitespace-nowrap font-medium&quot;&gt;
                  {file.name.replace(/_/g, &apos; &apos;)}
                &lt;/div&gt;
                &lt;div className=&quot;text-sm text-gray-500&quot;&gt;
                  {format(new Date(file.created_at), &apos;PPP&apos;)}
                &lt;/div&gt;
              &lt;/Link&gt;
              &lt;div className=&quot;flex items-center&quot;&gt;
                &lt;input
                  type=&quot;checkbox&quot;
                  checked={isSelected}
                  onChange={() =&gt; handleSelectBlob(file.name, file.created_at)}
                  onClick={(e) =&gt; e.stopPropagation()}
                  className=&quot;mr-2&quot;
                /&gt;
                &lt;form
                  onSubmit={async (e) =&gt; {
                    e.preventDefault();
                    const formData = new FormData(e.currentTarget);
                    formData.append(&apos;filePath&apos;, encodeBase64(file.name));
                    formData.append(&apos;filterTag&apos;, filterTag);
                    await deleteFilterTagAndDocumentChunks(formData);
                    await mutateFiles();
                  }}
                &gt;
                  &lt;SubmitButton /&gt;
                &lt;/form&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          );
        })}
      &lt;/ul&gt;
    );
  };
  return (
    &lt;&gt;
      &lt;button
        onClick={toggleMobileDrawer}
        className=&quot;md:hidden fixed left-4 bottom-10 z-50 p-2&quot;
      &gt;
        &lt;MessageSquare className=&quot;text-blue-500 w-6 h-6&quot; /&gt;
      &lt;/button&gt;
      &lt;div
        className={`fixed left-0 top-0 h-full transition-all duration-300 border border-gray-300 bg-[rgba(240,247,255,0.9)] ${
          isMobileOpen
            ? &apos;w-full sm:w-2/5 md:w-[200px] lg:w-[250px] xl:w-[300px] 2xl:w-[350px] visible&apos;
            : &apos;w-0 invisible&apos;
        }`}
      &gt;
        &lt;div className=&quot;flex flex-col h-full&quot;&gt;
          {!userInfo.email ? (
            &lt;div className=&quot;flex flex-col items-center justify-center h-[90vh] text-center p-2 gap-2&quot;&gt;
              &lt;h6 className=&quot;text-lg font-semibold&quot;&gt;
                Sign in to save and view your chats
              &lt;/h6&gt;
              &lt;Button asChild className=&quot;rounded px-4 py-1&quot;&gt;
                &lt;Link href=&quot;/signin&quot;&gt;Sign in&lt;/Link&gt;
              &lt;/Button&gt;
            &lt;/div&gt;
          ) : (
            &lt;&gt;
              &lt;div className=&quot;flex items-center justify-end w-full pt-1 pr-1 gap-1&quot;&gt;
                &lt;Tooltip&gt;
                     &lt;TooltipTrigger asChild&gt;
                    &lt;button
                      aria-label=&quot;create conversation&quot;
                      onClick={handleClearMessages}
                      className=&quot;p-2 text-primary&quot;
                  &gt;
                    &lt;FilePlus className=&quot;w-4 h-4&quot; /&gt;
                  &lt;/button&gt;
                &lt;/Tooltip&gt;
              &lt;/div&gt;
              {selectedMode === &apos;pdf&apos; ? (
                &lt;div className=&quot;flex flex-col h-[calc(100vh-50px)]&quot;&gt;
                  &lt;div className=&quot;flex-1 overflow-auto flex flex-col&quot;&gt;
                    {isLoadingFiles ? (
                      &lt;div className=&quot;flex justify-center p-2&quot;&gt;
                        &lt;Loader2 className=&quot;w-6 h-6 animate-spin&quot; /&gt;
                      &lt;/div&gt;
                    ) : (
                      renderFileList()
                    )}
                  &lt;/div&gt;
                  &lt;div className=&quot;border-t border-gray-200 p-1 mt-auto bg-background&quot;&gt;
                    &lt;ServerUploadPage /&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              ) : (
                &lt;ul className=&quot;overflow-auto&quot;&gt;
                  {!chatPreviews ? (
                    Array.from({ length: 5 }).map((_, index) =&gt; (
                      &lt;li key={index} className=&quot;p-2&quot;&gt;
                        &lt;div className=&quot;animate-pulse bg-gray-200 h-4 rounded w-full&quot;&gt;&lt;/div&gt;
                      &lt;/li&gt;
                    ))
                  ) : (
                    &lt;&gt;
                      &lt;RenderChatSection
                        title=&quot;Today&quot;
                        chats={categorizedChats.today || []}
                        currentChatId={currentChatId}
                        handleDeleteClick={handleDeleteClick}
                        onChatSelect={handleChatSelect}
                      /&gt;
                      &lt;RenderChatSection
                        title=&quot;Yesterday&quot;
                        chats={categorizedChats.yesterday || []}
                        currentChatId={currentChatId}
                        handleDeleteClick={handleDeleteClick}
                        onChatSelect={handleChatSelect}
                      /&gt;
                      &lt;RenderChatSection
                        title=&quot;Last 7 days&quot;
                        chats={categorizedChats.last7Days || []}
                        currentChatId={currentChatId}
                        handleDeleteClick={handleDeleteClick}
                        onChatSelect={handleChatSelect}
                      /&gt;
                      &lt;RenderChatSection
                        title=&quot;Last 30 days&quot;
                        chats={categorizedChats.last30Days || []}
                        currentChatId={currentChatId}
                        handleDeleteClick={handleDeleteClick}
                        onChatSelect={handleChatSelect}
                      /&gt;
                      &lt;RenderChatSection
                        title=&quot;Last 2 month&quot;
                        chats={categorizedChats.last2Months || []}
                        currentChatId={currentChatId}
                        handleDeleteClick={handleDeleteClick}
                        onChatSelect={handleChatSelect}
                      /&gt;
                      &lt;RenderChatSection
                        title=&quot;Older&quot;
                        chats={categorizedChats.older || []}
                        currentChatId={currentChatId}
                        handleDeleteClick={handleDeleteClick}
                        onChatSelect={handleChatSelect}
                      /&gt;
                      {hasMore &amp;&amp; (
                        &lt;div className=&quot;flex justify-center my-4&quot;&gt;
                          &lt;button
                            onClick={loadMoreChats}
                            disabled={isLoadingMore}
                            className=&quot;rounded px-4 py-1 border border-gray-300&quot;
                          &gt;
                            {isLoadingMore ? (
                              &lt;Loader2 className=&quot;w-5 h-5 animate-spin mr-1&quot; /&gt;
                            ) : (
                              &apos;Hent flere&apos;
                            )}
                          &lt;/button&gt;
                        &lt;/div&gt;
                      )}
                    &lt;/&gt;
                  )}
                &lt;/ul&gt;
              )}
            &lt;/&gt;
          )}
        &lt;/div&gt;
        &lt;Dialog
          open={deleteConfirmationOpen}
          onOpenChange={setDeleteConfirmationOpen}
        &gt;
          &lt;DialogContent className=&quot;p-4&quot;&gt;
            &lt;DialogTitle&gt;Delete Chat&lt;/DialogTitle&gt;
            &lt;p&gt;Are you sure you want to delete this chat?&lt;/p&gt;
          &lt;/DialogContent&gt;
          &lt;DialogFooter&gt;
            &lt;Button variant=&quot;outline&quot; onClick={() =&gt; setDeleteConfirmationOpen(false)}&gt;
              Cancel
            &lt;/Button&gt;
            &lt;Button onClick={handleDeleteConfirmation} className=&quot;text-red-500&quot;&gt;
              Delete
            &lt;/Button&gt;
          &lt;/DialogFooter&gt;
        &lt;/Dialog&gt;
      &lt;/div&gt;
    &lt;/&gt;
  );
};

type RenderChatSectionProps = {
  title: string;
  chats: ChatPreview[];
  currentChatId: string | null | undefined;
  handleDeleteClick: (id: string) =&gt; void;
  onChatSelect: (id: string) =&gt; void;
};
const RenderChatSection: FC&lt;RenderChatSectionProps&gt; = memo(
  ({ title, chats, currentChatId, handleDeleteClick, onChatSelect }) =&gt; {
    const searchParams = useSearchParams();
    const router = useRouter();
    const [anchorEl, setAnchorEl] = useState&lt;null | HTMLElement&gt;(null);
    const [editDialogOpen, setEditDialogOpen] = useState(false);
    const [menuChatId, setMenuChatId] = useState&lt;string | null&gt;(null);
    const [editingChatId, setEditingChatId] = useState&lt;string | null&gt;(null);
    const [newTitle, setNewTitle] = useState(&apos;&apos;);

    const [optimisticChats, addOptimisticChat] = useOptimistic(
      chats,
      (
        currentChats: ChatPreview[],
        optimisticUpdate: { id: string; newTitle: string }
      ) =&gt;
        currentChats.map((chat) =&gt;
          chat.id === optimisticUpdate.id
            ? {
                ...chat,
                chat_messages: [
                  { content: optimisticUpdate.newTitle },
                  ...chat.firstMessage.slice(1)
                ]
              }
            : chat
        )
    );

    const handleMenuClick = (
      event: React.MouseEvent&lt;HTMLElement&gt;,
      chatId: string
    ) =&gt; {
      event.preventDefault();
      setAnchorEl(event.currentTarget);
      setMenuChatId(chatId);
    };

    const handleMenuClose = () =&gt; {
      setAnchorEl(null);
      setMenuChatId(null);
    };

    const handleOpenRename = (chatId: string) =&gt; {
      setEditingChatId(chatId);
      setEditDialogOpen(true);
      handleMenuClose();
    };

    const handleCloseDialog = () =&gt; {
      setEditDialogOpen(false);
      setEditingChatId(null);
      setNewTitle(&apos;&apos;);
    };
    if (optimisticChats.length === 0) return null;

    return (
      &lt;&gt;
        &lt;hr className=&quot;my-1 border-gray-300&quot; /&gt;
        &lt;h3 className=&quot;px-2 text-sm font-semibold text-gray-700&quot;&gt;{title}&lt;/h3&gt;
        {optimisticChats.map(({ id, firstMessage }) =&gt; {
          const currentParams = new URLSearchParams(searchParams.toString());
          const href = `/actionchat/${id}${
            currentParams.toString() ? &apos;?&apos; + currentParams.toString() : &apos;&apos;
          }`;

          return (
            &lt;li key={id} className=&quot;relative list-none&quot;&gt;
              &lt;Link
                href={href}
                prefetch={false}
                onMouseEnter={() =&gt; router.prefetch(href)}
                onClick={() =&gt; onChatSelect(id)}
                className={`block p-2 pr-8 text-sm ${
                  currentChatId === id ? &apos;bg-gray-200&apos; : &apos;hover:bg-gray-100&apos;
                }`}
              &gt;
                &lt;Tooltip&gt;
                  &lt;TooltipTrigger asChild&gt;
                    &lt;span className=&quot;overflow-hidden text-ellipsis whitespace-nowrap&quot;&gt;
                      {firstMessage}
                    &lt;/span&gt;
                  &lt;/TooltipTrigger&gt;
                  &lt;TooltipContent&gt;{firstMessage}&lt;/TooltipContent&gt;
                &lt;/Tooltip&gt;
              &lt;/Link&gt;
              &lt;button
                onClick={(e) =&gt; handleMenuClick(e, id)}
                className=&quot;hidden absolute right-2 top-1/2 -translate-y-1/2 menu-button p-1&quot;
              &gt;
                &lt;MoreHorizontal className=&quot;w-4 h-4&quot; /&gt;
              &lt;/button&gt;
              {anchorEl &amp;&amp; menuChatId === id &amp;&amp; (
                &lt;div className=&quot;absolute right-2 top-full mt-1 w-40 bg-white border border-gray-200 rounded shadow-lg z-10&quot;&gt;
                  &lt;button
                    onClick={() =&gt; {
                      handleMenuClose();
                    }}
                    className=&quot;w-full text-left px-2 py-1 flex items-center gap-2 hover:bg-gray-100&quot;
                    disabled
                  &gt;
                    &lt;Share2 className=&quot;w-4 h-4 text-gray-500&quot; /&gt; Share
                  &lt;/button&gt;
                  &lt;button
                    onClick={() =&gt; handleOpenRename(id)}
                    className=&quot;w-full text-left px-2 py-1 flex items-center gap-2 hover:bg-gray-100&quot;
                  &gt;
                    &lt;Edit className=&quot;w-4 h-4 text-gray-500&quot; /&gt; Rename
                  &lt;/button&gt;
                  &lt;button
                    onClick={() =&gt; {
                      handleDeleteClick(id);
                      handleMenuClose();
                    }}
                    className=&quot;w-full text-left px-2 py-1 flex items-center gap-2 text-red-500 hover:bg-gray-100&quot;
                  &gt;
                    &lt;Trash2 className=&quot;w-4 h-4&quot; /&gt; Delete
                  &lt;/button&gt;
                &lt;/div&gt;
              )}
            &lt;/li&gt;
          );
        })}

        &lt;Dialog
          open={editDialogOpen}
          onOpenChange={(open) =&gt; {
            if (!open) handleCloseDialog();
          }}
        &gt;
          &lt;DialogContent className=&quot;p-4 min-w-[400px]&quot;&gt;
            &lt;form
              onSubmit={async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {
                e.preventDefault();
                const formData = new FormData(e.currentTarget);
                const chatId = formData.get(&apos;chatId&apos;) as string;
                const titleVal = formData.get(&apos;title&apos;) as string;

                startTransition(async () =&gt; {
                  addOptimisticChat({
                    id: chatId,
                    newTitle: titleVal
                  });

                  try {
                    const result = await updateChatTitle(formData);

                    if (!result.success) {
                      const originalChat = chats.find(
                        (chat) =&gt; chat.id === chatId
                      );
                      if (originalChat) {
                        addOptimisticChat({
                          id: chatId,
                          newTitle: originalChat.firstMessage
                        });
                      }
                      console.error(&apos;Failed to update chat title&apos;);
                    }
                  } catch (error) {
                    const originalChat = chats.find((chat) =&gt; chat.id === chatId);
                    if (originalChat) {
                      addOptimisticChat({
                        id: chatId,
                        newTitle: originalChat.firstMessage
                      });
                    }
                    console.error(&apos;Error updating chat title:&apos;, error);
                  }
                });

                handleCloseDialog();
              }}
              className=&quot;p-1&quot;
            &gt;
              &lt;input
                type=&quot;hidden&quot;
                name=&quot;chatId&quot;
                value={editingChatId || &apos;&apos;}
              /&gt;
              &lt;input
                autoFocus
                name=&quot;title&quot;
                placeholder=&quot;New name&quot;
                type=&quot;text&quot;
                required
                value={newTitle}
                onChange={(e) =&gt; setNewTitle(e.target.value)}
                className=&quot;border p-2 rounded w-full mb-4&quot;
              /&gt;

              &lt;div className=&quot;flex justify-end gap-2&quot;&gt;
                &lt;Button
                  variant=&quot;outline&quot;
                  onClick={handleCloseDialog}
                  className=&quot;text-red-500&quot;
                &gt;
                  Cancel
                &lt;/Button&gt;
                &lt;Button type=&quot;submit&quot;&gt;Save&lt;/Button&gt;
              &lt;/div&gt;
            &lt;/form&gt;
          &lt;/DialogContent&gt;
        &lt;/Dialog&gt;
      &lt;/&gt;
    );
  },
  (prevProps, nextProps) =&gt; {
    return (
      prevProps.title === nextProps.title &amp;&amp;
      prevProps.currentChatId === nextProps.currentChatId &amp;&amp;
      prevProps.chats.length === nextProps.chats.length &amp;&amp;
      prevProps.chats.every((chat, index) =&gt; {
        const nextChat = nextProps.chats[index];
        return (
          chat.id === nextChat.id &amp;&amp; chat.firstMessage === nextChat.firstMessage
        );
      })
    );
  }
);

RenderChatSection.displayName = &apos;RenderChatSection&apos;;

export default CombinedDrawer;

function SubmitButton() {
  const { pending } = useFormStatus();

  return (
    &lt;button type=&quot;submit&quot; disabled={pending} className=&quot;w-full p-2 text-red-500&quot;&gt;
      {pending ? (
        &lt;Loader2 className=&quot;w-6 h-6 animate-spin&quot; /&gt;
      ) : (
        &lt;Trash2 className=&quot;w-6 h-6&quot; /&gt;
      )}
    &lt;/button&gt;
  );
}</file><file path="app/actionchat/hooks/chat-scroll-anchor.tsx">&apos;use client&apos;;

import React, { useEffect, useState } from &apos;react&apos;;
import { useInView } from &apos;react-intersection-observer&apos;;

interface ChatScrollAnchorProps {
  trackVisibility?: boolean;
}

export function ChatScrollAnchor({ trackVisibility }: ChatScrollAnchorProps) {
  const [isAtBottom, setIsAtBottom] = useState(false);

  const { ref, entry, inView } = useInView({
    trackVisibility,
    delay: 100,
    rootMargin: &apos;0px 0px -50px 0px&apos;
  });

  useEffect(() =&gt; {
    const handleScroll = () =&gt; {
      setIsAtBottom(
        window.innerHeight + window.scrollY &gt;= document.body.offsetHeight
      );
    };

    window.addEventListener(&apos;scroll&apos;, handleScroll, { passive: true });
    handleScroll();

    return () =&gt; {
      window.removeEventListener(&apos;scroll&apos;, handleScroll);
    };
  }, []);

  useEffect(() =&gt; {
    if (isAtBottom &amp;&amp; trackVisibility &amp;&amp; !inView) {
      entry?.target.scrollIntoView({
        block: &apos;start&apos;
      });
    }
  }, [inView, entry, isAtBottom, trackVisibility]);

  return (
    &lt;div
      ref={ref}
      style={{
        height: &apos;8px&apos;,
        width: &apos;100%&apos;
      }}
    /&gt;
  );
}</file><file path="app/actionchat/action.tsx">import React from &apos;react&apos;;
import {
  createAI,
  getMutableAIState,
  createStreamableUI,
  getAIState,
  createStreamableValue,
  type StreamableValue
} from &apos;ai/rsc&apos;;
import { streamText, generateId, embed, generateObject } from &apos;ai&apos;;
import { v4 as uuidv4 } from &apos;uuid&apos;;
import { saveChatToSupbabase } from &apos;./lib/SaveToDb&apos;;
import { openai } from &apos;@ai-sdk/openai&apos;;
import { anthropic } from &apos;@ai-sdk/anthropic&apos;;
import { getUserInfo, getSession } from &apos;@/lib/server/supabase&apos;;
import { createServerSupabaseClient } from &apos;@/lib/server/server&apos;;
import { redirect } from &apos;next/navigation&apos;;
import { Ratelimit } from &apos;@upstash/ratelimit&apos;;
import { redis } from &apos;@/lib/server/server&apos;;
import { load } from &apos;cheerio&apos;;
import { NodeHtmlMarkdown } from &apos;node-html-markdown&apos;;
import { z } from &apos;zod&apos;;
import { Search, RefreshCw, Loader2 } from &apos;lucide-react&apos;;

import {
  BotMessage,
  UserMessage,
  InternetSearchToolResults
} from &apos;./component/ChatWrapper&apos;;
import { cn } from &apos;@/lib/utils&apos;;
import { Card, CardContent } from &apos;@/components/ui/card&apos;;

const SYSTEM_TEMPLATE = `You are a helpful assistant. Answer all questions to the best of your ability. Provide helpful answers in markdown.`;

const getModel = (selectedModel: &apos;claude3&apos; | &apos;chatgpt4&apos;) =&gt; {
  if (selectedModel === &apos;claude3&apos;) {
    return anthropic(&apos;claude-3-5-sonnet-20241022&apos;);
  } else if (selectedModel === &apos;chatgpt4&apos;) {
    return openai(&apos;gpt-4o&apos;);
  }
  return anthropic(&apos;claude-3-5-sonnet-20241022&apos;);
};

const zodSchemaSearch = z.object({
  variation1: z
    .string()
    .min(1)
    .describe(
      &apos;A variation that precisely identifies the main topic or key concept of the query, aiming to match specific terminology used in authoritative sources. Output should be in English and is required.&apos;
    ),
  variation2: z
    .string()
    .min(1)
    .describe(
      &apos;A variation that focuses on the context or domain relevant to the question, tailored to find documents within the same field or area of interest. Output should be in English and is required.&apos;
    ),
  variation3: z
    .string()
    .min(1)
    .describe(
      &apos;A variation that focuses on potential applications or implications of the topic, to target documents discussing related outcomes or consequences. Output should be in English and is required.&apos;
    )
});

async function submitMessage(
  currentUserMessage: string,
  model_select: &apos;claude3&apos; | &apos;chatgpt4&apos;,
  chatId: string
): Promise&lt;SubmitMessageResult&gt; {
  &apos;use server&apos;;

  const CurrentChatSessionId = chatId || uuidv4();

  const aiState = getMutableAIState&lt;typeof AI&gt;();
  const status = createStreamableValue(&apos;searching&apos;);

  const userInfo = await getUserInfo();
  if (!userInfo) {
    status.done(&apos;done&apos;);
    return {
      success: false,
      message: &apos;User not found. Please try again later.&apos;,
      limit: 0,
      remaining: 0,
      reset: 0,
      status: status.value
    };
  }
  const ratelimit = new Ratelimit({
    redis,
    limiter: Ratelimit.slidingWindow(30, &apos;24h&apos;)
  });
  const { success, limit, reset, remaining } = await ratelimit.limit(
    `ratelimit_${userInfo.id}`
  );
  if (!success) {
    status.done(&apos;done&apos;);
    console.log(&apos;Rate limit exceeded. Please try again later.&apos;);
    console.log(&apos;Limit:&apos;, limit);
    console.log(&apos;Remaining:&apos;, remaining);
    console.log(&apos;Reset:&apos;, reset);
    return {
      success: false,
      message: &apos;Rate limit exceeded. Please try again later.&apos;,
      limit,
      remaining,
      reset,
      status: status.value
    };
  }

  aiState.update([
    ...aiState.get(),
    {
      role: &apos;user&apos;,
      content: currentUserMessage
    }
  ]);



  if (!chatId) {
    const cachedResult: string | null = await redis.get(
      `text_${currentUserMessage}`
    );
    if (cachedResult) {
      const uiStream = createStreamableUI(
        &lt;Card className=&quot;w-full&quot;&gt;
          &lt;CardContent className=&quot;flex flex-col space-y-2 p-4&quot;&gt;
            &lt;p className=&quot;text-sm text-muted-foreground italic text-center&quot;&gt;
              Found relevant website. Scraping data...
            &lt;/p&gt;
            &lt;div className=&quot;flex justify-center&quot;&gt;
              &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;
            &lt;/div&gt;
          &lt;/CardContent&gt;
        &lt;/Card&gt;
      );

      aiState.done([
        ...aiState.get(),
        { role: &apos;assistant&apos;, content: cachedResult }
      ]);

      const chunkSize = 10;
      const baseDelay = 100;
      const variation = 5;
      const textStream = createStreamableValue();

      (async () =&gt; {
        await new Promise((resolve) =&gt; setTimeout(resolve, 2000));


        uiStream.update(&lt;BotMessage textStream={textStream.value} /&gt;);
        status.update(&apos;generating&apos;);
        for (let i = 0; i &lt; cachedResult.length; i += chunkSize) {
          const chunk = cachedResult.slice(i, i + chunkSize);

          textStream.append(chunk);

          await new Promise((resolve) =&gt;
            setTimeout(
              resolve,
              baseDelay + (Math.random() * (variation * 2) - variation)
            )
          );
        }
        uiStream.update(&lt;BotMessage textStream={textStream.value} /&gt;);
        if (userInfo?.id) {
          await saveChatToSupbabase(
            CurrentChatSessionId,
            userInfo.id,
            currentUserMessage,
            cachedResult
          );
        }
        textStream.done();
        status.done(&apos;done&apos;);
        uiStream.done();
      })().catch((e) =&gt; {
        console.error(&apos;Error in chat handler:&apos;, e);
        uiStream.error(
          &lt;Card className=&quot;w-full bg-destructive/10&quot;&gt;
            &lt;CardContent className=&quot;p-4&quot;&gt;
              &lt;p className=&quot;text-sm text-destructive text-center&quot;&gt;
                An error occurred while processing your request. Please try
                again later.
              &lt;/p&gt;
            &lt;/CardContent&gt;
          &lt;/Card&gt;
        );
        status.done(&apos;done&apos;);
      });

      return {
        id: generateId(),
        display: uiStream.value,
        chatId: CurrentChatSessionId,
        status: status.value
      };
    }
  }
  const uiStream = createStreamableUI(
    &lt;Card className=&quot;w-full&quot;&gt;
      &lt;CardContent className=&quot;flex flex-col space-y-2 p-4&quot;&gt;
        &lt;p className=&quot;text-sm text-muted-foreground italic text-center&quot;&gt;
          Found relevant website. Scraping data...
        &lt;/p&gt;
        &lt;div className=&quot;flex justify-center&quot;&gt;
          &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;
        &lt;/div&gt;
      &lt;/CardContent&gt;
    &lt;/Card&gt;
  );
  const dataStream = createStreamableValue();
  (async () =&gt; {
    await new Promise((resolve) =&gt; setTimeout(resolve, 2000));


    const contextualizeQSystemPrompt = `
      As an expert in information retrieval, reformulate the user&apos;s query to optimize search results. Include the user&apos;s original question.

      The goal is to produce reformulated questions that capture the essence of the query and generate optimized search terms.

      Also generate variations of the query to improve search results and find the most up-to-date information. The variations should focus on:
      1. Precisely identifying the main topic or key concept.
      2. Focusing on the relevant context or domain.
      3. Exploring potential applications or implications of the topic.

      All questions and variations should be in the same language as the users question.

      Original question: ${currentUserMessage}
    `;


    const { object } = await generateObject({
      model: openai(&apos;gpt-4o-mini&apos;),
      system: contextualizeQSystemPrompt,
      schema: zodSchemaSearch,
      mode: &apos;json&apos;,
      experimental_telemetry: {
        isEnabled: true,
        functionId: &apos;improve_web&apos;,
        metadata: {
          userId: userInfo.id,
          chatId: CurrentChatSessionId,
          isNewChat: !chatId
        },
        recordInputs: true,
        recordOutputs: true
      },
      messages: [
        ...aiState
          .get()
          .slice(-7)
          .map((info) =&gt; ({
            role: info.role,
            content: info.content,
            name: info.name
          }))
      ]
    });


    const searchQueries = [
      object.variation1,
      object.variation2,
      object.variation3
    ].filter((query) =&gt; query !== undefined &amp;&amp; query.trim() !== &apos;&apos;);

    // Now update the UI with the generated queries
    uiStream.update(
      &lt;Card className=&quot;w-full&quot;&gt;
        &lt;CardContent className=&quot;flex flex-col space-y-4 p-4&quot;&gt;
          &lt;h3 className=&quot;text-lg font-semibold text-primary&quot;&gt;
            I&amp;apos;ve refined your query into these specific search patterns:
          &lt;/h3&gt;

          &lt;div className=&quot;space-y-2&quot;&gt;
            {searchQueries.map((query: string, index: number) =&gt; (
              &lt;div key={index} className=&quot;flex items-center space-x-2&quot;&gt;
                &lt;Search className=&quot;h-4 w-4 text-primary shrink-0&quot; /&gt;
                &lt;p className=&quot;text-sm italic&quot;&gt;{query}&lt;/p&gt;
              &lt;/div&gt;
            ))}
          &lt;/div&gt;

          &lt;div className=&quot;flex items-center justify-center space-x-2&quot;&gt;
            &lt;p className=&quot;text-sm text-muted-foreground italic&quot;&gt;
              Analyzing results to provide a comprehensive response...
            &lt;/p&gt;
            &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;
          &lt;/div&gt;
        &lt;/CardContent&gt;
      &lt;/Card&gt;
    );

    const { textStream } = streamText({
      model: getModel(model_select),
      maxTokens: 4000,
      temperature: 0,
      frequencyPenalty: 0.5,
      system: SYSTEM_TEMPLATE,
      messages: [
        ...aiState
          .get()
          .slice(-7) // Limit to the last 7 messages to avoid overwhelming the model
          .map((info) =&gt; ({
            role: info.role,
            content: info.content,
            name: info.name
          }))
      ],
      experimental_telemetry: {
        isEnabled: true,
        functionId: &apos;general_chat&apos;,
        metadata: {
          userId: userInfo.id,
          chatId: CurrentChatSessionId,
          isNewChat: !chatId
        },
        recordInputs: true,
        recordOutputs: true
      },
      onFinish: async (event) =&gt; {
        const { text, usage } = event;
        const { promptTokens, completionTokens, totalTokens } = usage;
        console.log(&apos;Prompt Tokens:&apos;, promptTokens);
        console.log(&apos;Completion Tokens:&apos;, completionTokens);
        console.log(&apos;Total Tokens:&apos;, totalTokens);
        aiState.done([...aiState.get(), { role: &apos;assistant&apos;, content: text }]);

        await saveChatToSupbabase(
          CurrentChatSessionId,
          userInfo.id,
          currentUserMessage,
          text
        );


        if (!chatId) {
          await redis.set(`text_${currentUserMessage}`, text, {
            ex: 60 * 60 * 24 * 90
          });
        }
      }
    });

    let isFirstChunk = true;

    for await (const textDelta of textStream) {
      if (isFirstChunk) {

        uiStream.update(&lt;BotMessage textStream={dataStream.value} /&gt;);
        isFirstChunk = false;
      }
      dataStream.append(textDelta);
    }

    uiStream.update(&lt;BotMessage textStream={dataStream.value} /&gt;);

    dataStream.done();
    uiStream.done();
    status.done(&apos;done&apos;);
  })().catch((e) =&gt; {
    console.error(&apos;Error in chat handler:&apos;, e);
    uiStream.error(
      &lt;Card className=&quot;w-full bg-destructive/10&quot;&gt;
        &lt;CardContent className=&quot;p-4&quot;&gt;
          &lt;p className=&quot;text-sm text-destructive text-center&quot;&gt;
            An error occurred while processing your request. Please try again
            later.
          &lt;/p&gt;
        &lt;/CardContent&gt;
      &lt;/Card&gt;
    );
    status.done(&apos;done&apos;);
  });
  return {
    id: generateId(),
    display: uiStream.value,
    chatId: CurrentChatSessionId,
    status: status.value
  };
}

type ResetResult = {
  success: boolean;
  message: string;
};
async function resetMessages(): Promise&lt;ResetResult&gt; {
  &apos;use server&apos;;

  const session = await getSession();
  if (!session) {
    return {
      success: false,
      message: &apos;Error: User not found. Please try again later.&apos;
    };
  }

  const aiState = getMutableAIState&lt;typeof AI&gt;();

  try {



    aiState.update([]);


    aiState.done([]);
  } catch (error) {
    console.error(&apos;Error resetting chat messages:&apos;, error);
    return {
      success: false,
      message:
        &apos;Error resetting chat messages. Please try again later or contact support.&apos;
    };
  }
  redirect(&apos;/actionchat&apos;);
}

function sanitizeFilename(filename: string): string {
  return filename
    .normalize(&apos;NFD&apos;)
    .replace(/[\u0300-\u036f]/g, &apos;&apos;)
    .replace(/[^a-zA-Z0-9._-]/g, &apos;_&apos;);
}

async function querySupabaseVectors(
  queryEmbedding: number[],
  userId: string,
  selectedFiles: string[],
  topK: number = 40,
  similarityThreshold: number = 0.78
): Promise&lt;
  Array&lt;{
    pageContent: string;
    metadata: {
      text: string;
      title: string;
      timestamp: string;
      ai_title: string;
      ai_description: string;
      ai_maintopics: string[];
      ai_keyentities: string[];
      filterTags: string;
      page: number;
      totalPages: number;
      chunk: number;
      totalChunks: number;
      similarity: number;
    };
  }&gt;
&gt; {
  const supabase = await createServerSupabaseClient();


  const embeddingString = `[${queryEmbedding.join(&apos;,&apos;)}]`;

  const { data: matches, error } = await supabase.rpc(&apos;match_documents&apos;, {
    query_embedding: embeddingString,
    match_count: topK,
    filter_user_id: userId,
    filter_files: selectedFiles,
    similarity_threshold: similarityThreshold
  });

  if (error) {
    console.error(&apos;Error querying vectors:&apos;, error);
    throw error;
  }

  return (
    matches?.map((match) =&gt; ({
      pageContent: match.text_content,
      metadata: {
        text: match.text_content,
        title: match.title,
        timestamp: match.doc_timestamp,
        ai_title: match.ai_title,
        ai_description: match.ai_description,
        ai_maintopics: match.ai_maintopics,
        ai_keyentities: match.ai_keyentities,
        filterTags: match.filter_tags,
        page: match.page_number,
        totalPages: match.total_pages,
        chunk: match.chunk_number,
        totalChunks: match.total_chunks,
        similarity: match.similarity
      }
    })) || []
  );
}

async function embedQuery(text: string): Promise&lt;number[]&gt; {
  const { embedding } = await embed({
    model: openai.embedding(&apos;text-embedding-3-large&apos;),
    value: text
  });
  return embedding;
}

async function getSelectedDocumentsMetadata(
  userId: string,
  selectedFiles: string[]
) {
  const supabase = await createServerSupabaseClient();

  const { data, error } = await supabase
    .from(&apos;vector_documents&apos;)
    .select(&apos;title, ai_title, ai_description, ai_maintopics, primary_language&apos;)
    .eq(&apos;user_id&apos;, userId)
    .in(&apos;filter_tags&apos;, selectedFiles)
    .eq(&apos;page_number&apos;, 1);

  if (error) {
    console.error(&apos;Error fetching document metadata:&apos;, error);
    return [];
  }

  return data || [];
}


async function uploadFilesAndQuery(
  currentUserMessage: string,
  chatId: string,
  model_select: &apos;claude3&apos; | &apos;chatgpt4&apos;,
  selectedFiles: string[]
): Promise&lt;SubmitMessageResult&gt; {
  &apos;use server&apos;;

  const CurrentChatSessionId = chatId || uuidv4();
  const aiState = getMutableAIState&lt;typeof AI&gt;();
  const status = createStreamableValue(&apos;searching&apos;);
  const userInfo = await getUserInfo();

  if (!userInfo) {
    status.done(&apos;done&apos;);
    return {
      success: false,
      message: &apos;User not found. Please try again later.&apos;,
      limit: 0,
      remaining: 0,
      reset: 0,
      status: status.value
    };
  }
  aiState.update([
    ...aiState.get(),
    {
      role: &apos;user&apos;,
      content: currentUserMessage
    }
  ]);

  const uiStream = createStreamableUI(
    &lt;Card className=&quot;w-full&quot;&gt;
      &lt;CardContent className=&quot;flex flex-col space-y-2 p-4&quot;&gt;
        &lt;p className=&quot;text-sm text-muted-foreground italic text-center&quot;&gt;
          Searching...
        &lt;/p&gt;
        &lt;div className=&quot;flex justify-center&quot;&gt;
          &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;
        &lt;/div&gt;
      &lt;/CardContent&gt;
    &lt;/Card&gt;
  );

  const sanitizedFilenames = selectedFiles.map((filename) =&gt; {

    const [name, timestamp] = filename.split(&apos;[[&apos;);


    const sanitizedName = sanitizeFilename(name);


    return timestamp ? `${sanitizedName}[[${timestamp}` : sanitizedName;
  });

  const documentsMetadata = await getSelectedDocumentsMetadata(
    userInfo.id,
    sanitizedFilenames
  );


  const documentContext = documentsMetadata
    .map((doc) =&gt; {
      const parts = [`Document Title: ${doc.title}`];
      if (doc.ai_title) parts.push(`Improved Title: ${doc.ai_title}`);
      if (doc.ai_description) parts.push(`Description: ${doc.ai_description}`);
      if (doc.ai_maintopics &amp;&amp; Array.isArray(doc.ai_maintopics)) {
        parts.push(`Main Topics: ${doc.ai_maintopics.join(&apos;, &apos;)}`);
      }
      if (doc.primary_language)
        parts.push(
          `Primary Language used in the document: ${doc.primary_language}`
        );
      return parts.join(&apos;\n&apos;);
    })
    .join(&apos;\n\n&apos;);


  const { object } = await generateObject({
    model: openai(&apos;gpt-4o-mini&apos;),
    system: `You are an expert in information retrieval. Your task is to reformulate the user&apos;s query to optimize search results for vector similarity search.

Available documents context:
${documentContext}

Generate three variations of the query that:
1. Precisely identifies the main topic or key concept, matching terminology from the available documents
2. Focuses on the context or domain relevant to the question
3. Explores potential applications or implications of the topic

Keep the variations focused on the content available in the provided documents.`,
    schema: zodSchemaSearch,
    experimental_telemetry: {
      isEnabled: true,
      functionId: &apos;improve_general&apos;,
      metadata: {
        userId: userInfo.id,
        chatId: CurrentChatSessionId,
        isNewChat: !chatId
      },
      recordInputs: true,
      recordOutputs: true
    },
    messages: [
      ...aiState
        .get()
        .slice(-7)
        .map((info) =&gt; ({
          role: info.role,
          content: info.content,
          name: info.name
        }))
    ]
  });


  const searchQueries = [
    object.variation1,
    object.variation2,
    object.variation3
  ].filter((query) =&gt; query !== undefined &amp;&amp; query.trim() !== &apos;&apos;);

  // Now update the UI stream after searchQueries is defined
  uiStream.update(
    &lt;Card className=&quot;w-full&quot;&gt;
      &lt;CardContent className=&quot;flex flex-col space-y-4 p-4&quot;&gt;
        &lt;h3 className=&quot;text-lg font-semibold text-primary&quot;&gt;
          I&amp;apos;ve refined your query into these specific search patterns:
        &lt;/h3&gt;

        &lt;div className=&quot;space-y-2&quot;&gt;
          {searchQueries.map((query: string, index: number) =&gt; (
            &lt;div key={index} className=&quot;flex items-center space-x-2&quot;&gt;
              &lt;Search className=&quot;h-4 w-4 text-primary shrink-0&quot; /&gt;
              &lt;p className=&quot;text-sm italic&quot;&gt;{query}&lt;/p&gt;
            &lt;/div&gt;
          ))}
        &lt;/div&gt;

        &lt;div className=&quot;flex items-center justify-center space-x-2&quot;&gt;
          &lt;p className=&quot;text-sm text-muted-foreground italic&quot;&gt;
            Analyzing results to provide a comprehensive response...
          &lt;/p&gt;
          &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;
        &lt;/div&gt;
      &lt;/CardContent&gt;
    &lt;/Card&gt;
  );

  const dataStream = createStreamableValue();
  (async () =&gt; {
    const embeddings = await Promise.all(
      searchQueries.map((query) =&gt; embedQuery(query))
    );

    // Create array of promises for vector searches
    const searchResultsPromises = await Promise.all(
      embeddings.map(
        (embedding) =&gt;
          querySupabaseVectors(
            embedding,
            userInfo.id,
            sanitizedFilenames,
            40, // Adjust topK as needed. There is a hard limit of 200 results included in the RPC.
            0.5
          ) // Adjust similarity threshold as needed. Usually do not set it higher than 0.7 since it may not find any results.
        // You can optimize the systemprompt for the new queries to improve the results.
      )
    );

    // Flatten and deduplicate results
    const allSearchResults = searchResultsPromises.flat();

    // Deduplicate results based on content and page number
    const uniqueResults = allSearchResults.reduce(
      (acc, current) =&gt; {
        const isDuplicate = acc.some(
          (item) =&gt;
            item.metadata.title === current.metadata.title &amp;&amp;
            item.metadata.page === current.metadata.page
        );
        if (!isDuplicate) {
          acc.push(current);
        }
        return acc;
      },
      [] as typeof allSearchResults
    );

    const searchResults = uniqueResults.sort(
      (a, b) =&gt; b.metadata.similarity - a.metadata.similarity
    );

    const formattedSearchResults = (() =&gt; {
      // Group results by document (using title and timestamp as identifier)
      const groupedResults = searchResults.reduce(
        (acc, result) =&gt; {
          const key = `${result.metadata.title}[[${result.metadata.timestamp}]]`;
          if (!acc[key]) {
            acc[key] = [];
          }
          acc[key].push(result);
          return acc;
        },
        {} as Record&lt;string, typeof searchResults&gt;
      );

      // Sort and format each group
      return Object.entries(groupedResults)
        .map(([_key, docs]) =&gt; {
          // Sort documents by page number
          docs.sort((a, b) =&gt; a.metadata.page - b.metadata.page);

          // Extract common metadata (only once per document)
          const {
            ai_title,
            ai_description,
            ai_maintopics,
            ai_keyentities,
            title,
            timestamp
          } = docs[0].metadata;

          // Format the document group
          return `
&lt;document&gt;
  &lt;metadata&gt;
    &lt;title&gt;${title}&lt;/title&gt;
    &lt;timestamp&gt;${timestamp}&lt;/timestamp&gt;
    &lt;ai_title&gt;${ai_title}&lt;/ai_title&gt;
    &lt;ai_description&gt;${ai_description}&lt;/ai_description&gt;
    &lt;ai_maintopics&gt;${ai_maintopics}&lt;/ai_maintopics&gt;
    &lt;ai_keyentities&gt;${ai_keyentities}&lt;/ai_keyentities&gt;
  &lt;/metadata&gt;
  &lt;content&gt;
    ${docs
      .map(
        (doc) =&gt; `
    &lt;page number=&quot;${doc.metadata.page}&quot;&gt;
      &lt;reference_link&gt;[${doc.metadata.title}, s.${doc.metadata.page}](&lt;?pdf=${doc.metadata.title.replace(/ /g, &apos;_&apos;).trim()}&amp;p=${doc.metadata.page}&gt;)&lt;/reference_link&gt;
      &lt;text&gt;${doc.pageContent}&lt;/text&gt;
    &lt;/page&gt;`
      )
      .join(&apos;&apos;)}
  &lt;/content&gt;
&lt;/document&gt;`;
        })
        .join(&apos;\n&apos;);
    })();

    const systemPromptTemplate = (() =&gt; {

      const documentExamples = searchResults
        .slice(0, 2)
        .map(
          (result) =&gt;
            `[${result.metadata.title}, s.${result.metadata.page}](&lt;?pdf=${result.metadata.title.replace(/ /g, &apos;_&apos;).trim()}&amp;p=${result.metadata.page}&gt;)`
        )
        .join(&apos; and &apos;);
      return `
&lt;instructions&gt;
Based on the content in the search results extracted from the uploaded files, please provide an answer to the question. The search results contain information relevant to the query.

IMPORTANT: Every time you use information from the documents, you must immediately add a reference after the relevant information. The reference MUST be in Markdown link format and include the document title and page number as a search parameter.

The Markdown link format must be exactly as follows:

[Document title, p.X](&lt;?pdf=Document_title&amp;p=X&gt;)

where X is the page number.

For example:
&quot;The law states that... ${documentExamples}&quot;

This Markdown link format is crucial as it makes the references clickable and leads directly to the relevant page in the document. Please use this Markdown reference format consistently throughout your answer.

If the given content does not seem to contain sufficient information to answer the question, please suggest asking the question differently or provide more context. Do your best to help based on the available information.

If relevant information cannot be found to answer the question, please inform about this and suggest a rephrasing or request additional details.

Please respond in the same language as the user&apos;s question.
&lt;/instructions&gt;

&lt;search_results&gt;
${formattedSearchResults}
&lt;/search_results&gt;
`;
    })();

    const { textStream } = streamText({
      model: getModel(model_select),
      system: systemPromptTemplate,
      messages: [
        ...aiState
          .get()
          .slice(-7)
          .map((info) =&gt; ({
            role: info.role,
            content: info.content,
            name: info.name
          }))
      ],
      experimental_telemetry: {
        isEnabled: true,
        functionId: &apos;chat_to_pdf&apos;,
        metadata: {
          userId: userInfo.id,
          chatId: CurrentChatSessionId,
          isNewChat: !chatId
        },
        recordInputs: true,
        recordOutputs: true
      },
      onFinish: async (event) =&gt; {
        const { usage, text } = event;
        const { promptTokens, completionTokens, totalTokens } = usage;
        console.log(&apos;Prompt Tokens:&apos;, promptTokens);
        console.log(&apos;Completion Tokens:&apos;, completionTokens);
        console.log(&apos;Total Tokens:&apos;, totalTokens);
        await saveChatToSupbabase(
          CurrentChatSessionId,
          userInfo.id,
          currentUserMessage,
          text
        );

        aiState.done([...aiState.get(), { role: &apos;assistant&apos;, content: text }]);
      }
    });

    let isFirstChunk = true;

    for await (const textDelta of textStream) {
      if (isFirstChunk) {

        uiStream.update(&lt;BotMessage textStream={dataStream.value} /&gt;);
        isFirstChunk = false;
      }
      dataStream.append(textDelta);
    }

    uiStream.update(&lt;BotMessage textStream={dataStream.value} /&gt;);

    dataStream.done();
    uiStream.done();
    status.done(&apos;done&apos;);
  })().catch((e) =&gt; {
    console.error(&apos;Error in chat handler:&apos;, e);
    uiStream.error(
      &lt;Card className=&quot;w-full bg-destructive/10&quot;&gt;
        &lt;CardContent className=&quot;p-4&quot;&gt;
          &lt;p className=&quot;text-sm text-destructive text-center&quot;&gt;
            An error occurred while processing your request. Please try again
            later.
          &lt;/p&gt;
        &lt;/CardContent&gt;
      &lt;/Card&gt;
    );
    status.done(&apos;done&apos;);
  });

  return {
    id: generateId(),
    display: uiStream.value,
    chatId: CurrentChatSessionId,
    status: status.value
  };
}

type TavilySearchResult = {
  title: string;
  url: string;
  content: string;
  raw_content: string;
  score: number;
};

type TavilyAPIResponse = {
  answer: string;
  query: string;
  response_time: string;
  follow_up_questions: string[];
  images: string[];
  results: TavilySearchResult[];
};


type ProcessedSearchResult = {
  title: string;
  url: string;
  content: string;
};

interface SearchResult {
  title: string;
  url: string;
  content: string;
}
async function SearchTool(
  currentUserMessage: string,
  model_select: &apos;claude3&apos; | &apos;chatgpt4&apos;,
  chatId: string
): Promise&lt;SubmitMessageResult&gt; {
  &apos;use server&apos;;

  const status = createStreamableValue(&apos;searching&apos;);
  const stream = createStreamableUI(
    &lt;Card className=&quot;w-full&quot;&gt;
      &lt;CardContent className=&quot;flex flex-col space-y-2 p-4&quot;&gt;
        &lt;p className=&quot;text-sm text-muted-foreground italic text-center&quot;&gt;
          Searching for relevant information...
        &lt;/p&gt;
        &lt;div className=&quot;flex justify-center&quot;&gt;
          &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;
        &lt;/div&gt;
      &lt;/CardContent&gt;
    &lt;/Card&gt;
  );

  const userInfo = await getUserInfo();
  if (!userInfo) {
    status.done(&apos;done&apos;);
    return {
      success: false,
      message: &apos;User not found. Please try again later.&apos;,
      limit: 0,
      remaining: 0,
      reset: 0,
      status: status.value
    };
  }

  const CurrentChatSessionId = chatId || uuidv4();


  const aiState = getMutableAIState&lt;typeof AI&gt;();
  aiState.update([
    ...aiState.get(),
    {
      role: &apos;user&apos;,
      content: currentUserMessage
    }
  ]);

  let searchResults: SearchResult[] = [];
  let searchQueries: string[] = [];
  const nhm = new NodeHtmlMarkdown();
  const dataStream = createStreamableValue();

  (async () =&gt; {

    const contextualizeQSystemPrompt = `
      As an expert in information retrieval, reformulate the user&apos;s query to optimize search results. Include the user&apos;s original question.

      The goal is to produce reformulated questions that capture the essence of the query and generate optimized search terms.

      Also generate variations of the query to improve search results and find the most up-to-date information. The variations should focus on:
      1. Precisely identifying the main topic or key concept.
      2. Focusing on the relevant context or domain.
      3. Exploring potential applications or implications of the topic.

      All questions and variations should be in the same language as the users question.

      Original question: ${currentUserMessage}
    `;


    const { object } = await generateObject({
      model: openai(&apos;gpt-4o-mini&apos;),
      system: contextualizeQSystemPrompt,
      schema: zodSchemaSearch,
      mode: &apos;json&apos;,
      experimental_telemetry: {
        isEnabled: true,
        functionId: &apos;improve_web&apos;,
        metadata: {
          userId: userInfo.id,
          chatId: CurrentChatSessionId,
          isNewChat: !chatId
        },
        recordInputs: true,
        recordOutputs: true
      },
      messages: [
        ...aiState
          .get()
          .slice(-7)
          .map((info) =&gt; ({
            role: info.role,
            content: info.content,
            name: info.name
          }))
      ]
    });


    searchQueries = [
      object.variation1,
      object.variation2,
      object.variation3
    ].filter((query) =&gt; query !== undefined &amp;&amp; query.trim() !== &apos;&apos;);

    // Now update the UI stream after searchQueries is defined
    stream.update(
      &lt;Card className=&quot;w-full&quot;&gt;
        &lt;CardContent className=&quot;flex flex-col space-y-4 p-4&quot;&gt;
          &lt;h3 className=&quot;text-lg font-semibold text-primary&quot;&gt;
            I&amp;apos;ve refined your query into these specific search patterns:
          &lt;/h3&gt;

          &lt;div className=&quot;space-y-2&quot;&gt;
            {searchQueries.map((query: string, index: number) =&gt; (
              &lt;div key={index} className=&quot;flex items-center space-x-2&quot;&gt;
                &lt;Search className=&quot;h-4 w-4 text-primary shrink-0&quot; /&gt;
                &lt;p className=&quot;text-sm italic&quot;&gt;{query}&lt;/p&gt;
              &lt;/div&gt;
            ))}
          &lt;/div&gt;

          &lt;div className=&quot;flex items-center justify-center space-x-2&quot;&gt;
            &lt;p className=&quot;text-sm text-muted-foreground italic&quot;&gt;
              Analyzing results to provide a comprehensive response...
            &lt;/p&gt;
            &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;
          &lt;/div&gt;
        &lt;/CardContent&gt;
      &lt;/Card&gt;
    );

    // Perform Tavily search for each query variation
    // Note: This approach uses multiple queries, which can provide better results but is more expensive.
    // Consider your monthly API limit when using this method.
    // This method of creating new queries can be applied to RAG aswell to improve the extraction of data out of a Vector Database.
    const searchPromises = searchQueries.map(async (query) =&gt; {
      const response = await fetch(&apos;https:
        cache: &apos;no-store&apos;,
        method: &apos;POST&apos;,
        headers: {
          &apos;Content-Type&apos;: &apos;application/json&apos;
        },
        body: JSON.stringify({
          api_key: process.env.TAVILY_API_KEY,
          query,
          search_depth: &apos;advanced&apos;,
          include_answer: false,
          include_images: false,
          include_raw_content: false,
          max_results: 2
        })
      });

      const data: TavilyAPIResponse = await response.json();


      return Promise.all(
        data.results.map(
          async (
            result: TavilySearchResult
          ): Promise&lt;ProcessedSearchResult&gt; =&gt; {
            try {

              const contentResponse = await fetch(result.url, {
                cache: &apos;no-store&apos;
              });

              if (!contentResponse.ok) {
                return {
                  title: result.title,
                  url: result.url,
                  content: result.content
                };
              }

              const contentHtml = await contentResponse.text();
              const $ = load(contentHtml);


              const bodyContent = $(&apos;body&apos;)
                .clone()
                .find(&apos;script, style, nav, header, footer, iframe, noscript&apos;)
                .remove()
                .end();


              const mainSelectors = [
                &apos;article&apos;,
                &apos;main&apos;,
                &apos;.main-content&apos;,
                &apos;#main-content&apos;,
                &apos;.post-content&apos;,
                &apos;.article-content&apos;,
                &apos;.entry-content&apos;,
                &apos;.content&apos;
              ];

              let mainContent = null;
              for (const selector of mainSelectors) {
                const found = bodyContent.find(selector);
                if (found.length) {
                  console.log(&apos;Found main content:&apos;, selector);
                  mainContent = found;
                  break;
                }
              }


              const contentRAW = mainContent
                ? mainContent.html()
                : bodyContent
                    .find(
                      &apos;button, .button, [role=&quot;button&quot;], .menu, .navigation, .cookie-notice, .popup, .modal, .banner, .advertisement, .newsletter, .widget&apos;
                    )
                    .remove()
                    .end()
                    .html();


              const content = nhm.translate(contentRAW || &apos;&apos;);

              return {
                title: result.title,
                url: result.url,
                content: content || result.content // Use parsed content if available, otherwise fall back to Tavily content
              };
            } catch (error) {
              console.error(`Error fetching content for ${result.url}:`, error);
              // Fall back to Tavily content on any error
              return {
                title: result.title,
                url: result.url,
                content: result.content // Use Tavily&apos;s content as fallback
              };
            }
          }
        )
      );
    });

    const searchResultsArray = await Promise.all(searchPromises);
    const uniqueSearchResults = searchResultsArray
      .flat()
      .reduce((acc, result) =&gt; {
        if (!acc.some((r: SearchResult) =&gt; r.url === result.url)) {
          acc.push(result);
        }
        return acc;
      }, [] as SearchResult[]);

    searchResults = uniqueSearchResults;


    stream.update(
      &lt;&gt;
        &lt;InternetSearchToolResults
          searchResults={searchResults.map((result) =&gt; ({
            title: result.title,
            url: result.url
          }))}
        /&gt;
        &lt;Card className=&quot;w-full&quot;&gt;
          &lt;CardContent className=&quot;flex justify-center items-center p-4 mb-2 mt-2 rounded-md bg-gradient-to-br from-blue-100 to-blue-50 dark:from-zinc-900 dark:to-zinc-800 shadow-sm&quot;&gt;
            &lt;p className=&quot;text-muted-foreground italic&quot;&gt;
              Preparing response...
            &lt;/p&gt;
            &lt;Loader2 className=&quot;h-4 w-4 animate-spin ml-2&quot; /&gt;
          &lt;/CardContent&gt;
        &lt;/Card&gt;
      &lt;/&gt;
    );


    const formattedSearchResults = searchResults
      .map(
        (result) =&gt;
          `&lt;result&gt;
        &lt;title&gt;${result.title}&lt;/title&gt;
        &lt;url&gt;${result.url}&lt;/url&gt;
        &lt;content&gt;${result.content}&lt;/content&gt;
      &lt;/result&gt;`
      )
      .join(&apos;\n&apos;);


    const systemPromptTemplate = `
&lt;search_results&gt;
${formattedSearchResults}
&lt;/search_results&gt;

&lt;instructions&gt;
Based on the search results, provide a comprehensive and well-structured response to the user&apos;s question following these guidelines:

1. Format &amp; Structure:
   - Break down complex information into clear paragraphs
   - Use bullet points when listing multiple items
   - Ensure the response flows logically

2. Source Citation:
   - Cite sources immediately after each claim or piece of information using: [Source Title](URL)
   - Do not group citations at the end
   - Use direct quotes sparingly and when particularly relevant


If the search results are insufficient or unclear:
- Acknowledge the limitations
- Specify what additional information would be helpful
- Suggest how the user might rephrase their question

Remember to maintain a professional yet conversational tone throughout the response.
&lt;/instructions&gt;
`;
    console.log(&apos;Search Results:&apos;, systemPromptTemplate);

    const { textStream } = streamText({
      model: getModel(model_select),
      system: systemPromptTemplate,
      messages: [
        ...aiState
          .get()
          .slice(-7)
          .map((info) =&gt; ({
            role: info.role,
            content: info.content,
            name: info.name
          }))
      ],
      experimental_telemetry: {
        isEnabled: true,
        functionId: &apos;chat_to_web&apos;,
        metadata: {
          userId: userInfo.id,
          chatId: CurrentChatSessionId,
          isNewChat: !chatId
        },
        recordInputs: true,
        recordOutputs: true
      },
      onFinish: async (event) =&gt; {
        const { usage, text } = event;
        const { promptTokens, completionTokens, totalTokens } = usage;
        console.log(&apos;Prompt Tokens:&apos;, promptTokens);
        console.log(&apos;Completion Tokens:&apos;, completionTokens);
        console.log(&apos;Total Tokens:&apos;, totalTokens);
        const formattedSources = searchResults.map((result) =&gt; ({
          title: result.title,
          url: result.url
        }));

        await saveChatToSupbabase(
          CurrentChatSessionId,
          userInfo.id,
          currentUserMessage,
          text,
          formattedSources
        );

        aiState.done([...aiState.get(), { role: &apos;assistant&apos;, content: text }]);
      }
    });

    let isFirstChunk = true;
    for await (const textDelta of textStream) {
      if (isFirstChunk) {

        stream.update(
          &lt;&gt;
            &lt;BotMessage textStream={dataStream.value} /&gt;
            &lt;InternetSearchToolResults
              searchResults={searchResults.map((result) =&gt; ({
                title: result.title,
                url: result.url
              }))}
            /&gt;
          &lt;/&gt;
        );
        isFirstChunk = false;
      }

      dataStream.append(textDelta);
    }

    stream.update(
      &lt;&gt;
        &lt;BotMessage textStream={dataStream.value} /&gt;
        &lt;InternetSearchToolResults
          searchResults={searchResults.map((result) =&gt; ({
            title: result.title,
            url: result.url
          }))}
        /&gt;
      &lt;/&gt;
    );
    dataStream.done();
    status.done(&apos;done&apos;);
    stream.done();
  })().catch((e) =&gt; {
    console.error(&apos;Error in chat handler:&apos;, e);
    stream.error(
      &lt;Card className=&quot;w-full bg-destructive/10&quot;&gt;
        &lt;CardContent className=&quot;p-4&quot;&gt;
          &lt;p className=&quot;text-sm text-destructive text-center&quot;&gt;
            An error occurred while processing your request. Please try again
            later.
          &lt;/p&gt;
        &lt;/CardContent&gt;
      &lt;/Card&gt;
    );
    status.done(&apos;done&apos;);
  });

  return {
    id: generateId(),
    display: stream.value,
    chatId: CurrentChatSessionId,
    status: status.value
  };
}
type Source = {
  title: string;
  url: string;
};
export type ServerMessage = {
  role: &apos;user&apos; | &apos;assistant&apos;;
  content: string;
  name?: string;
  sources?: Source[];
};

export type ClientMessage = {
  id: string | number | null;
  role: &apos;user&apos; | &apos;assistant&apos;;
  display: React.ReactNode;
  chatId?: string | null;
};

const initialAIState: ServerMessage[] = [];
const initialUIState: ClientMessage[] = [];

export type SubmitMessageResult = {
  success?: boolean;
  message?: string;
  limit?: number;
  remaining?: number;
  reset?: number;
  id?: string;
  display?: React.ReactNode;
  chatId?: string;
  status: StreamableValue&lt;string, any&gt;;
};

type Actions = {
  submitMessage: (
    currentUserMessage: string,
    model_select: &apos;claude3&apos; | &apos;chatgpt4&apos;,
    chatId: string
  ) =&gt; Promise&lt;SubmitMessageResult&gt;;
  uploadFilesAndQuery: (
    currentUserMessage: string,
    chatId: string,
    model_select: &apos;claude3&apos; | &apos;chatgpt4&apos;,
    selectedFiles: string[]
  ) =&gt; Promise&lt;SubmitMessageResult&gt;;
  SearchTool: (
    currentUserMessage: string,
    model_select: &apos;claude3&apos; | &apos;chatgpt4&apos;,
    chatId: string
  ) =&gt; Promise&lt;SubmitMessageResult&gt;;
  resetMessages: () =&gt; Promise&lt;ResetResult&gt;;
};

export const AI = createAI&lt;ServerMessage[], ClientMessage[], Actions&gt;({
  actions: {
    submitMessage,
    uploadFilesAndQuery,
    SearchTool,
    resetMessages
  },
  onGetUIState: async () =&gt; {
    &apos;use server&apos;;

    const historyFromApp = getAIState();

    if (historyFromApp) {
      const session = await getSession();
      return historyFromApp.map((message: ServerMessage) =&gt; ({
        id: generateId(),
        role: message.role,
        display:
          message.role === &apos;user&apos; ? (
            &lt;UserMessage
              full_name={session?.user_metadata.full_name || &apos;Unknown&apos;}
            &gt;
              {message.content}
            &lt;/UserMessage&gt;
          ) : (
            &lt;&gt;
              &lt;BotMessage&gt;{message.content}&lt;/BotMessage&gt;
              {message.sources &amp;&amp; message.sources.length &gt; 0 &amp;&amp; (
                &lt;InternetSearchToolResults searchResults={message.sources} /&gt;
              )}
            &lt;/&gt;
          )
      }));
    } else {
      return;
    }
  },
  initialUIState,
  initialAIState
});</file><file path="app/actionchat/layout.tsx">import React from &apos;react&apos;;
import { createServerSupabaseClient } from &apos;@/lib/server/server&apos;;
import { getUserInfo } from &apos;@/lib/server/supabase&apos;;
import ChatHistoryDrawer from &apos;./component/UserChatList&apos;;
import { SupabaseClient } from &apos;@supabase/supabase-js&apos;;
import { Database } from &apos;@/types/database&apos;;
import { unstable_noStore as noStore } from &apos;next/cache&apos;;
import { Tables } from &apos;@/types/database&apos;;
import { UploadProvider } from &apos;./context/uploadContext&apos;;
import { AI as AiProvider } from &apos;./action&apos;;

export const maxDuration = 60;

async function fetchData(
  supabase: SupabaseClient&lt;Database&gt;,
  limit: number = 30,
  offset: number = 0
) {
  noStore();
  try {
    const { data, error } = await supabase
      .from(&apos;chat_sessions&apos;)
      .select(
        `
          id,
          created_at,
          chat_title,
          first_message:chat_messages!inner(content)
        `
      )
      .order(&apos;created_at&apos;, { ascending: false })
      .limit(1, { foreignTable: &apos;chat_messages&apos; })
      .range(offset, offset + limit - 1);

    if (error) throw error;

    return data.map((session) =&gt; ({
      id: session.id,
      firstMessage:
        session.chat_title ||
        session.first_message[0]?.content ||
        &apos;No messages yet&apos;,
      created_at: session.created_at
    }));
  } catch (error) {
    console.error(&apos;Error fetching chat previews:&apos;, error);
    return [];
  }
}

type UserInfo = Pick&lt;Tables&lt;&apos;users&apos;&gt;, &apos;full_name&apos; | &apos;email&apos; | &apos;id&apos;&gt;;
type ChatPreview = {
  id: string;
  firstMessage: string;
  created_at: string;
};

export default async function Layout(props: { children: React.ReactNode }) {
  const supabase = await createServerSupabaseClient();
  const userData = await getUserInfo();

  let userInfo: UserInfo;
  let initialChatPreviews: ChatPreview[] = [];

  if (userData) {
    userInfo = userData;
    initialChatPreviews = await fetchData(supabase, 30, 0);
  } else {
    userInfo = {
      id: &apos;&apos;,
      full_name: &apos;&apos;,
      email: &apos;&apos;
    };
  }

  return (
    &lt;div className=&quot;flex&quot;&gt;
      &lt;UploadProvider userId={userInfo.id}&gt;
        &lt;AiProvider&gt;
          &lt;ChatHistoryDrawer
            userInfo={userInfo}
            initialChatPreviews={initialChatPreviews}
          /&gt;
        &lt;/AiProvider&gt;
        {props.children}
      &lt;/UploadProvider&gt;
    &lt;/div&gt;
  );
}</file><file path="app/actionchat/page.tsx">import &apos;server-only&apos;;
import { getUserInfo } from &apos;@/lib/server/supabase&apos;;
import ChatComponentPage from &apos;./component/ChatComponent&apos;;
import { AI as AiProvider } from &apos;./action&apos;;
import DocumentViewer from &apos;./component/PDFViewer&apos;;

export const maxDuration = 60;

interface PageProps {
  searchParams: Promise&lt;{ [key: string]: string | &apos;&apos; }&gt;;
}

export default async function Page(props: PageProps) {
  const searchParams = await props.searchParams;
  const userInfo = await getUserInfo();

  return (
    &lt;div className=&quot;flex w-full overflow-hidden&quot;&gt;
      &lt;div className=&quot;flex-1&quot;&gt;
        &lt;AiProvider&gt;
          &lt;ChatComponentPage userInfo={userInfo} /&gt;
        &lt;/AiProvider&gt;
      &lt;/div&gt;

      {searchParams.pdf ? (
        &lt;DocumentComponent fileName={decodeURIComponent(searchParams.pdf)} /&gt;
      ) : null}
    &lt;/div&gt;
  );
}

async function DocumentComponent({ fileName }: { fileName: string }) {
  const session = await getUserInfo();
  const userId = session?.id;

  const hasActiveSubscription = Boolean(session);

  return (
    &lt;DocumentViewer
      fileName={fileName}
      userId={userId}
      hasActiveSubscription={hasActiveSubscription}
    /&gt;
  );
}</file><file path="app/actions/analysis.ts">&quot;use server&quot;;

import { z } from &quot;zod&quot;;
import { db } from &quot;../db&quot;;
import { analysis, observations, reports } from &quot;@/schema&quot;;

import { OpenAI } from &quot;openai&quot;;
import { eq } from &quot;drizzle-orm&quot;;


const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});








const analysisSchema = z.object({
  documentId: z.string().uuid(),
  analysisType: z.enum([&quot;data_inconsistency&quot;, &quot;fact_check&quot;, &quot;missing_info&quot;]),
  localContext: z.record(z.any()).optional(),
});

export async function runAnalysis(data: z.infer&lt;typeof analysisSchema&gt;) {
  try {

    const validated = analysisSchema.parse(data);


    const analysisRecord = await db.insert(analysis).values({
      documentId: validated.documentId,
      analysisType: validated.analysisType,
      localContext: validated.localContext || {},
      status: &quot;processing&quot;,
    }).returning();








    const document = await db.query.documents.findFirst({
      where: (documents, { eq }) =&gt; eq(documents.documentId, validated.documentId),
    });

    if (!document) throw new Error(&quot;Document not found&quot;);







    const completion = await openai.chat.completions.create({
      model: &quot;gpt-4-turbo-preview&quot;,
      messages: [
        {
          role: &quot;system&quot;,
          content: `You are an expert board document analyzer. Analyze the following document for ${validated.analysisType}, focusing on Scandinavian business context. Provide detailed observations with page references and suggestions.`,
        },
        {
          role: &quot;user&quot;,
          content: document.processedText || &quot;&quot;,
        },
      ],
    });

/*     span.end(); */

    // Parse observations from completion
    const observationsData = JSON.parse(completion.choices[0].message.content || &quot;[]&quot;);

    // Save observations
    for (const obs of observationsData) {
      await db.insert(observations).values({
        analysisId: analysisRecord[0].analysisId,
        description: obs.description,
        pageReference: obs.pageReference,
        suggestions: obs.suggestions,
      });
    }

    // Update analysis status
    await db.update(analysis)
      .set({
        status: &quot;completed&quot;,
        completedAt: new Date(),
        results: { observations: observationsData },
      })
      .where(eq(analysis.analysisId, analysisRecord[0].analysisId));



    return { success: true, analysisId: analysisRecord[0].analysisId };
  } catch (error) {
    console.error(&quot;Analysis failed:&quot;, error);
    return { success: false, error: (error as Error).message };
  }
}

export async function generateReport(analysisId: string) {
  try {

    const analysisData = await db.query.analysis.findFirst({
      where: (analysis, { eq }) =&gt; eq(analysis.analysisId, analysisId),
      with: {
        observations: true,
      },
    });

    if (!analysisData) throw new Error(&quot;Analysis not found&quot;);


    const completion = await openai.chat.completions.create({
      model: &quot;gpt-4-turbo-preview&quot;,
      messages: [
        {
          role: &quot;system&quot;,
          content: &quot;Generate a professional draft email summarizing the analysis findings. Use a formal tone appropriate for board communication in Scandinavia.&quot;,
        },
        {
          role: &quot;user&quot;,
          content: JSON.stringify(analysisData.observations),
        },
      ],
    });

    const draftEmail = completion.choices[0].message.content || &quot;&quot;;

    // Save report
    const report = await db.insert(reports).values({
      analysisId,
      draftEmail,
    }).returning();

    return { success: true, report };
  } catch (error) {
    console.error(&quot;Report generation failed:&quot;, error);
    return { success: false, error: (error as Error).message };
  }
}</file><file path="app/actions/assistants.ts">&quot;use server&quot;;

import { createStreamableValue } from &quot;ai/rsc&quot;;
import OpenAI from &quot;openai&quot;;
import { Document } from &quot;@/schema&quot;;

type Message = {
  content: string;
  role: &quot;user&quot; | &quot;assistant&quot;;
};

const openai = new OpenAI();

interface CreateThreadOptions {
  message?: string;
  documents?: Document[];
}

export async function createVectorStore(companyId: number) {
  const vectorStore = await openai.beta.vectorStores.create({
    name: `rag-${String(companyId)}-${new Date().toISOString()}`,
  });

  return vectorStore;
}

export async function createFile(formData: FormData) {
  const fileObj = formData.get(&quot;file&quot;) as File | null;
  if (!fileObj) {
    throw new Error(&quot;No file provided&quot;);
  }

  const file = await openai.files.create({
    file: fileObj,
    purpose: &quot;assistants&quot;,
  });

  return file;
}

export async function attachFiles(vectorStoreId: string, file_ids: string[]) {
  const fileBatch = await openai.beta.vectorStores.fileBatches.createAndPoll(
    vectorStoreId,
    { file_ids }
  );
  return fileBatch;
}

export async function createAssistant(
  vectorStoreId: string,
  instructions: string
) {
  const assistant = await openai.beta.assistants.create({
    model: &quot;gpt-4o&quot;,
    instructions: instructions,
    tools: [{ type: &quot;file_search&quot; }],
    tool_resources: {
      file_search: {
        vector_store_ids: [vectorStoreId],
      },
    },
  });

  return assistant;
}

export async function createThread(options?: CreateThreadOptions) {
  const { message, documents } = options || {};

  if (message &amp;&amp; documents &amp;&amp; documents.length &gt; 0) {

    const thread = await openai.beta.threads.create({
      messages: [
        {
          role: &quot;user&quot;,
          content: message,
          attachments: documents.map((doc) =&gt; ({
            file_id: doc.openaiFileId!,
            tools: [{ type: &quot;file_search&quot; }],
          })),
        },
      ],
    });
    return thread;
  } else {

    const thread = await openai.beta.threads.create();
    return thread;
  }
}

export async function createMessage(
  threadId: string,
  message: OpenAI.Beta.Threads.Messages.MessageCreateParams
) {
  const openaiMessage: OpenAI.Beta.Threads.Messages.MessageCreateParams = {
    role: message.role,
    content: message.content,
  };

  if (message.attachments &amp;&amp; message.attachments.length &gt; 0) {
    openaiMessage.attachments = message.attachments.map((att) =&gt; ({
      file_id: att.file_id,
      tools: [{ type: &quot;file_search&quot; }],
    }));
  }

  const _message = await openai.beta.threads.messages.create(
    threadId,
    openaiMessage
  );

  return _message;
}

export async function listMessages(threadId: string): Promise&lt;Message[]&gt; {
  const response = await openai.beta.threads.messages.list(threadId);

  const messages = response.data.map((message) =&gt; {
    const { text } = message
      .content[0] as OpenAI.Beta.Threads.Messages.TextContentBlock;
    return {
      content: text.value,
      role: message.role,
    } as Message;
  });
  messages.reverse();

  return messages;
}

export async function runThread(threadId: string, assistantId: string) {

  const stream = createStreamableValue&lt;{ text: string; annotations?: any[] }&gt;({
    text: &quot;&quot;,
  });

  openai.beta.threads.runs
    .stream(threadId, {
      assistant_id: assistantId,
      // Include annotations if needed
      include: [&quot;step_details.tool_calls[*].file_search.results[*].content&quot;],
    })
    .on(&quot;textDelta&quot;, (_, snapshot) =&gt; {

      stream.update({
        text: snapshot.value,
      });
    })
    .on(&quot;textDone&quot;, (content, _) =&gt; {

      stream.done({
        text: content.value,
        annotations: content.annotations as any[],
      });
    });

  return stream.value;
}

export async function listFiles() {
  const response = await openai.files.list();
  return response.data;
}

export async function deleteFile(fileId: string) {
  const response = await openai.files.del(fileId);
  return response;
}

export async function retrieveFile(fileId: string) {
  const response = await openai.files.retrieve(fileId);

  return response;
}

export async function listVectorStoreFiles(vectorStoreId: string) {
  const response = await openai.beta.vectorStores.files.list(vectorStoreId);
  return response.data;
}

export async function createVectorStoreFile(
  vectorStoreId: string,
  fileId: string
) {
  const response = await openai.beta.vectorStores.files.create(vectorStoreId, {
    file_id: fileId,
  });
  return response;
}

export async function deleteVectorStoreFile(
  vectorStoreId: string,
  fileId: string
) {
  const response = await openai.beta.vectorStores.files.del(
    vectorStoreId,
    fileId
  );
  return response;
}</file><file path="app/actions/companies.ts">&quot;use server&quot;;

import { db } from &quot;@/app/db&quot;;
import { companies, type Company } from &quot;@/schema&quot;;
import { desc } from &quot;drizzle-orm&quot;;
import { cookies } from &quot;next/headers&quot;;

export type CompaniesResponse = {
  companies: Company[];
  initialSelectedCompanyId: string | null;
};

export async function getCompanies(): Promise&lt;CompaniesResponse&gt; {
  const allCompanies = await db.select().from(companies).orderBy(desc(companies.createdAt));


  const cookieStore = cookies();
  const selectedCompanyId = cookieStore.get(&quot;selectedCompanyId&quot;)?.value;

  return {
    companies: allCompanies,
    initialSelectedCompanyId: selectedCompanyId || allCompanies[0]?.id || null,
  };
}</file><file path="app/actions/document.ts">&quot;use server&quot;;
import { getSession } from &quot;@/auth&quot;;
import {
  insertDocument,
  getDocumentById,
  deleteDocumentById,
  getDocumentsByCompanyId,
  deleteDocumentsByCompanyId,
} from &quot;@/app/db&quot;;
import { createClient } from &quot;@supabase/supabase-js&quot;;
import { z } from &quot;zod&quot;;


const documentSchema = z.object({
  file: z.instanceof(File).refine((file) =&gt; file.type === &quot;application/pdf&quot;, {
    message: &quot;Only PDF files are allowed&quot;,
  }),
  category: z.string().min(1, &quot;Category is required&quot;),
  description: z.string().optional(),
  companyId: z.string().refine((val) =&gt; !isNaN(Number(val)), {
    message: &quot;Invalid company ID&quot;,
  }),
});

export type DocumentActionState = {
  status: &quot;idle&quot; | &quot;success&quot; | &quot;error&quot;;
  message?: string;
};

export async function addDocument(
  prevState: DocumentActionState,
  formData: FormData
): Promise&lt;DocumentActionState&gt; {
  const session = await getSession();
  if (!session || !session.user) {
    return { status: &quot;error&quot;, message: &quot;User not authenticated&quot; };
  }
  const companyId = formData.get(&quot;companyId&quot;) as string;
  const file = formData.get(&quot;file&quot;) as File;
  const category = formData.get(&quot;category&quot;) as string;
  const description = formData.get(&quot;description&quot;) as string | null;
  const parsed = documentSchema.safeParse({
    file,
    category,
    description,
    companyId,
  });
  if (!parsed.success) {
    return { status: &quot;error&quot;, message: parsed.error.errors[0].message };
  }
  try {
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );


    const { data, error } = await supabase.storage.from(&quot;documents&quot;).upload(
      `${session.user.email}/${companyId}/${file.name}`,
      file
    );

    const newDocument = await insertDocument({
      fileName: file.name,
      storageUrl: data?.fullPath || &quot;&quot;,
      processedText: null,
      metadata: null,
      userId: session.user.email!,
      companyId: companyId,
      createdAt: new Date(),
    });
    return { status: &quot;success&quot; };
  } catch (error) {
    console.error(&quot;Error adding document:&quot;, error);
    return { status: &quot;error&quot;, message: &quot;Failed to add document&quot; };
  }
}

export async function getDocumentsByCompany(companyId: string): Promise&lt;any[]&gt; {
  const session = await getSession();
  if (!session || !session.user) {
    throw new Error(&quot;Not authenticated&quot;);
  }

  try {
    return await getDocumentsByCompanyId(companyId);
  } catch (error) {
    console.error(&quot;Error fetching documents:&quot;, error);
    return [];
  }
}

export async function deleteDocumentsByCompany(
  companyId: string
): Promise&lt;void&gt; {
  const session = await getSession();
  if (!session || !session.user) {
    throw new Error(&quot;Not authenticated&quot;);
  }

  try {
    await deleteDocumentsByCompanyId({ companyId: companyId });
  } catch (error) {
    console.error(&quot;Error deleting documents:&quot;, error);
    throw new Error(&quot;Failed to delete documents&quot;);
  }
}</file><file path="app/actions/documents.ts">&quot;use server&quot;;

import { createClient } from &quot;@supabase/supabase-js&quot;;
import { z } from &quot;zod&quot;;
import { db } from &quot;../db&quot;;
import { documents } from &quot;@/schema&quot;;
import { revalidatePath } from &quot;next/cache&quot;;
import { eq } from &quot;drizzle-orm&quot;;

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);


const uploadSchema = z.object({
  file: z.instanceof(File),
  userId: z.string().uuid(),
  companyId: z.string().uuid(),
});

interface UnstructuredElement {
  type: string;
  text: string;
  metadata: {
    coordinates?: {
      points: [number, number][];
      system: {
        name: string;
        width: number;
        height: number;
      };
    };
    page_number?: number;
    filename?: string;
  };
}

async function processDocumentWithUnstructured(file: File): Promise&lt;string&gt; {
  const formData = new FormData();
  formData.append(&quot;files&quot;, file);
  formData.append(&quot;strategy&quot;, &quot;hi_res&quot;);
  formData.append(&quot;coordinates&quot;, &quot;false&quot;);
  formData.append(&quot;encoding&quot;, &quot;utf-8&quot;);
  formData.append(&quot;output_format&quot;, &quot;application/json&quot;);

  const response = await fetch(&quot;https://api.unstructured.io/general/v0/general&quot;, {
    method: &quot;POST&quot;,
    headers: {
      &quot;Accept&quot;: &quot;application/json&quot;,
      &quot;unstructured-api-key&quot;: process.env.UNSTRUCTURED_API_KEY!,
    },
    body: formData,
  });

  if (!response.ok) {
    throw new Error(`Unstructured API error: ${response.statusText}`);
  }

  const elements = (await response.json()) as UnstructuredElement[];
  return elements.map(element =&gt; element.text).join(&quot;\n&quot;);
}

export async function uploadDocument(data: FormData) {
  try {
    const file = data.get(&quot;file&quot;) as File;
    const userId = data.get(&quot;userId&quot;) as string;
    const companyId = data.get(&quot;companyId&quot;) as string;


    const validated = uploadSchema.parse({ file, userId, companyId });


    const { data: uploadData, error: uploadError } = await supabase.storage
      .from(&quot;documents&quot;)
      .upload(`${userId}/${file.name}`, file);

    if (uploadError) throw new Error(`Upload failed: ${uploadError.message}`);


    const { data: { publicUrl } } = supabase.storage
      .from(&quot;documents&quot;)
      .getPublicUrl(`${userId}/${file.name}`);


    const processedText = await processDocumentWithUnstructured(file);


    const [document] = await db.insert(documents).values({
      userId: validated.userId,
      companyId: validated.companyId,
      fileName: file.name,
      storageUrl: publicUrl,
      processedText,
      metadata: {
        size: file.size,
        type: file.type,
        uploadedAt: new Date().toISOString(),
      },
    }).returning();

    revalidatePath(&quot;/documents&quot;);

    return { success: true, document };
  } catch (error) {
    console.error(&quot;Document upload failed:&quot;, error);
    return { success: false, error: (error as Error).message };
  }
}

export async function getDocuments(userId: string, companyId: string) {
  try {
    const userDocuments = await db.query.documents.findMany({
      where: (documents, { and, eq }) =&gt;
        and(
          eq(documents.userId, userId),
          eq(documents.companyId, companyId)
        ),
      orderBy: (documents, { desc }) =&gt; [desc(documents.createdAt)],
    });

    return { success: true, documents: userDocuments };
  } catch (error) {
    console.error(&quot;Failed to fetch documents:&quot;, error);
    return { success: false, error: (error as Error).message };
  }
}</file><file path="app/admin/page.tsx">import React from &apos;react&apos;;
import { type Metadata } from &apos;next&apos;;
import {
  AlertTriangle,
  AlertCircle,
  AlertOctagon,
  Lock,
  FrownIcon,
  MehIcon
} from &apos;lucide-react&apos;;
import Link from &apos;next/link&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Input } from &apos;@/components/ui/input&apos;;
import { Card } from &apos;@/components/ui/card&apos;;

export const metadata: Metadata = {
  title: &apos;🔒 Admin Panel 🕵️‍♂️&apos;,
  description:
    &apos;This is definitely not the admin panel. Just move along, nothing interesting to see here...&apos;,
  keywords: [
    &apos;completely normal page&apos;,
    &apos;nothing suspicious&apos;,
    &apos;just move along&apos;,
    &apos;ordinary page&apos;,
    &apos;completely ordinary&apos;,
    &apos;no secrets&apos;,
    &apos;boring page&apos;,
    &apos;nothing to see here&apos;
  ],
  robots: {
    follow: true,
    index: true
  }
};

export default function AdminPage() {
  return (
    &lt;div className=&quot;min-h-[100vh] md:min-h-[calc(100vh-44px)] flex flex-col bg-gradient-to-br from-[#ee7752] via-[#e73c7e] to-[#23a6d5] bg-[length:400%_400%] animate-gradient relative&quot;&gt;
      &lt;div className=&quot;absolute inset-0 bg-[url(&apos;data:image/svg+xml,%3Csvg viewBox=\&apos;0 0 256 256\&apos; xmlns=\&apos;http://www.w3.org/2000/svg\&apos;%3E%3Cfilter id=\&apos;noise\&apos;%3E%3CfeTurbulence type=\&apos;fractalNoise\&apos; baseFrequency=\&apos;0.85\&apos; numOctaves=\&apos;4\&apos; stitchTiles=\&apos;stitch\&apos;/%3E%3C/filter%3E%3Crect width=\&apos;100%25\&apos; height=\&apos;100%25\&apos; filter=\&apos;url(%23noise)\&apos;/%3E%3C/svg%3E&apos;)] opacity-[0.08] pointer-events-none animate-noise&quot; /&gt;

      &lt;Card className=&quot;flex-1 max-w-[1200px] mx-auto my-10 p-4 flex flex-col items-center justify-center text-center relative z-10 bg-white/90 backdrop-blur shadow-lg border border-white/20 animate-fadeIn&quot;&gt;
        {[...Array(10)].map((_, i) =&gt; (
          &lt;div
            key={i}
            className=&quot;absolute text-2xl text-red-500/40 animate-float&quot;
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDuration: `${Math.random() * 10 + 5}s`
            }}
          &gt;
            ⚠️
          &lt;/div&gt;
        ))}

        &lt;AlertTriangle className=&quot;w-24 h-24 text-red-500 animate-shake&quot; /&gt;

        &lt;h1 className=&quot;text-4xl font-bold text-red-500 mt-4 animate-glow&quot;&gt;
          🚨 Access Denied! 🚫
        &lt;/h1&gt;

        &lt;div className=&quot;flex items-center justify-center mt-4&quot;&gt;
          &lt;AlertOctagon className=&quot;w-8 h-8 mr-2&quot; /&gt;
          &lt;h2 className=&quot;text-2xl font-bold&quot;&gt;
            You do not have permission to access this page! 😠
          &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div className=&quot;flex items-center justify-center flex-wrap mt-2 text-gray-600&quot;&gt;
          &lt;MehIcon className=&quot;w-6 h-6 mr-2&quot; /&gt;
          &lt;p className=&quot;text-lg&quot;&gt;
            Don&amp;apos;t worry, we have already sent a notification to our
            security department.
          &lt;/p&gt;
          &lt;FrownIcon className=&quot;w-6 h-6 ml-2&quot; /&gt;
        &lt;/div&gt;

        &lt;Input
          placeholder=&quot;Hint: It doesn&apos;t work&quot;
          className=&quot;mb-4 mt-6 w-[400px]&quot;
        /&gt;
        &lt;Input
          type=&quot;password&quot;
          placeholder=&quot;Try 123456 (it still doesn&apos;t work)&quot;
          className=&quot;mb-4 w-[400px]&quot;
        /&gt;

        &lt;Button asChild className=&quot;transition-all hover:-translate-y-1&quot;&gt;
          &lt;Link href=&quot;/admin&quot; target=&quot;_blank&quot;&gt;
            Try to log in
          &lt;/Link&gt;
        &lt;/Button&gt;

        &lt;Button
          asChild
          variant=&quot;destructive&quot;
          className=&quot;mt-4 animate-glow-button hover:scale-110 hover:rotate-3&quot;
        &gt;
          &lt;Link href=&quot;/&quot; className=&quot;flex items-center&quot;&gt;
            &lt;AlertCircle className=&quot;mr-2 h-4 w-4&quot; /&gt;
            Leave this page now!
          &lt;/Link&gt;
        &lt;/Button&gt;

        &lt;div className=&quot;mt-8 flex items-center justify-center animate-pulse&quot;&gt;
          &lt;Lock className=&quot;w-5 h-5 text-red-500 mr-2 animate-glitch&quot; /&gt;
          &lt;p className=&quot;text-gray-600&quot;&gt;This page is protected and monitored&lt;/p&gt;
        &lt;/div&gt;
      &lt;/Card&gt;
    &lt;/div&gt;
  );
}</file><file path="app/aichat/[id]/page.tsx">import &apos;server-only&apos;;
import ChatComponent from &apos;../components/chat&apos;;
import { createServerSupabaseClient } from &apos;@/lib/server/server&apos;;
import { format } from &apos;date-fns&apos;;
import { SupabaseClient } from &apos;@supabase/supabase-js&apos;;
import { Database } from &apos;@/types/database&apos;;
import { redirect } from &apos;next/navigation&apos;;
import { unstable_noStore as noStore } from &apos;next/cache&apos;;
import { cookies } from &apos;next/headers&apos;;

type ChatMessage = {
  id: string;
  is_user_message: boolean;
  content: string | null;
  created_at: string;
};

async function fetchChat(supabase: SupabaseClient&lt;Database&gt;, chatId: string) {
  noStore();
  try {
    const { data, error } = await supabase
      .from(&apos;chat_sessions&apos;)
      .select(
        `
        id,
        user_id,
        created_at,
        updated_at,
        chat_messages!inner (
          id,
          is_user_message,
          content,
          created_at
        )
      `
      )
      .eq(&apos;id&apos;, chatId)
      .order(&apos;created_at&apos;, {
        ascending: true,
        referencedTable: &apos;chat_messages&apos;
      })
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    console.error(&apos;Error fetching chat data from Supabase:&apos;, error);
    return null;
  }
}

export default async function ChatPage(props: {
  params: Promise&lt;{ id: string }&gt;;
}) {
  const params = await props.params;
  const { id } = params;

  const supabase = await createServerSupabaseClient();
  const chatData = await fetchChat(supabase, id);

  if (!chatData) {
    redirect(&apos;/aichat&apos;);
  }
  const cookieStore = await cookies();
  const modelType = cookieStore.get(&apos;modelType&apos;)?.value || &apos;standart&apos;;
  const selectedOption =
    cookieStore.get(&apos;selectedOption&apos;)?.value || &apos;gpt-3.5-turbo-1106&apos;;

  const formattedChatData = {
    id: chatData.id,
    user_id: chatData.user_id,
    prompt: chatData.chat_messages
      .filter((m: ChatMessage) =&gt; m.is_user_message)
      .map((m: ChatMessage) =&gt; m.content),
    completion: chatData.chat_messages
      .filter((m: ChatMessage) =&gt; !m.is_user_message)
      .map((m: ChatMessage) =&gt; m.content),
    created_at: format(new Date(chatData.created_at), &apos;dd-MM-yyyy HH:mm&apos;),
    updated_at: format(new Date(chatData.updated_at), &apos;dd-MM-yyyy HH:mm&apos;),
    chat_messages: chatData.chat_messages
  };

  return (
    &lt;ChatComponent
      currentChat={formattedChatData}
      chatId={id}
      initialModelType={modelType}
      initialSelectedOption={selectedOption}
    /&gt;
  );
}</file><file path="app/aichat/components/chat.tsx">&apos;use client&apos;;

import React, { useMemo, useState, FC, KeyboardEvent } from &apos;react&apos;;
import { useChat, type Message } from &apos;ai/react&apos;;
import { useRouter, usePathname, useSearchParams } from &apos;next/navigation&apos;;
import ReactMarkdown from &apos;react-markdown&apos;;
import remarkGfm from &apos;remark-gfm&apos;;
import remarkMath from &apos;remark-math&apos;;
import rehypeHighlight, { Options as HighlightOptions } from &apos;rehype-highlight&apos;;
import { v4 as uuidv4 } from &apos;uuid&apos;;
import &apos;highlight.js/styles/github-dark.css&apos;;
import { Tables } from &apos;@/types/database&apos;;
import Link from &apos;next/link&apos;;
import { useSWRConfig } from &apos;swr&apos;;
import { ChatScrollAnchor } from &apos;../hooks/chat-scroll-anchor&apos;;
import { setModelSettings } from &apos;../actions&apos;;

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger
} from &apos;@/components/ui/dropdown-menu&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Textarea } from &apos;@/components/ui/textarea&apos;;
import { Card, CardContent } from &apos;@/components/ui/card&apos;;
import { RadioGroup, RadioGroupItem } from &apos;@/components/ui/radio-group&apos;;
import { Label } from &apos;@/components/ui/label&apos;;
import { useToast } from &apos;@/components/ui/use-toast&apos;;
import { cn } from &apos;@/lib/utils&apos;;

import {
  User,
  Bot,
  Send,
  RotateCcw,
  StopCircle,
  Copy,
  Check,
  ChevronDown,
  Loader2,
  Search
} from &apos;lucide-react&apos;;

const highlightOptionsAI: HighlightOptions = {
  detect: true,
  prefix: &apos;hljs-&apos;
};

type MessageFromDB = Pick&lt;
  Tables&lt;&apos;chat_messages&apos;&gt;,
  &apos;id&apos; | &apos;content&apos; | &apos;is_user_message&apos; | &apos;created_at&apos;
&gt;;

type ChatSessionWithMessages = Pick&lt;
  Tables&lt;&apos;chat_sessions&apos;&gt;,
  &apos;id&apos; | &apos;user_id&apos; | &apos;created_at&apos; | &apos;updated_at&apos;
&gt; &amp; {
  chat_messages: MessageFromDB[];
};

interface ChatProps {
  currentChat?: ChatSessionWithMessages | null;
  chatId?: string;
  initialModelType: string;
  initialSelectedOption: string;
}

interface ChatMessageProps {
  messages: Message[];
}

const MessageComponent = ({ message }: { message: Message }) =&gt; {
  const [isCopied, setIsCopied] = useState(false);

  const copyToClipboard = (str: string): void =&gt; {
    void window.navigator.clipboard.writeText(str);
  };

  const handleCopy = (content: string) =&gt; {
    copyToClipboard(content);
    setIsCopied(true);
    setTimeout(() =&gt; setIsCopied(false), 1000);
  };

  return (
    &lt;div
      className={cn(
        &apos;relative flex flex-col items-start p-4 mb-4 rounded-lg shadow-sm&apos;,
        message.role === &apos;user&apos;
          ? &apos;bg-primary/10 text-primary-foreground&apos;
          : &apos;bg-muted text-muted-foreground&apos;
      )}
    &gt;
      &lt;div className=&quot;absolute top-2 left-2&quot;&gt;
        {message.role === &apos;user&apos; ? (
          &lt;User className=&quot;h-4 w-4 text-primary&quot; /&gt;
        ) : (
          &lt;Bot className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;
        )}
      &lt;/div&gt;
      {message.role === &apos;assistant&apos; &amp;&amp; (
        &lt;Button
          variant=&quot;ghost&quot;
          size=&quot;icon&quot;
          className=&quot;absolute top-2 right-2&quot;
          onClick={() =&gt; handleCopy(message.content)}
        &gt;
          {isCopied ? (
            &lt;Check className=&quot;h-4 w-4&quot; /&gt;
          ) : (
            &lt;Copy className=&quot;h-4 w-4&quot; /&gt;
          )}
        &lt;/Button&gt;
      )}

      &lt;div className=&quot;pl-6 pt-1 w-full&quot;&gt;
        &lt;ReactMarkdown
          components={{
            a: ({ href, children }) =&gt; (
              &lt;Link
                href={href || &apos;#&apos;}
                target=&quot;_blank&quot;
                rel=&quot;noopener&quot;
                className=&quot;text-primary hover:underline&quot;
              &gt;
                {children}
              &lt;/Link&gt;
            ),
            code({ className, children, ...props }) {
              const match = /language-(\w+)/.exec(className || &apos;&apos;);
              const language = match &amp;&amp; match[1] ? match[1] : &apos;&apos;;
              const inline = !language;
              if (inline) {
                return (
                  &lt;code
                    className={cn(
                      &apos;bg-muted px-1.5 py-0.5 rounded-sm&apos;,
                      className
                    )}
                    {...props}
                  &gt;
                    {children}
                  &lt;/code&gt;
                );
              }

              return (
                &lt;div className=&quot;relative rounded-md mt-4&quot;&gt;
                  &lt;div className=&quot;absolute top-0 left-4 -translate-y-full px-3 py-1 text-xs text-muted-foreground uppercase&quot;&gt;
                    {language}
                  &lt;/div&gt;
                  &lt;pre className=&quot;mt-2 w-full overflow-x-auto rounded-lg bg-muted p-4&quot;&gt;
                    &lt;code className={className} {...props}&gt;
                      {children}
                    &lt;/code&gt;
                  &lt;/pre&gt;
                &lt;/div&gt;
              );
            }
          }}
          remarkPlugins={[remarkGfm, remarkMath]}
          rehypePlugins={[[rehypeHighlight, highlightOptionsAI]]}
        &gt;
          {message.content}
        &lt;/ReactMarkdown&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

const ChatMessage: FC&lt;ChatMessageProps&gt; = ({ messages }) =&gt; {
  return (
    &lt;div className=&quot;flex flex-col space-y-4&quot;&gt;
      {messages.map((message, index) =&gt; (
        &lt;MessageComponent key={`${message.id}-${index}`} message={message} /&gt;
      ))}
    &lt;/div&gt;
  );
};

const ChatComponent: FC&lt;ChatProps&gt; = ({
  currentChat,
  chatId,
  initialModelType,
  initialSelectedOption
}) =&gt; {
  const searchParams = useSearchParams();
  const router = useRouter();
  const pathname = usePathname();
  const { toast } = useToast();

  const [modelType, setModelType] = useState(initialModelType);
  const [selectedOption, setSelectedOption] = useState(initialSelectedOption);

  const { mutate } = useSWRConfig();

  const initialMessages = useMemo(() =&gt; {
    if (currentChat &amp;&amp; currentChat.chat_messages) {
      return currentChat.chat_messages.map(
        (message): Message =&gt; ({
          role: message.is_user_message ? &apos;user&apos; : &apos;assistant&apos;,
          id: message.id,
          content: message.content || &apos;&apos;
        })
      );
    }
    return [];
  }, [currentChat]);

  const apiEndpoint = modelType === &apos;perplex&apos; ? &apos;/api/perplexity&apos; : &apos;/api/chat&apos;;
  const createChatId = uuidv4();
  const {
    messages,
    input,
    handleInputChange,
    handleSubmit,
    isLoading,
    reload,
    stop
  } = useChat({
    api: apiEndpoint,
    body: {
      chatId: chatId || createChatId,
      option: selectedOption
    },
    experimental_throttle: 100,
    initialMessages: initialMessages,
    onFinish: async () =&gt; {
      if (!chatId) {
        const existingParams = searchParams.toString();
        const newUrl = `${pathname}/${createChatId}${existingParams ? `?${existingParams}` : &apos;&apos;}`;
        router.replace(newUrl, {
          scroll: false
        });
        mutate((key) =&gt; Array.isArray(key) &amp;&amp; key[0] === &apos;chatPreviews&apos;);
      }
    },
    onError: (error) =&gt; {
      let message = &apos;An error occurred, please try again&apos;;
      if (error.message.includes(&apos;timeout&apos;)) {
        message = &apos;Timeout error, please try again&apos;;
      }
      toast({
        variant: &apos;destructive&apos;,
        title: &apos;Error&apos;,
        description: message
      });
    }
  });

  const handleModelTypeChange = async (newValue: string | null) =&gt; {
    const newModelType = newValue || &apos;standart&apos;;
    setModelType(newModelType);
    await setModelSettings(newModelType, selectedOption);
  };

  const handleOptionChange = async (newValue: string | null) =&gt; {
    const newOption = newValue || &apos;gpt-3.5-turbo-1106&apos;;
    setSelectedOption(newOption);
    await setModelSettings(modelType, newOption);
  };

  const handleKeyDown = (event: KeyboardEvent&lt;HTMLTextAreaElement&gt;) =&gt; {
    if (event.key === &apos;Enter&apos; &amp;&amp; event.shiftKey) {

    } else if (event.key === &apos;Enter&apos;) {

      event.preventDefault();
      handleSubmit(event);
    }
  };

  const modelTypes = [&apos;standart&apos;, &apos;perplex&apos;];

  return (
    &lt;div className=&quot;flex flex-col h-screen w-full max-w-5xl mx-auto&quot;&gt;
      {messages.length === 0 ? (
        &lt;div className=&quot;flex flex-col items-center justify-center flex-1 text-center p-8&quot;&gt;
          &lt;h1 className=&quot;text-4xl font-bold mb-4&quot;&gt;
            Chat with our AI Assistant
          &lt;/h1&gt;
          &lt;p className=&quot;text-lg text-muted-foreground mb-4&quot;&gt;
            Experience the power of AI-driven conversations with our chat
            template. Ask questions on any topic and get informative responses
            instantly.
          &lt;/p&gt;
          &lt;p className=&quot;text-lg font-semibold mb-4&quot;&gt;
            Check out{&apos; &apos;}
            &lt;Link
              href=&quot;https://www.lovguiden.dk/&quot;
              target=&quot;_blank&quot;
              rel=&quot;noopener&quot;
              className=&quot;text-primary hover:underline text-xl&quot;
            &gt;
              Lovguiden
            &lt;/Link&gt;
            , a Danish legal AI platform, for a real-world example of AI in
            action.
          &lt;/p&gt;
          &lt;h2 className=&quot;text-2xl font-semibold&quot;&gt;
            Start chatting now and enjoy the AI experience!
          &lt;/h2&gt;
        &lt;/div&gt;
      ) : (
        &lt;div className=&quot;flex-1 overflow-y-auto px-4&quot;&gt;
          &lt;div className=&quot;max-w-3xl mx-auto py-4&quot;&gt;
            &lt;ChatMessage messages={messages} /&gt;
            &lt;ChatScrollAnchor trackVisibility /&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      )}

      &lt;div className=&quot;sticky bottom-0 p-4 bg-background/80 backdrop-blur&quot;&gt;
        &lt;Card className=&quot;max-w-3xl mx-auto&quot;&gt;
          &lt;CardContent className=&quot;p-4&quot;&gt;
            &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;
              &lt;div className=&quot;relative&quot;&gt;
                &lt;Textarea
                  value={input}
                  onChange={handleInputChange}
                  onKeyDown={handleKeyDown}
                  rows={1}
                  disabled={isLoading}
                  placeholder=&quot;Type your message...&quot;
                  className=&quot;pr-24 resize-none&quot;
                /&gt;
                &lt;div className=&quot;absolute right-2 top-1/2 -translate-y-1/2 flex items-center gap-2&quot;&gt;
                  {messages.length &gt; 0 &amp;&amp; (
                    &lt;Button
                      type=&quot;button&quot;
                      variant=&quot;ghost&quot;
                      size=&quot;icon&quot;
                      onClick={() =&gt; void reload()}
                      disabled={isLoading}
                    &gt;
                      &lt;RotateCcw className=&quot;h-4 w-4&quot; /&gt;
                    &lt;/Button&gt;
                  )}
                  {isLoading ? (
                    &lt;Button
                      type=&quot;button&quot;
                      variant=&quot;ghost&quot;
                      size=&quot;icon&quot;
                      onClick={stop}
                      className=&quot;relative&quot;
                    &gt;
                      &lt;div className=&quot;absolute inset-0 flex items-center justify-center&quot;&gt;
                        &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;
                      &lt;/div&gt;
                      &lt;StopCircle className=&quot;h-4 w-4 opacity-0 group-hover:opacity-100&quot; /&gt;
                    &lt;/Button&gt;
                  ) : (
                    &lt;Button type=&quot;submit&quot; variant=&quot;ghost&quot; size=&quot;icon&quot;&gt;
                      &lt;Send className=&quot;h-4 w-4&quot; /&gt;
                    &lt;/Button&gt;
                  )}
                &lt;/div&gt;
              &lt;/div&gt;

              &lt;div className=&quot;flex items-center justify-between gap-4&quot;&gt;
                {modelType === &apos;standart&apos; &amp;&amp; (
                  &lt;DropdownMenu&gt;
                    &lt;DropdownMenuTrigger asChild&gt;
                      &lt;Button
                        variant=&quot;outline&quot;
                        className=&quot;w-[200px] justify-between&quot;
                      &gt;
                        {selectedOption}
                        &lt;ChevronDown className=&quot;h-4 w-4 opacity-50&quot; /&gt;
                      &lt;/Button&gt;
                    &lt;/DropdownMenuTrigger&gt;
                    &lt;DropdownMenuContent align=&quot;start&quot; className=&quot;w-[200px]&quot;&gt;
                      {[
                        &apos;gpt-3.5-turbo-1106&apos;,
                        &apos;gpt-3.5-turbo-16k&apos;,
                        &apos;gpt-4-0125-preview&apos;,
                        &apos;gpt-4-1106-preview&apos;,
                        &apos;gpt-4&apos;,
                        &apos;sonnet-3-5&apos;
                      ].map((option) =&gt; (
                        &lt;DropdownMenuItem
                          key={option}
                          onSelect={() =&gt; handleOptionChange(option)}
                        &gt;
                          {option}
                        &lt;/DropdownMenuItem&gt;
                      ))}
                    &lt;/DropdownMenuContent&gt;
                  &lt;/DropdownMenu&gt;
                )}

                &lt;RadioGroup
                  defaultValue=&quot;standart&quot;
                  value={modelType}
                  onValueChange={handleModelTypeChange}
                  className=&quot;flex items-center space-x-4&quot;
                &gt;
                  {modelTypes.map((model) =&gt; (
                    &lt;div key={model} className=&quot;flex items-center space-x-2&quot;&gt;
                      &lt;RadioGroupItem value={model} id={model} /&gt;
                      &lt;Label htmlFor={model}&gt;{model}&lt;/Label&gt;
                    &lt;/div&gt;
                  ))}
                &lt;/RadioGroup&gt;
              &lt;/div&gt;
            &lt;/form&gt;
          &lt;/CardContent&gt;
        &lt;/Card&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default ChatComponent;</file><file path="app/aichat/components/UserCharListDrawer.tsx">&apos;use client&apos;;
import React, {
  type FC,
  useState,
  memo,
  useCallback,
  useMemo,
  useOptimistic,
  startTransition
} from &apos;react&apos;;
import {
  deleteChatData,
  fetchMoreChatPreviews,
  updateChatTitle
} from &apos;../actions&apos;;
import { isToday, isYesterday, subDays } from &apos;date-fns&apos;;
import { Tables } from &apos;@/types/database&apos;;
import useSWRInfinite from &apos;swr/infinite&apos;;
import { TZDate } from &apos;@date-fns/tz&apos;;
import Link from &apos;next/link&apos;;
import { useRouter, useParams, useSearchParams } from &apos;next/navigation&apos;;

import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle
} from &apos;@/components/ui/sheet&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Skeleton } from &apos;@/components/ui/skeleton&apos;;
import { Separator } from &apos;@/components/ui/separator&apos;;
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle
} from &apos;@/components/ui/dialog&apos;;
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger
} from &apos;@/components/ui/dropdown-menu&apos;;
import { Input } from &apos;@/components/ui/input&apos;;
import { Label } from &apos;@/components/ui/label&apos;;
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger
} from &apos;@/components/ui/tooltip&apos;;
import { ScrollArea } from &apos;@/components/ui/scroll-area&apos;;
import { cn } from &apos;@/lib/utils&apos;;

import {
  Trash,
  MoreHorizontal,
  Share,
  Edit,
  FilePlus,
  MessageSquare,
  Loader2
} from &apos;lucide-react&apos;;

type UserInfo = Pick&lt;Tables&lt;&apos;users&apos;&gt;, &apos;full_name&apos; | &apos;email&apos; | &apos;id&apos;&gt;;

type ChatPreview = {
  id: string;
  firstMessage: string;
  created_at: string;
};

interface CombinedDrawerProps {
  userInfo: UserInfo;
  initialChatPreviews: ChatPreview[];
}

const useCategorizedChats = (chatPreviews: ChatPreview[][] | undefined) =&gt; {
  return useMemo(() =&gt; {
    const chatPreviewsFlat = chatPreviews ? chatPreviews.flat() : [];
    const getZonedDate = (date: string) =&gt;
      new TZDate(new Date(date), &apos;Europe/Copenhagen&apos;);

    const today = chatPreviewsFlat.filter((chat) =&gt;
      isToday(getZonedDate(chat.created_at))
    );

    const yesterday = chatPreviewsFlat.filter((chat) =&gt;
      isYesterday(getZonedDate(chat.created_at))
    );

    const last7Days = chatPreviewsFlat.filter((chat) =&gt; {
      const chatDate = getZonedDate(chat.created_at);
      const sevenDaysAgo = subDays(new Date(), 7);
      return (
        chatDate &gt; sevenDaysAgo &amp;&amp; !isToday(chatDate) &amp;&amp; !isYesterday(chatDate)
      );
    });

    const last30Days = chatPreviewsFlat.filter((chat) =&gt; {
      const chatDate = getZonedDate(chat.created_at);
      const thirtyDaysAgo = subDays(new Date(), 30);
      const sevenDaysAgo = subDays(new Date(), 7);
      return chatDate &gt; thirtyDaysAgo &amp;&amp; chatDate &lt;= sevenDaysAgo;
    });

    const last2Months = chatPreviewsFlat.filter((chat) =&gt; {
      const chatDate = getZonedDate(chat.created_at);
      const sixtyDaysAgo = subDays(new Date(), 60);
      const thirtyDaysAgo = subDays(new Date(), 30);
      return chatDate &gt; sixtyDaysAgo &amp;&amp; chatDate &lt;= thirtyDaysAgo;
    });

    const older = chatPreviewsFlat.filter((chat) =&gt; {
      const sixtyDaysAgo = subDays(new Date(), 60);
      return getZonedDate(chat.created_at) &lt;= sixtyDaysAgo;
    });

    return { today, yesterday, last7Days, last30Days, last2Months, older };
  }, [chatPreviews]);
};

const CombinedDrawer: FC&lt;CombinedDrawerProps&gt; = ({
  userInfo,
  initialChatPreviews
}) =&gt; {
  const params = useParams();
  const router = useRouter();
  const [isMobileOpen, setIsMobileOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [chatToDelete, setChatToDelete] = useState&lt;string | null&gt;(null);

  const toggleMobileDrawer = (event: React.MouseEvent) =&gt; {
    event.stopPropagation();
    setIsMobileOpen(!isMobileOpen);
  };

  const currentChatId = typeof params.id === &apos;string&apos; ? params.id : undefined;

  const {
    data: chatPreviews,
    mutate: mutateChatPreviews,
    isValidating: isLoadingMore,
    size,
    setSize
  } = useSWRInfinite(
    (index) =&gt; [`chatPreviews`, index],
    async ([_, index]) =&gt; {
      const offset = index * 25;
      const newChatPreviews = await fetchMoreChatPreviews(offset);
      return newChatPreviews;
    },
    {
      fallbackData: [initialChatPreviews],
      revalidateFirstPage: false,
      revalidateOnFocus: false,
      revalidateOnReconnect: false,
      revalidateIfStale: false,
      revalidateOnMount: false
    }
  );

  const hasMore =
    chatPreviews &amp;&amp; chatPreviews[chatPreviews.length - 1]?.length === 30;

  const loadMoreChats = useCallback(() =&gt; {
    if (!isLoadingMore) {
      setSize(size + 1);
    }
  }, [isLoadingMore, setSize, size]);

  const handleDeleteClick = (id: string) =&gt; {
    setChatToDelete(id);
    setDeleteDialogOpen(true);
  };

  const handleDeleteConfirmation = async () =&gt; {
    if (chatToDelete) {
      try {
        await deleteChatData(chatToDelete);
        await mutateChatPreviews();

        if (chatToDelete === currentChatId) {
          router.push(&apos;/aichat&apos;);
        }
      } catch (error) {
        console.error(&apos;Failed to delete the chat:&apos;, error);
      }
    }
    setDeleteDialogOpen(false);
    setChatToDelete(null);
  };

  const categorizedChats = useCategorizedChats(chatPreviews);

  const handleChatSelect = useCallback(() =&gt; {
    if (window.innerWidth &lt; 800) {
      setIsMobileOpen(false);
    }
  }, []);

  return (
    &lt;&gt;
      &lt;Button
        variant=&quot;ghost&quot;
        size=&quot;icon&quot;
        onClick={toggleMobileDrawer}
        className=&quot;fixed left-4 bottom-42 z-50 md:hidden&quot;
      &gt;
        &lt;MessageSquare className=&quot;h-5 w-5 text-primary&quot; /&gt;
      &lt;/Button&gt;

      &lt;Sheet open={isMobileOpen} onOpenChange={setIsMobileOpen}&gt;
        &lt;SheetContent
          side=&quot;left&quot;
          className={cn(
            &apos;w-full sm:w-[400px] md:w-[200px] lg:w-[250px] xl:w-[300px] 2xl:w-[350px]&apos;,
            &apos;bg-background/80 backdrop-blur-md border-r&apos;,
            &apos;p-0 pt-10&apos;
          )}
        &gt;
          &lt;div className=&quot;flex h-full flex-col&quot;&gt;
            {!userInfo.email ? (
              &lt;div className=&quot;flex flex-col items-center justify-center flex-1 p-8 text-center space-y-4&quot;&gt;
                &lt;h2 className=&quot;text-xl font-semibold&quot;&gt;
                  Sign in to save and view your chats
                &lt;/h2&gt;
                &lt;Button asChild&gt;
                  &lt;Link href=&quot;/signin&quot;&gt;Sign in&lt;/Link&gt;
                &lt;/Button&gt;
              &lt;/div&gt;
            ) : (
              &lt;&gt;
                &lt;div className=&quot;flex justify-end p-2&quot;&gt;
                  &lt;Tooltip&gt;
                    &lt;TooltipTrigger asChild&gt;
                      &lt;Button
                        variant=&quot;ghost&quot;
                        size=&quot;icon&quot;
                        asChild
                        className=&quot;text-primary&quot;
                      &gt;
                        &lt;Link href=&quot;/aichat&quot;&gt;
                          &lt;FilePlus className=&quot;h-5 w-5&quot; /&gt;
                        &lt;/Link&gt;
                      &lt;/Button&gt;
                    &lt;/TooltipTrigger&gt;
                    &lt;TooltipContent&gt;Create a new conversation&lt;/TooltipContent&gt;
                  &lt;/Tooltip&gt;
                &lt;/div&gt;

                &lt;ScrollArea className=&quot;flex-1 px-2&quot;&gt;
                  {!chatPreviews ? (
                    &lt;div className=&quot;space-y-2&quot;&gt;
                      {Array.from({ length: 5 }).map((_, index) =&gt; (
                        &lt;div key={index} className=&quot;px-2 py-1&quot;&gt;
                          &lt;Skeleton className=&quot;h-5 w-full&quot; /&gt;
                        &lt;/div&gt;
                      ))}
                    &lt;/div&gt;
                  ) : (
                    &lt;&gt;
                      &lt;RenderChatSection
                        title=&quot;Today&quot;
                        chats={categorizedChats.today || []}
                        currentChatId={currentChatId}
                        handleDeleteClick={handleDeleteClick}
                        onChatSelect={handleChatSelect}
                      /&gt;
                      &lt;RenderChatSection
                        title=&quot;Yesterday&quot;
                        chats={categorizedChats.yesterday || []}
                        currentChatId={currentChatId}
                        handleDeleteClick={handleDeleteClick}
                        onChatSelect={handleChatSelect}
                      /&gt;
                      &lt;RenderChatSection
                        title=&quot;Last 7 days&quot;
                        chats={categorizedChats.last7Days || []}
                        currentChatId={currentChatId}
                        handleDeleteClick={handleDeleteClick}
                        onChatSelect={handleChatSelect}
                      /&gt;
                      &lt;RenderChatSection
                        title=&quot;Last 30 days&quot;
                        chats={categorizedChats.last30Days || []}
                        currentChatId={currentChatId}
                        handleDeleteClick={handleDeleteClick}
                        onChatSelect={handleChatSelect}
                      /&gt;
                      &lt;RenderChatSection
                        title=&quot;Last 2 month&quot;
                        chats={categorizedChats.last2Months || []}
                        currentChatId={currentChatId}
                        handleDeleteClick={handleDeleteClick}
                        onChatSelect={handleChatSelect}
                      /&gt;
                      &lt;RenderChatSection
                        title=&quot;Older&quot;
                        chats={categorizedChats.older || []}
                        currentChatId={currentChatId}
                        handleDeleteClick={handleDeleteClick}
                        onChatSelect={handleChatSelect}
                      /&gt;

                      {hasMore &amp;&amp; (
                        &lt;div className=&quot;flex justify-center py-4&quot;&gt;
                          &lt;Button
                            variant=&quot;outline&quot;
                            onClick={loadMoreChats}
                            disabled={isLoadingMore}
                            className=&quot;min-w-[120px]&quot;
                          &gt;
                            {isLoadingMore ? (
                              &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;
                            ) : (
                              &apos;Load more&apos;
                            )}
                          &lt;/Button&gt;
                        &lt;/div&gt;
                      )}
                    &lt;/&gt;
                  )}
                &lt;/ScrollArea&gt;
              &lt;/&gt;
            )}
          &lt;/div&gt;
        &lt;/SheetContent&gt;
      &lt;/Sheet&gt;

      &lt;Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}&gt;
        &lt;DialogContent&gt;
          &lt;DialogHeader&gt;
            &lt;DialogTitle&gt;Delete Chat&lt;/DialogTitle&gt;
            &lt;DialogDescription&gt;
              Are you sure you want to delete this chat?
            &lt;/DialogDescription&gt;
          &lt;/DialogHeader&gt;
          &lt;DialogFooter&gt;
            &lt;Button
              variant=&quot;outline&quot;
              onClick={() =&gt; setDeleteDialogOpen(false)}
            &gt;
              Cancel
            &lt;/Button&gt;
            &lt;Button variant=&quot;destructive&quot; onClick={handleDeleteConfirmation}&gt;
              Delete
            &lt;/Button&gt;
          &lt;/DialogFooter&gt;
        &lt;/DialogContent&gt;
      &lt;/Dialog&gt;
    &lt;/&gt;
  );
};

type RenderChatSectionProps = {
  title: string;
  chats: ChatPreview[];
  currentChatId: string | null | undefined;
  handleDeleteClick: (id: string) =&gt; void;
  onChatSelect: (id: string) =&gt; void;
};

const RenderChatSection: FC&lt;RenderChatSectionProps&gt; = memo(
  ({ title, chats, currentChatId, handleDeleteClick, onChatSelect }) =&gt; {
    const searchParams = useSearchParams();
    const router = useRouter();
    const [editDialogOpen, setEditDialogOpen] = useState(false);
    const [editingChatId, setEditingChatId] = useState&lt;string | null&gt;(null);
    const [newTitle, setNewTitle] = useState(&apos;&apos;);

    const [optimisticChats, addOptimisticChat] = useOptimistic(
      chats,
      (
        currentChats: ChatPreview[],
        optimisticUpdate: { id: string; newTitle: string }
      ) =&gt;
        currentChats.map((chat) =&gt;
          chat.id === optimisticUpdate.id
            ? {
                ...chat,
                chat_messages: [
                  { content: optimisticUpdate.newTitle },
                  ...chat.firstMessage.slice(1)
                ]
              }
            : chat
        )
    );

    const handleOpenRename = (chatId: string) =&gt; {
      setEditingChatId(chatId);
      setEditDialogOpen(true);
    };

    if (optimisticChats.length === 0) return null;

    return (
      &lt;&gt;
        &lt;Separator className=&quot;my-2&quot; /&gt;
        &lt;h3 className=&quot;px-2 text-sm font-medium text-muted-foreground&quot;&gt;
          {title}
        &lt;/h3&gt;

        &lt;div className=&quot;mt-2 space-y-1&quot;&gt;
          {optimisticChats.map(({ id, firstMessage }) =&gt; {
            const currentParams = new URLSearchParams(searchParams.toString());
            const href = `/aichat/${id}${
              currentParams.toString() ? &apos;?&apos; + currentParams.toString() : &apos;&apos;
            }`;

            return (
              &lt;div key={id} className=&quot;group relative&quot;&gt;
                &lt;Link
                  href={href}
                  onClick={() =&gt; onChatSelect(id)}
                  onMouseEnter={() =&gt; router.prefetch(href)}
                  className={cn(
                    &apos;flex items-center px-2 py-1.5 text-sm rounded-md hover:bg-accent&apos;,
                    currentChatId === id &amp;&amp; &apos;bg-accent&apos;
                  )}
                &gt;
                  &lt;Tooltip&gt;
                    &lt;TooltipTrigger className=&quot;flex-1 truncate text-left&quot;&gt;
                      {firstMessage}
                    &lt;/TooltipTrigger&gt;
                    &lt;TooltipContent side=&quot;right&quot; align=&quot;start&quot;&gt;
                      {firstMessage}
                    &lt;/TooltipContent&gt;
                  &lt;/Tooltip&gt;

                  &lt;DropdownMenu&gt;
                    &lt;DropdownMenuTrigger asChild&gt;
                      &lt;Button
                        variant=&quot;ghost&quot;
                        size=&quot;icon&quot;
                        className=&quot;ml-auto h-6 w-6 shrink-0 opacity-0 group-hover:opacity-100&quot;
                      &gt;
                        &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;
                      &lt;/Button&gt;
                    &lt;/DropdownMenuTrigger&gt;
                    &lt;DropdownMenuContent align=&quot;end&quot;&gt;
                      &lt;DropdownMenuItem disabled&gt;
                        &lt;Share className=&quot;mr-2 h-4 w-4&quot; /&gt;
                        Share
                      &lt;/DropdownMenuItem&gt;
                      &lt;DropdownMenuItem onClick={() =&gt; handleOpenRename(id)}&gt;
                        &lt;Edit className=&quot;mr-2 h-4 w-4&quot; /&gt;
                        Rename
                      &lt;/DropdownMenuItem&gt;
                      &lt;DropdownMenuItem
                        onClick={() =&gt; handleDeleteClick(id)}
                        className=&quot;text-destructive&quot;
                      &gt;
                        &lt;Trash className=&quot;mr-2 h-4 w-4&quot; /&gt;
                        Delete
                      &lt;/DropdownMenuItem&gt;
                    &lt;/DropdownMenuContent&gt;
                  &lt;/DropdownMenu&gt;
                &lt;/Link&gt;
              &lt;/div&gt;
            );
          })}
        &lt;/div&gt;

        &lt;Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}&gt;
          &lt;DialogContent&gt;
            &lt;DialogHeader&gt;
              &lt;DialogTitle&gt;Rename Chat&lt;/DialogTitle&gt;
            &lt;/DialogHeader&gt;
            &lt;form
              onSubmit={async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {
                e.preventDefault();
                const formData = new FormData(e.currentTarget);
                const chatId = formData.get(&apos;chatId&apos;) as string;
                const title = formData.get(&apos;title&apos;) as string;

                startTransition(async () =&gt; {
                  addOptimisticChat({
                    id: chatId,
                    newTitle: title
                  });

                  try {
                    const result = await updateChatTitle(formData);

                    if (!result.success) {
                      const originalChat = chats.find(
                        (chat) =&gt; chat.id === chatId
                      );
                      if (originalChat) {
                        addOptimisticChat({
                          id: chatId,
                          newTitle: originalChat.firstMessage
                        });
                      }
                      console.error(&apos;Failed to update chat title&apos;);
                    }
                  } catch (error) {
                    const originalChat = chats.find(
                      (chat) =&gt; chat.id === chatId
                    );
                    if (originalChat) {
                      addOptimisticChat({
                        id: chatId,
                        newTitle: originalChat.firstMessage
                      });
                    }
                    console.error(&apos;Error updating chat title:&apos;, error);
                  }
                });

                setEditDialogOpen(false);
              }}
              className=&quot;space-y-4&quot;
            &gt;
              &lt;input type=&quot;hidden&quot; name=&quot;chatId&quot; value={editingChatId || &apos;&apos;} /&gt;
              &lt;div className=&quot;space-y-2&quot;&gt;
                &lt;Label htmlFor=&quot;title&quot;&gt;New name&lt;/Label&gt;
                &lt;Input
                  id=&quot;title&quot;
                  name=&quot;title&quot;
                  value={newTitle}
                  onChange={(e) =&gt; setNewTitle(e.target.value)}
                  placeholder=&quot;Enter new name&quot;
                  required
                /&gt;
              &lt;/div&gt;
              &lt;DialogFooter&gt;
                &lt;Button
                  type=&quot;button&quot;
                  variant=&quot;outline&quot;
                  onClick={() =&gt; setEditDialogOpen(false)}
                &gt;
                  Cancel
                &lt;/Button&gt;
                &lt;Button type=&quot;submit&quot;&gt;Save&lt;/Button&gt;
              &lt;/DialogFooter&gt;
            &lt;/form&gt;
          &lt;/DialogContent&gt;
        &lt;/Dialog&gt;
      &lt;/&gt;
    );
  },
  (prevProps, nextProps) =&gt; {
    return (
      prevProps.title === nextProps.title &amp;&amp;
      prevProps.currentChatId === nextProps.currentChatId &amp;&amp;
      prevProps.chats.length === nextProps.chats.length &amp;&amp;
      prevProps.chats.every((chat, index) =&gt; {
        const nextChat = nextProps.chats[index];
        return (
          chat.id === nextChat.id &amp;&amp; chat.firstMessage === nextChat.firstMessage
        );
      })
    );
  }
);

RenderChatSection.displayName = &apos;RenderChatSection&apos;;

export default CombinedDrawer;</file><file path="app/aichat/layout.tsx">import React from &apos;react&apos;;
import { createServerSupabaseClient } from &apos;@/lib/server/server&apos;;
import ChatHistoryDrawer from &apos;./components/UserCharListDrawer&apos;;
import { SupabaseClient } from &apos;@supabase/supabase-js&apos;;
import { Database } from &apos;@/types/database&apos;;
import { unstable_noStore as noStore } from &apos;next/cache&apos;;
import { Tables } from &apos;@/types/database&apos;;
import { getUserInfo } from &apos;@/lib/server/supabase&apos;;

export const maxDuration = 60;

async function fetchData(
  supabase: SupabaseClient&lt;Database&gt;,
  limit: number = 30,
  offset: number = 0
) {
  noStore();
  try {

    const { data: sessions, error: sessionsError } = await supabase
      .from(&apos;chat_sessions&apos;)
      .select(
        `
        id,
        created_at,
        chat_title,
        chat_messages (
          content
        )
      `
      )
      .order(&apos;created_at&apos;, { ascending: false })
      .range(offset, offset + limit - 1);

    if (sessionsError) {
      console.error(&apos;Error fetching chat sessions:&apos;, sessionsError);
      throw sessionsError;
    }

    if (!sessions) {
      return [];
    }

    return sessions.map((session) =&gt; ({
      id: session.id,
      firstMessage:
        session.chat_title ||
        (session.chat_messages &amp;&amp; session.chat_messages[0]?.content) ||
        &apos;No messages yet&apos;,
      created_at: session.created_at
    }));
  } catch (error) {
    console.error(&apos;Error fetching chat previews:&apos;, error);
    return [];
  }
}

type UserInfo = Pick&lt;Tables&lt;&apos;users&apos;&gt;, &apos;full_name&apos; | &apos;email&apos; | &apos;id&apos;&gt;;
type ChatPreview = {
  id: string;
  firstMessage: string;
  created_at: string;
};

export default async function Layout(props: { children: React.ReactNode }) {
  const supabase = await createServerSupabaseClient();
  const userData = await getUserInfo();

  let userInfo: UserInfo;
  let initialChatPreviews: ChatPreview[] = [];

  if (userData) {
    userInfo = userData;
    initialChatPreviews = await fetchData(supabase, 30, 0);
  } else {
    userInfo = {
      id: &apos;&apos;,
      full_name: &apos;&apos;,
      email: &apos;&apos;
    };
  }
  return (
    &lt;div className=&quot;flex&quot;&gt;
      &lt;ChatHistoryDrawer
        userInfo={userInfo}
        initialChatPreviews={initialChatPreviews}
      /&gt;
      {props.children}
    &lt;/div&gt;
  );
}</file><file path="app/api/auth/callback/route.ts">import { type EmailOtpType } from &apos;@supabase/supabase-js&apos;;
import { NextResponse, NextRequest } from &apos;next/server&apos;;
import { createServerSupabaseClient } from &apos;@/lib/server/server&apos;;

export const dynamic = &apos;force-dynamic&apos;;

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const token_hash_searchParam = searchParams.get(&apos;token_hash&apos;);
  const code = searchParams.get(&apos;code&apos;);
  const type = searchParams.get(&apos;type&apos;) as EmailOtpType | null;
  const next = searchParams.get(&apos;next&apos;) ?? &apos;/&apos;;
  const redirectTo = request.nextUrl.clone();

  const token_hash = code || token_hash_searchParam;

  if (token_hash &amp;&amp; type) {
    const supabase = await createServerSupabaseClient();

    const { data } = await supabase.auth.verifyOtp({
      type,
      token_hash
    });

    if (data) {
      if (next) {
        redirectTo.pathname = next;
        redirectTo.searchParams.set(
          &apos;message&apos;,
          encodeURIComponent(&apos;You can now sign in.&apos;)
        );
      } else {
        redirectTo.pathname = &apos;/signin&apos;;
        redirectTo.searchParams.set(
          &apos;message&apos;,
          encodeURIComponent(&apos;You can now sign in.&apos;)
        );
      }
    } else {

      redirectTo.pathname = &apos;/&apos;;
      redirectTo.searchParams.set(
        &apos;error&apos;,
        encodeURIComponent(&apos;Authentication failed. Please try again.&apos;)
      );
    }
  } else {

    redirectTo.pathname = &apos;/&apos;;
    redirectTo.searchParams.set(
      &apos;error&apos;,
      encodeURIComponent(&apos;Invalid authentication attempt. Please try again.&apos;)
    );
  }


  redirectTo.searchParams.delete(&apos;token_hash&apos;);
  redirectTo.searchParams.delete(&apos;code&apos;);
  redirectTo.searchParams.delete(&apos;type&apos;);
  redirectTo.searchParams.delete(&apos;next&apos;);

  return NextResponse.redirect(redirectTo);
}</file><file path="app/api/auth/confirm/route.ts">import { NextResponse } from &apos;next/server&apos;;
import { createServerSupabaseClient } from &apos;@/lib/server/server&apos;;

export const dynamic = &apos;force-dynamic&apos;;

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url);
  const code = searchParams.get(&apos;code&apos;);

  const next = searchParams.get(&apos;next&apos;) ?? &apos;/signin&apos;;

  if (code) {
    const supabase = await createServerSupabaseClient();

    const { error } = await supabase.auth.exchangeCodeForSession(code);
    if (!error) {
      const redirectTo = new URL(next, origin);
      redirectTo.searchParams.set(
        &apos;message&apos;,
        encodeURIComponent(&apos;You are now signed in&apos;)
      );
      return NextResponse.redirect(redirectTo);
    }
  }

  const redirectTo = new URL(&apos;/signin&apos;, origin);
  redirectTo.searchParams.set(
    &apos;message&apos;,
    encodeURIComponent(&apos;An error have occoured&apos;)
  );
  return NextResponse.redirect(redirectTo);
}</file><file path="app/api/chat/SaveToDb.ts">import &apos;server-only&apos;;
import { createServerSupabaseClient } from &apos;@/lib/server/server&apos;;

export type OpenAiLog = {
  id: string;
  user_id: string | null;
  created_at: string;
  updated_at: string;
};

export const saveChatToSupbabase = async (
  chatSessionId: string,
  userId: string,
  currentMessageContent: string,
  completion: string,
  sources?: string[]
): Promise&lt;void&gt; =&gt; {
  if (!chatSessionId) {
    console.warn(&apos;Chat session ID is empty. Skipping saving chat to Supabase.&apos;);
    return;
  }
  const supabase = await createServerSupabaseClient();
  try {
    const now = new Date();

    const aiMessageTime = new Date(now.getTime() + 1000);


    const { error: sessionError } = await supabase.from(&apos;chat_sessions&apos;).upsert(
      {
        id: chatSessionId,
        user_id: userId,
        updated_at: aiMessageTime.toISOString()
      },
      { onConflict: &apos;id&apos; }
    );

    if (sessionError) throw sessionError;


    const messagesData = [
      {
        chat_session_id: chatSessionId,
        is_user_message: true,
        content: currentMessageContent,
        created_at: now.toISOString()
      },
      {
        chat_session_id: chatSessionId,
        is_user_message: false,
        content: completion,
        sources: sources &amp;&amp; sources.length &gt; 0 ? sources : null,
        created_at: aiMessageTime.toISOString()
      }
    ];


    const { error: messagesError } = await supabase
      .from(&apos;chat_messages&apos;)
      .insert(messagesData);

    if (messagesError) throw messagesError;
  } catch (error) {
    console.error(&apos;Error saving chat to Supabase:&apos;, error);
  }
};</file><file path="app/components/errorBoundary/ErrorBoundaryPage.tsx">&apos;use client&apos;;
import React from &apos;react&apos;;
import { AlertTriangle } from &apos;lucide-react&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from &apos;@/components/ui/select&apos;;
import { Textarea } from &apos;@/components/ui/textarea&apos;;
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger
} from &apos;@/components/ui/collapsible&apos;;

interface ErrorBoundaryProps {
  children: React.ReactNode;
  onCatch?: (error: Error, info: React.ErrorInfo) =&gt; void;
  logger?: (error: Error, errorInfo: string) =&gt; void;
}

interface ErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
  errorInfo: React.ErrorInfo | null;
  feedback: string;
  feedbackCategory: string;
  showDetails: boolean;
}

class GeneralErrorBoundary extends React.Component&lt;
  ErrorBoundaryProps,
  ErrorBoundaryState
&gt; {
  public state: ErrorBoundaryState = {
    hasError: false,
    error: null,
    errorInfo: null,
    feedback: &apos;&apos;,
    feedbackCategory: &apos;ui&apos;,
    showDetails: false
  };

  public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {
    this.setState({ hasError: true, error, errorInfo });
    this.props.onCatch?.(error, errorInfo);
    if (this.props.logger &amp;&amp; errorInfo.componentStack) {
      this.props.logger(error, errorInfo.componentStack);
    }
  }

  public handleFeedbackChange = (value: string): void =&gt; {
    this.setState({ feedback: value });
  };

  public handleFeedbackCategoryChange = (value: string): void =&gt; {
    this.setState({ feedbackCategory: value });
  };

  public toggleDetails = (): void =&gt; {
    this.setState((prevState) =&gt; ({ showDetails: !prevState.showDetails }));
  };

  public retry = (): void =&gt; {
    window.location.reload();
  };

  public handleSubmitFeedback = (e: React.FormEvent): void =&gt; {
    e.preventDefault();
    const { error, errorInfo, feedback, feedbackCategory } = this.state;

    console.log(&apos;Error Feedback:&apos;, {
      feedback,
      category: feedbackCategory,
      errorMessage: error?.message,
      errorStack: errorInfo?.componentStack
    });
  };

  public render(): React.ReactNode {
    const { children } = this.props;
    const {
      hasError,
      showDetails,
      feedback,
      feedbackCategory,
      error,
      errorInfo
    } = this.state;

    if (!hasError) {
      return children;
    }

    return (
      &lt;div className=&quot;flex flex-col items-center justify-center min-h-screen p-6 bg-background&quot;&gt;
        &lt;div className=&quot;w-full max-w-md space-y-6 rounded-lg border bg-card p-6 shadow-lg&quot;&gt;
          &lt;div className=&quot;flex flex-col items-center gap-4&quot;&gt;
            &lt;AlertTriangle className=&quot;h-12 w-12 text-destructive&quot; /&gt;
            &lt;h2 className=&quot;text-2xl font-semibold&quot;&gt;
              Oops! Something went wrong.
            &lt;/h2&gt;
          &lt;/div&gt;

          &lt;Collapsible open={showDetails} onOpenChange={this.toggleDetails}&gt;
            &lt;CollapsibleTrigger asChild&gt;
              &lt;Button variant=&quot;outline&quot; className=&quot;w-full&quot;&gt;
                {showDetails ? &apos;Hide Details&apos; : &apos;Show Details&apos;}
              &lt;/Button&gt;
            &lt;/CollapsibleTrigger&gt;
            &lt;CollapsibleContent className=&quot;mt-4 space-y-2&quot;&gt;
              &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;
                Error: {error?.message}
              &lt;/p&gt;
              {errorInfo &amp;&amp; (
                &lt;pre className=&quot;whitespace-pre-wrap text-xs text-muted-foreground&quot;&gt;
                  {errorInfo.componentStack}
                &lt;/pre&gt;
              )}
            &lt;/CollapsibleContent&gt;
          &lt;/Collapsible&gt;

          &lt;form onSubmit={this.handleSubmitFeedback} className=&quot;space-y-4&quot;&gt;
            &lt;Select
              value={feedbackCategory}
              onValueChange={this.handleFeedbackCategoryChange}
            &gt;
              &lt;SelectTrigger&gt;
                &lt;SelectValue placeholder=&quot;Select category&quot; /&gt;
              &lt;/SelectTrigger&gt;
              &lt;SelectContent&gt;
                &lt;SelectItem value=&quot;ui&quot;&gt;UI Issue&lt;/SelectItem&gt;
                &lt;SelectItem value=&quot;functionality&quot;&gt;
                  Functionality Error
                &lt;/SelectItem&gt;
                &lt;SelectItem value=&quot;performance&quot;&gt;Performance Issue&lt;/SelectItem&gt;
              &lt;/SelectContent&gt;
            &lt;/Select&gt;

            &lt;Textarea
              value={feedback}
              onChange={(e) =&gt; this.handleFeedbackChange(e.target.value)}
              placeholder=&quot;Describe the issue...&quot;
              className=&quot;min-h-[100px]&quot;
            /&gt;

            &lt;Button type=&quot;submit&quot; className=&quot;w-full&quot;&gt;
              Submit Feedback
            &lt;/Button&gt;
          &lt;/form&gt;

          &lt;Button variant=&quot;secondary&quot; className=&quot;w-full&quot; onClick={this.retry}&gt;
            Retry
          &lt;/Button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}

export default GeneralErrorBoundary;</file><file path="app/components/landingpage/Banner.tsx">&apos;use client&apos;;

import React from &apos;react&apos;;
import Image from &apos;next/image&apos;;
import Link from &apos;next/link&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Card, CardContent } from &apos;@/components/ui/card&apos;;
import { Shield, Zap, Code2, Cloud, GitBranch } from &apos;lucide-react&apos;;
import FrontPageImage from &apos;@/public/images/imageauth.jpg&apos;;
import { cn } from &apos;@/lib/utils&apos;;

interface BannerProps {
  session: boolean | null;
  userEmail?: string | null;
}

interface FeatureProps {
  Icon: React.ComponentType&lt;{ className?: string }&gt;;
  title: string;
  description: string;
}

const Feature: React.FC&lt;FeatureProps&gt; = ({ Icon, title, description }) =&gt; (
  &lt;div className=&quot;flex items-center gap-3&quot;&gt;
    &lt;Icon className=&quot;h-5 w-5 text-primary&quot; /&gt;
    &lt;div&gt;
      &lt;h3 className=&quot;font-semibold&quot;&gt;{title}&lt;/h3&gt;
      &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{description}&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
);

const BannerComponent: React.FC&lt;BannerProps&gt; = ({ session, userEmail }) =&gt; {
  return (
    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-12 gap-8 p-16 bg-muted/50&quot;&gt;
      {}
      &lt;div className=&quot;md:col-span-8&quot;&gt;
        &lt;div className=&quot;relative w-[60%] h-[600px] rounded-lg overflow-hidden&quot;&gt;
          &lt;Image
            src={FrontPageImage}
            fill
            alt=&quot;Background&quot;
            className=&quot;object-cover object-center&quot;
          /&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      {}
      &lt;div className=&quot;md:col-span-4 space-y-6&quot;&gt;
        &lt;div className=&quot;space-y-2&quot;&gt;
          &lt;h1 className=&quot;text-3xl font-bold text-primary&quot;&gt;
            {session
              ? `Welcome back, ${userEmail || &apos;User&apos;}!`
              : &apos;Empower Your Next.js App with Supabase Auth&apos;}
          &lt;/h1&gt;
          &lt;p className=&quot;text-muted-foreground&quot;&gt;
            {session
              ? &apos;Dive into the enhanced features and capabilities tailored for your development.&apos;
              : &apos;Our library seamlessly integrates with Next.js 14, offering server-side rendering support and efficient data fetching with React Server Components.&apos;}
          &lt;/p&gt;
        &lt;/div&gt;

        &lt;Card className=&quot;border-none shadow-none bg-transparent&quot;&gt;
          &lt;CardContent className=&quot;p-0 space-y-4&quot;&gt;
            &lt;Feature
              Icon={Shield}
              title=&quot;Enhanced Security&quot;
              description=&quot;State-of-the-art security for your apps.&quot;
            /&gt;
            &lt;Feature
              Icon={Zap}
              title=&quot;Blazing Fast&quot;
              description=&quot;Optimized for speed, making your apps run smoother.&quot;
            /&gt;
            &lt;Feature
              Icon={Code2}
              title=&quot;Developer Friendly&quot;
              description=&quot;Easy to use API and thorough documentation.&quot;
            /&gt;
            &lt;Feature
              Icon={Cloud}
              title=&quot;Cloud Integration&quot;
              description=&quot;Seamless cloud capabilities with Supabase.&quot;
            /&gt;
            &lt;Feature
              Icon={GitBranch}
              title=&quot;Easy Integration&quot;
              description=&quot;Simple steps to integrate with your Next.js app.&quot;
            /&gt;
          &lt;/CardContent&gt;
        &lt;/Card&gt;

        &lt;Button asChild size=&quot;lg&quot; className=&quot;w-full md:w-auto&quot;&gt;
          &lt;Link href={session ? &apos;/dashboard&apos; : &apos;#get-started&apos;}&gt;
            {session ? &apos;Explore Dashboard&apos; : &apos;Get Started Now&apos;}
          &lt;/Link&gt;
        &lt;/Button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default BannerComponent;</file><file path="app/components/landingpage/FeatureCard.tsx">&apos;use client&apos;;

import React from &apos;react&apos;;
import Link from &apos;next/link&apos;;
import { Card, CardContent } from &apos;@/components/ui/card&apos;;
import { Separator } from &apos;@/components/ui/separator&apos;;
import { cn } from &apos;@/lib/utils&apos;;

const features = [
  {
    title: &apos;Advanced AI Integration&apos;,
    description:
      &apos;Leverage state-of-the-art AI capabilities for enhanced NLP features and efficient data retrieval.&apos;,
    Icon: &apos;🤖&apos;
  },
  {
    title: &apos;Real-time Updates&apos;,
    description:
      &apos;Stay informed with real-time data sourced from reputable sources, ensuring you have the most recent updates.&apos;,
    Icon: &apos;🔄&apos;
  },
  {
    title: &apos;Deep Insights&apos;,
    description:
      &apos;Dive deep into the data, understanding intricate patterns and insights that can help drive informed decisions.&apos;,
    Icon: &apos;📚&apos;
  },
  {
    title: &apos;Guidelines &amp; Protocols&apos;,
    description:
      &apos;Stay informed about organizational structures, guidelines, and best practices to ensure smooth operations.&apos;,
    Icon: &apos;🔐&apos;
  },
  {
    title: &apos;Absence Policies&apos;,
    description:
      &apos;Know the protocol for leaves, attendance, sick days, and other related matters for smooth workflow.&apos;,
    Icon: &apos;📅&apos;
  },
  {
    title: &apos;Financial Information&apos;,
    description: (
      &lt;&gt;
        Stay informed about financial regulations, provisions, and insights.
        Learn more at{&apos; &apos;}
        &lt;Link href=&quot;#models&quot; className=&quot;text-primary hover:underline&quot;&gt;
          Financial Info
        &lt;/Link&gt;
        .
      &lt;/&gt;
    ),
    Icon: &apos;💰&apos;
  }
];

export default function FeatureCard() {
  return (
    &lt;section id=&quot;models&quot; className=&quot;py-12 md:py-24 max-w-[1800px] mx-auto px-4&quot;&gt;
      &lt;div className=&quot;text-center mb-16 space-y-4&quot;&gt;
        &lt;h2 className=&quot;text-4xl font-bold font-mono tracking-wide bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent&quot;&gt;
          Discover Our Features
        &lt;/h2&gt;
        &lt;p className=&quot;text-lg font-bold font-mono tracking-tight max-w-2xl mx-auto text-muted-foreground&quot;&gt;
          Harnessing Advanced AI for Better Insights and Efficient Operations
        &lt;/p&gt;
      &lt;/div&gt;

      &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-10&quot;&gt;
        {features.map((feature, index) =&gt; (
          &lt;Card
            key={index}
            className=&quot;p-6 text-center rounded-xl border-muted h-full min-h-[350px] flex flex-col justify-center hover:shadow-lg transition-shadow&quot;
          &gt;
            &lt;CardContent className=&quot;space-y-4 p-0&quot;&gt;
              &lt;div className=&quot;text-5xl opacity-90 p-3&quot;&gt;{feature.Icon}&lt;/div&gt;
              &lt;h3 className=&quot;text-lg font-bold text-primary&quot;&gt;
                {feature.title}
              &lt;/h3&gt;
              &lt;Separator className=&quot;mx-auto w-1/2&quot; /&gt;
              &lt;p className=&quot;text-sm text-muted-foreground mt-3&quot;&gt;
                {feature.description}
              &lt;/p&gt;
            &lt;/CardContent&gt;
          &lt;/Card&gt;
        ))}
      &lt;/div&gt;
    &lt;/section&gt;
  );
}</file><file path="app/components/landingpage/Profile.tsx">&apos;use client&apos;;

import React from &apos;react&apos;;
import Image from &apos;next/image&apos;;
import Link from &apos;next/link&apos;;
import { Card, CardContent } from &apos;@/components/ui/card&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Badge } from &apos;@/components/ui/badge&apos;;
import { Linkedin, Github, Mail } from &apos;lucide-react&apos;;

const UserProfileComponent = () =&gt; {
  return (
    &lt;Card className=&quot;max-w-[1800px] mx-auto my-4 p-6&quot;&gt;
      &lt;CardContent className=&quot;p-0&quot;&gt;
        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-12 gap-8&quot;&gt;
          {}
          &lt;div className=&quot;md:col-span-4 flex flex-col items-center&quot;&gt;
            &lt;Image
              src=&quot;https://randomuser.me/api/portraits/men/72.jpg&quot;
              alt=&quot;BoardAI Team Lead&quot;
              height={140}
              width={140}
              className=&quot;rounded-full&quot;
              priority
            /&gt;

            &lt;h2 className=&quot;text-2xl font-bold text-primary mt-4 mb-2&quot;&gt;
              BoardAI Team
            &lt;/h2&gt;

            &lt;div className=&quot;flex gap-4 mb-6&quot;&gt;
              &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; asChild&gt;
                &lt;Link
                  href=&quot;https://www.linkedin.com/company/boardai&quot;
                  target=&quot;_blank&quot;
                  rel=&quot;noopener noreferrer&quot;
                  className=&quot;text-primary hover:text-primary/80&quot;
                &gt;
                  &lt;Linkedin className=&quot;h-6 w-6&quot; /&gt;
                &lt;/Link&gt;
              &lt;/Button&gt;
              &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; asChild&gt;
                &lt;Link
                  href=&quot;https://github.com/boardai&quot;
                  target=&quot;_blank&quot;
                  rel=&quot;noopener noreferrer&quot;
                  className=&quot;text-primary hover:text-primary/80&quot;
                &gt;
                  &lt;Github className=&quot;h-6 w-6&quot; /&gt;
                &lt;/Link&gt;
              &lt;/Button&gt;
              &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; asChild&gt;
                &lt;Link
                  href=&quot;mailto:contact@boardai.com&quot;
                  className=&quot;text-primary hover:text-primary/80&quot;
                &gt;
                  &lt;Mail className=&quot;h-6 w-6&quot; /&gt;
                &lt;/Link&gt;
              &lt;/Button&gt;
            &lt;/div&gt;
          &lt;/div&gt;

          {}
          &lt;div className=&quot;md:col-span-8 space-y-6&quot;&gt;
            &lt;div className=&quot;space-y-2&quot;&gt;
              &lt;h3 className=&quot;text-xl font-bold text-primary&quot;&gt;About Our Team&lt;/h3&gt;
              &lt;p className=&quot;text-muted-foreground&quot;&gt;
                Based in Copenhagen, we are a dedicated team of AI and
                compliance experts focused on revolutionizing board document
                analysis. Our mission is to enhance board efficiency and reduce
                liability through intelligent document processing. Using
                state-of-the-art AI technology, we help board members make
                informed decisions by automatically detecting inconsistencies,
                highlighting key insights, and ensuring comprehensive analysis
                of board materials.
              &lt;/p&gt;
            &lt;/div&gt;

            &lt;div className=&quot;space-y-2&quot;&gt;
              &lt;h4 className=&quot;text-lg font-bold text-primary&quot;&gt;
                Core Competencies
              &lt;/h4&gt;
              &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;
                {[
                  &apos;AI-Powered Document Analysis&apos;,
                  &apos;Board Compliance&apos;,
                  &apos;Risk Assessment&apos;,
                  &apos;ESG Reporting&apos;,
                  &apos;Corporate Governance&apos;,
                  &apos;Vector Database&apos;,
                  &apos;LLM Integration&apos;,
                  &apos;Data Security&apos;,
                  &apos;Audit Trails&apos;,
                  &apos;Document Processing&apos;,
                  &apos;Real-time Analytics&apos;,
                  &apos;Automated Reporting&apos;
                ].map((skill, index) =&gt; (
                  &lt;Badge
                    key={index}
                    variant=&quot;outline&quot;
                    className=&quot;text-primary hover:bg-primary/10&quot;
                  &gt;
                    {skill}
                  &lt;/Badge&gt;
                ))}
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/CardContent&gt;
    &lt;/Card&gt;
  );
};

export default UserProfileComponent;</file><file path="app/components/landingpage/Testimonials.tsx">&apos;use client&apos;;

import React from &apos;react&apos;;
import Image from &apos;next/image&apos;;
import { Card, CardContent } from &apos;@/components/ui/card&apos;;
import { Avatar, AvatarImage } from &apos;@/components/ui/avatar&apos;;
import ChikenImage from &apos;@/public/images/chiken image.jpg&apos;;

const testimonials = [
  {
    name: &apos;Anders Nielsen&apos;,
    role: &apos;Board Member, Tech Innovation A/S&apos;,
    avatar: ChikenImage.src,
    content:
      &apos;The AI-powered analysis has transformed how we review board materials. It catches inconsistencies we might have missed and saves hours of manual review time.&apos;
  },
  {
    name: &apos;Marie Schmidt&apos;,
    role: &apos;Audit Committee Chair, Danish Retail Group&apos;,
    avatar: ChikenImage.src,
    content:
      &quot;The automated detection of data inconsistencies and the detailed audit trails have significantly improved our due diligence process. It&apos;s an invaluable tool for compliance.&quot;
  },
  {
    name: &apos;Lars Jensen&apos;,
    role: &apos;Corporate Secretary, Copenhagen Logistics&apos;,
    avatar: ChikenImage.src,
    content:
      &apos;This platform streamlines our board document management process. The AI insights and traceable reports make my job as a corporate secretary much more efficient.&apos;
  },
  {
    name: &apos;Sofie Andersen&apos;,
    role: &apos;Board Director, Sustainable Energy Denmark&apos;,
    avatar: ChikenImage.src,
    content:
      &quot;The platform&apos;s ability to analyze complex documentation and highlight potential issues has enhanced our decision-making process. It&apos;s particularly helpful for ESG compliance.&quot;
  },
  {
    name: &apos;Henrik Petersen&apos;,
    role: &apos;Compliance Officer, Danish Financial Services&apos;,
    avatar: ChikenImage.src,
    content:
      &apos;The automated analysis and report generation features have revolutionized our compliance workflows. It provides clear, actionable insights with full traceability.&apos;
  },
  {
    name: &apos;Emma Thomsen&apos;,
    role: &apos;Board Member, Danish Tech Council&apos;,
    avatar: ChikenImage.src,
    content:
      &apos;As a board member reviewing multiple companies, this tool has been transformative. It helps identify critical issues quickly and ensures nothing important is overlooked.&apos;
  }
];

const Testimonials: React.FC = () =&gt; {
  return (
    &lt;section id=&quot;testimonials&quot; className=&quot;max-w-[1800px] mx-auto my-8 px-4&quot;&gt;
      &lt;div className=&quot;text-center mb-12 space-y-4&quot;&gt;
        &lt;h2 className=&quot;text-4xl font-bold font-mono tracking-wide bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent&quot;&gt;
          Trusted by Danish Board Members
        &lt;/h2&gt;
        &lt;p className=&quot;text-lg font-bold font-mono tracking-tight max-w-2xl mx-auto text-muted-foreground&quot;&gt;
          Enhancing Board Efficiency and Reducing Liability Through AI-Powered
          Analysis
        &lt;/p&gt;
      &lt;/div&gt;

      &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6&quot;&gt;
        {testimonials.map((testimonial, index) =&gt; (
          &lt;Card
            key={index}
            className=&quot;flex flex-col justify-between p-6 hover:shadow-lg transition-shadow&quot;
          &gt;
            &lt;CardContent className=&quot;p-0 space-y-6&quot;&gt;
              &lt;blockquote className=&quot;text-muted-foreground&quot;&gt;
                &amp;ldquo;{testimonial.content}&amp;rdquo;
              &lt;/blockquote&gt;

              &lt;div className=&quot;flex items-center gap-4&quot;&gt;
                &lt;Avatar&gt;
                  &lt;AvatarImage
                    src={testimonial.avatar}
                    alt={testimonial.name}
                  /&gt;
                &lt;/Avatar&gt;
                &lt;div&gt;
                  &lt;p className=&quot;font-semibold&quot;&gt;{testimonial.name}&lt;/p&gt;
                  &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;
                    {testimonial.role}
                  &lt;/p&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/CardContent&gt;
          &lt;/Card&gt;
        ))}
      &lt;/div&gt;
    &lt;/section&gt;
  );
};

export default Testimonials;</file><file path="app/components/ui/Footer/Footer.tsx">&apos;use client&apos;;
import React from &apos;react&apos;;
import Link from &apos;next/link&apos;;
import { usePathname } from &apos;next/navigation&apos;;
import { Linkedin, Youtube } from &apos;lucide-react&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Separator } from &apos;@/components/ui/separator&apos;;

const Footer: React.FC = () =&gt; {
  const pathname = usePathname();

  if (pathname.startsWith(&apos;/aichat&apos;) || pathname.startsWith(&apos;/actionchat&apos;)) {
    return null;
  }

  return (
    &lt;footer className=&quot;mt-auto bg-background-900 text-white&quot;&gt;
      &lt;div className=&quot;mx-auto max-w-7xl px-4 pt-4&quot;&gt;
        &lt;div className=&quot;grid grid-cols-1 gap-8 md:grid-cols-3&quot;&gt;
          {}
          &lt;div className=&quot;flex flex-col gap-2&quot;&gt;
            &lt;h5 className=&quot;text-xl font-semibold&quot;&gt;Contact&lt;/h5&gt;
            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;
              Example Company Name
            &lt;/p&gt;
            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;
              123 Example Street, City 12345
            &lt;/p&gt;
            &lt;p className=&quot;text-sm text-muted-foreground mb-2&quot;&gt;ID: 12345678&lt;/p&gt;
            &lt;Link
              href=&quot;#&quot;
              className=&quot;text-sm text-blue-300 hover:text-blue-400&quot;
            &gt;
              Privacy Policy
            &lt;/Link&gt;
            &lt;Link
              href=&quot;#&quot;
              className=&quot;text-sm text-blue-300 hover:text-blue-400&quot;
            &gt;
              Terms of Service
            &lt;/Link&gt;
          &lt;/div&gt;

          {}
          &lt;div className=&quot;flex flex-col gap-2&quot;&gt;
            &lt;h5 className=&quot;text-xl font-semibold&quot;&gt;Information:&lt;/h5&gt;
            &lt;Link
              href=&quot;#&quot;
              className=&quot;text-sm text-blue-300 hover:text-blue-400&quot;
            &gt;
              About Us
            &lt;/Link&gt;
            &lt;Link
              href=&quot;#&quot;
              className=&quot;text-sm text-blue-300 hover:text-blue-400&quot;
            &gt;
              Services
            &lt;/Link&gt;
            &lt;Link
              href=&quot;#&quot;
              className=&quot;text-sm text-blue-300 hover:text-blue-400&quot;
            &gt;
              FAQ
            &lt;/Link&gt;
            &lt;Link
              href=&quot;#&quot;
              className=&quot;text-sm text-blue-300 hover:text-blue-400&quot;
            &gt;
              How It Works
            &lt;/Link&gt;
            &lt;Link
              href=&quot;#&quot;
              className=&quot;text-sm text-blue-300 hover:text-blue-400&quot;
            &gt;
              Support
            &lt;/Link&gt;
          &lt;/div&gt;

          {}
          &lt;div className=&quot;flex flex-col gap-2&quot;&gt;
            &lt;h5 className=&quot;text-xl font-semibold&quot;&gt;
              Subscribe to Our Newsletter
            &lt;/h5&gt;
            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;
              📧 Regular updates about our services
            &lt;/p&gt;
            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;
              🔔 Special offers and promotions
            &lt;/p&gt;
            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;
              💼 Industry news and insights
            &lt;/p&gt;
            &lt;Button className=&quot;mt-4 w-fit&quot; variant=&quot;default&quot;&gt;
              Subscribe Now
            &lt;/Button&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;Separator className=&quot;my-4&quot; /&gt;

        {}
        &lt;div className=&quot;flex flex-col items-center justify-between gap-4 pb-4 md:flex-row&quot;&gt;
          &lt;Link
            href=&quot;#&quot;
            className=&quot;text-sm text-muted-foreground hover:text-white&quot;
          &gt;
            Example Company © {new Date().getFullYear()}
          &lt;/Link&gt;

          &lt;div className=&quot;flex gap-2&quot;&gt;
            &lt;Button
              variant=&quot;ghost&quot;
              size=&quot;icon&quot;
              className=&quot;hover:bg-white/10&quot;
              asChild
            &gt;
              &lt;Link href=&quot;#&quot; aria-label=&quot;LinkedIn&quot;&gt;
                &lt;Linkedin className=&quot;h-5 w-5&quot; /&gt;
              &lt;/Link&gt;
            &lt;/Button&gt;
            &lt;Button
              variant=&quot;ghost&quot;
              size=&quot;icon&quot;
              className=&quot;hover:bg-white/10&quot;
              asChild
            &gt;
              &lt;Link href=&quot;#&quot; aria-label=&quot;YouTube&quot;&gt;
                &lt;Youtube className=&quot;h-5 w-5&quot; /&gt;
              &lt;/Link&gt;
            &lt;/Button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/footer&gt;
  );
};

export default Footer;</file><file path="app/components/ui/Navbar/Signout.tsx">import React from &apos;react&apos;;
import { LogOut } from &apos;lucide-react&apos;;
import { signout } from &apos;@/app/(auth)/action&apos;;
import { useFormStatus } from &apos;react-dom&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Loader2 } from &apos;lucide-react&apos;;

export default function SignOut() {
  return (
    &lt;form action={signout} className=&quot;flex justify-center&quot;&gt;
      &lt;SubmitButton /&gt;
    &lt;/form&gt;
  );
}

function SubmitButton() {
  const { pending } = useFormStatus();
  return (
    &lt;Button
      type=&quot;submit&quot;
      variant=&quot;outline&quot;
      disabled={pending}
      className=&quot;w-full rounded-full&quot;
    &gt;
      {pending ? (
        &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;
      ) : (
        &lt;&gt;
          &lt;LogOut className=&quot;mr-2 h-4 w-4&quot; /&gt;
          Sign out
        &lt;/&gt;
      )}
    &lt;/Button&gt;
  );
}</file><file path="app/components/ui/Navbar/SitemarkIcon.tsx">import React from &apos;react&apos;;

export default function SitemarkIcon() {
  return (
    &lt;div className=&quot;h-[21px] w-[100px] mr-2&quot;&gt;
      &lt;svg
        width={86}
        height={19}
        viewBox=&quot;0 0 86 19&quot;
        fill=&quot;none&quot;
        xmlns=&quot;http://www.w3.org/2000/svg&quot;
        className=&quot;h-full w-full&quot;
      &gt;
        {}
        &lt;path
          d=&quot;M10 2C6.13401 2 3 5.13401 3 9C3 12.866 6.13401 16 10 16C13.866 16 17 12.866 17 9C17 5.13401 13.866 2 10 2Z&quot;
          fill=&quot;#4876EF&quot;
        /&gt;
        {}
        &lt;circle cx=&quot;7&quot; cy=&quot;8&quot; r=&quot;1.5&quot; fill=&quot;white&quot; /&gt;
        &lt;circle cx=&quot;13&quot; cy=&quot;8&quot; r=&quot;1.5&quot; fill=&quot;white&quot; /&gt;
        {}
        &lt;path
          d=&quot;M10 1L10 4&quot;
          stroke=&quot;#4876EF&quot;
          strokeWidth=&quot;1.5&quot;
          strokeLinecap=&quot;round&quot;
        /&gt;
        {}
        &lt;path
          d=&quot;M7 11C7.5 12 8.5 13 10 13C11.5 13 12.5 12 13 11&quot;
          stroke=&quot;white&quot;
          strokeWidth=&quot;1.5&quot;
          strokeLinecap=&quot;round&quot;
        /&gt;
        {}
        &lt;text
          x=&quot;24&quot;
          y=&quot;13&quot;
          fill=&quot;#4876EF&quot;
          fontFamily=&quot;Arial&quot;
          fontSize=&quot;12&quot;
          fontWeight=&quot;bold&quot;
        &gt;
          Board Assistant
        &lt;/text&gt;
      &lt;/svg&gt;
    &lt;/div&gt;
  );
}</file><file path="app/components/ui/SnackbarMessage.tsx">&apos;use client&apos;;
import React from &apos;react&apos;;
import { useSearchParams, useRouter } from &apos;next/navigation&apos;;
import { X } from &apos;lucide-react&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { cn } from &apos;@/lib/utils&apos;;
import { Toaster } from &apos;@/components/ui/toaster&apos;;
import { useToast } from &apos;@/components/ui/use-toast&apos;;

export default function SnackbarMessages() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const { toast } = useToast();

  const error = searchParams.get(&apos;error&apos;);
  const message = searchParams.get(&apos;message&apos;);

  React.useEffect(() =&gt; {
    if (error || message) {
      toast({
        variant: error ? &apos;destructive&apos; : &apos;default&apos;,
        title: error ? &apos;Error&apos; : &apos;Success&apos;,
        description: error
          ? decodeURIComponent(error)
          : decodeURIComponent(message!),
        action: (
          &lt;Button
            variant=&quot;outline&quot;
            size=&quot;icon&quot;
            onClick={() =&gt; {
              const currentParams = new URLSearchParams(window.location.search);
              currentParams.delete(&apos;error&apos;);
              currentParams.delete(&apos;message&apos;);
              const newPath =
                window.location.pathname + &apos;?&apos; + currentParams.toString();
              router.replace(newPath);
            }}
          &gt;
            &lt;X className=&quot;h-4 w-4&quot; /&gt;
          &lt;/Button&gt;
        ),
        className: cn(&apos;fixed bottom-4 right-4&apos;, &apos;min-w-[300px]&apos;, &apos;shadow-lg&apos;),
        duration: 6000
      });
    }
  }, [error, message, router, toast]);

  return &lt;Toaster /&gt;;
}</file><file path="app/documents/page.tsx">import { redirect } from &apos;next/navigation&apos;;
import { db } from &apos;../db&apos;;
import { documents } from &apos;@/schema&apos;;
import { DocumentUpload } from &apos;@/components/document-upload&apos;;
import { DocumentAnalysis } from &apos;@/components/document-analysis&apos;;
import { createClient } from &apos;@/lib/client/client&apos;;
import { cookies } from &apos;next/headers&apos;;

export default async function DocumentsPage() {
  const cookieStore = cookies();
  const supabase = await createClient();

  const {
    data: { session }
  } = await supabase.auth.getSession();

  if (!session?.user) redirect(&apos;/login&apos;);

  const userDocuments = await db.query.documents.findMany({
    where: (documents, { eq }) =&gt; eq(documents.userId, session.user.id),
    orderBy: (documents, { desc }) =&gt; [desc(documents.createdAt)],
    with: {
      analysis: {
        orderBy: (analysis, { desc }) =&gt; [desc(analysis.submittedAt)]
      }
    }
  });

  return (
    &lt;div className=&quot;container mx-auto py-8 space-y-8&quot;&gt;
      &lt;div className=&quot;flex flex-col items-center justify-center&quot;&gt;
        &lt;h1 className=&quot;text-3xl font-bold mb-2&quot;&gt;Board Documents&lt;/h1&gt;
        &lt;p className=&quot;text-muted-foreground mb-8&quot;&gt;
          Upload and analyze your board documents
        &lt;/p&gt;
        &lt;DocumentUpload /&gt;
      &lt;/div&gt;

      &lt;div className=&quot;grid gap-6&quot;&gt;
        {userDocuments.map((document) =&gt; (
          &lt;DocumentAnalysis key={document.documentId} document={document} /&gt;
        ))}
        {userDocuments.length === 0 &amp;&amp; (
          &lt;div className=&quot;text-center text-muted-foreground&quot;&gt;
            No documents uploaded yet. Upload your first document to get
            started.
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    &lt;/div&gt;
  );
}</file><file path="app/protected/page.tsx">import &apos;server-only&apos;;
import { getUserInfo } from &apos;@/lib/server/supabase&apos;;
import {
  Card,
  CardHeader,
  CardContent,
  CardDescription
} from &apos;@/components/ui/card&apos;;
import { Avatar, AvatarFallback } from &apos;@/components/ui/avatar&apos;;
import { Mail, User, MapPin, Calendar, Info } from &apos;lucide-react&apos;;
import { format } from &apos;date-fns&apos;;
import { redirect } from &apos;next/navigation&apos;;

export default async function ProtectedPage() {
  const userInfo = await getUserInfo();
  if (!userInfo) {
    redirect(&apos;/signin&apos;);
  }




  const userAttributes = {
    location: &apos;New York, USA&apos;,
    joinDate: format(new Date(), &apos;PPP&apos;),
    bio: &apos;Developer with a passion for web technologies and open source. Loves exploring new techniques and collaborating on global projects.&apos;
  };

  return (
    &lt;Card className=&quot;max-w-[600px] w-full mx-auto mt-auto&quot;&gt;
      &lt;CardHeader className=&quot;flex flex-col items-center space-y-4&quot;&gt;
        &lt;Avatar className=&quot;h-14 w-14&quot;&gt;
          &lt;AvatarFallback&gt;
            &lt;User className=&quot;h-6 w-6&quot; /&gt;
          &lt;/AvatarFallback&gt;
        &lt;/Avatar&gt;
        &lt;div className=&quot;space-y-1 text-center&quot;&gt;
          &lt;h2 className=&quot;text-2xl font-semibold&quot;&gt;
            Welcome, {userInfo.full_name}
          &lt;/h2&gt;
          &lt;CardDescription&gt;{userAttributes.bio}&lt;/CardDescription&gt;
        &lt;/div&gt;
      &lt;/CardHeader&gt;

      &lt;CardContent&gt;
        &lt;div className=&quot;space-y-4&quot;&gt;
          &lt;div className=&quot;flex items-center gap-3&quot;&gt;
            &lt;Mail className=&quot;h-5 w-5 text-muted-foreground flex-shrink-0&quot; /&gt;
            &lt;span&gt;{userInfo.email}&lt;/span&gt;
          &lt;/div&gt;

          &lt;div className=&quot;flex items-center gap-3&quot;&gt;
            &lt;MapPin className=&quot;h-5 w-5 text-muted-foreground flex-shrink-0&quot; /&gt;
            &lt;span&gt;{userAttributes.location}&lt;/span&gt;
          &lt;/div&gt;

          &lt;div className=&quot;flex items-center gap-3&quot;&gt;
            &lt;Calendar className=&quot;h-5 w-5 text-muted-foreground flex-shrink-0&quot; /&gt;
            &lt;span&gt;Joined: {userAttributes.joinDate}&lt;/span&gt;
          &lt;/div&gt;

          &lt;div className=&quot;flex items-center gap-3&quot;&gt;
            &lt;Info className=&quot;h-5 w-5 text-muted-foreground flex-shrink-0&quot; /&gt;
            &lt;span&gt;Member Status: Active&lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/CardContent&gt;
    &lt;/Card&gt;
  );
}</file><file path="app/redirect/auth-password-update/action.ts">&apos;use server&apos;;

import { z } from &apos;zod&apos;;
import { redirect } from &apos;next/navigation&apos;;
import { createServerSupabaseClient } from &apos;@/lib/server/server&apos;;

const passwordValidation = z
  .string()
  .min(6, &apos;Password must be at least 6 characters long&apos;)
  .regex(/^(?=.*[a-z])/, &apos;Password must contain at least one lowercase letter&apos;)
  .regex(/^(?=.*[A-Z])/, &apos;Password must contain at least one uppercase letter&apos;)
  .regex(/^(?=.*\d)/, &apos;Password must contain at least one number&apos;);

const formDataSchemaResetPassword = z.object({
  newPassword: passwordValidation
});

export async function resetPassword(formData: FormData) {
  const supabase = await createServerSupabaseClient();

  const result = formDataSchemaResetPassword.safeParse({
    newPassword: formData.get(&apos;newPassword&apos;)
      ? String(formData.get(&apos;newPassword&apos;))
      : &apos;&apos;
  });

  if (!result.success) {
    const fieldErrors = result.error.formErrors.fieldErrors;
    let errorMessage = &apos;Invalid input&apos;;
    if (fieldErrors.newPassword) {
      const passwordErrors = fieldErrors.newPassword;
      if (Array.isArray(passwordErrors)) {
        errorMessage = passwordErrors[0];
      } else {
        errorMessage = passwordErrors;
      }
    }
    redirect(
      &apos;/redirect/auth-password-update?error=&apos; + encodeURIComponent(errorMessage)
    );
  }

  const { newPassword } = result.data;

  const { error } = await supabase.auth.updateUser({
    password: newPassword
  });

  if (error) {
    redirect(
      &apos;/redirect/auth-password-update?error=&apos; +
        encodeURIComponent(&apos;An error occurred while updating the password&apos;)
    );
  }

  redirect(
    &apos;/signin?message=&apos; + encodeURIComponent(&apos;Your password has been updated&apos;)
  );
}</file><file path="app/redirect/auth-password-update/messages.tsx">import React from &apos;react&apos;;
import { useSearchParams } from &apos;next/navigation&apos;;
import { Alert, AlertDescription } from &apos;@/components/ui/alert&apos;;
import { AlertCircle, Info } from &apos;lucide-react&apos;;

export default function Messages() {
  const searchParams = useSearchParams();
  const error = searchParams.get(&apos;error&apos;);
  const message = searchParams.get(&apos;message&apos;);

  return (
    &lt;div className=&quot;w-full flex flex-col items-center&quot;&gt;
      {error &amp;&amp; (
        &lt;Alert variant=&quot;destructive&quot; className=&quot;max-w-[90%]&quot;&gt;
          &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;
          &lt;AlertDescription&gt;
            {decodeURIComponent(error)}
          &lt;/AlertDescription&gt;
        &lt;/Alert&gt;
      )}
      {message &amp;&amp; (
        &lt;Alert className=&quot;max-w-[90%]&quot;&gt;
          &lt;Info className=&quot;h-4 w-4&quot; /&gt;
          &lt;AlertDescription&gt;
            {decodeURIComponent(message)}
          &lt;/AlertDescription&gt;
        &lt;/Alert&gt;
      )}
    &lt;/div&gt;
  );
}</file><file path="app/redirect/auth-password-update/page.tsx">import &apos;server-only&apos;;
import React from &apos;react&apos;;
import PasswordUpdateForm from &apos;./PasswordUpdateForm&apos;;

export default function PasswordUpdatePage() {
  return &lt;PasswordUpdateForm /&gt;;
}</file><file path="app/redirect/auth-password-update/PasswordUpdateForm.tsx">&apos;use client&apos;;
import React, { useState, type FC } from &apos;react&apos;;
import { Card } from &apos;@/components/ui/card&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import { Input } from &apos;@/components/ui/input&apos;;
import { Label } from &apos;@/components/ui/label&apos;;
import { Loader2, Lock } from &apos;lucide-react&apos;;
import { resetPassword } from &apos;./action&apos;;
import { useFormStatus } from &apos;react-dom&apos;;
import Message from &apos;./messages&apos;;

const PasswordUpdateForm: FC = () =&gt; {
  const [newPassword, setNewPassword] = useState&lt;string&gt;(&apos;&apos;);
  const [confirmPassword, setConfirmPassword] = useState&lt;string&gt;(&apos;&apos;);
  const [passwordRequirements, setPasswordRequirements] = useState({
    length: false,
    uppercase: false,
    lowercase: false,
    number: false
  });

  const validatePassword = (password: string) =&gt; {
    const requirements = {
      length: password.length &gt;= 6,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      number: /[0-9]/.test(password)
    };
    setPasswordRequirements(requirements);
  };

  const handleSubmit = async (formData: FormData) =&gt; {
    if (newPassword !== confirmPassword) {
      alert(&apos;Passwords must match.&apos;);
      return;
    }
    await resetPassword(formData);
  };

  return (
    &lt;div className=&quot;flex justify-center items-center w-full max-w-[800px] mx-auto&quot;&gt;
      &lt;Card className=&quot;flex flex-col self-center rounded-2xl w-full sm:w-[350px] md:w-[500px] p-4 sm:p-6 md:p-8 shadow-lg&quot;&gt;
        &lt;h2 className=&quot;text-2xl font-semibold mb-4&quot;&gt;Update Password&lt;/h2&gt;
        &lt;form
          action={handleSubmit}
          noValidate
          className=&quot;flex flex-col w-full gap-2 sm:gap-3 md:gap-4&quot;
        &gt;
          &lt;div className=&quot;space-y-2&quot;&gt;
            &lt;Label htmlFor=&quot;newPassword&quot;&gt;New Password&lt;/Label&gt;
            &lt;div className=&quot;relative&quot;&gt;
              &lt;Lock className=&quot;absolute left-3 top-3 h-4 w-4 text-gray-500&quot; /&gt;
              &lt;Input
                id=&quot;newPassword&quot;
                type=&quot;password&quot;
                value={newPassword}
                onChange={(e) =&gt; {
                  setNewPassword(e.target.value);
                  validatePassword(e.target.value);
                }}
                autoComplete=&quot;new-password&quot;
                className=&quot;pl-10&quot;
              /&gt;
            &lt;/div&gt;
          &lt;/div&gt;

          &lt;div className=&quot;space-y-2&quot;&gt;
            &lt;Label htmlFor=&quot;confirmPassword&quot;&gt;Confirm New Password&lt;/Label&gt;
            &lt;div className=&quot;relative&quot;&gt;
              &lt;Lock className=&quot;absolute left-3 top-3 h-4 w-4 text-gray-500&quot; /&gt;
              &lt;Input
                id=&quot;confirmPassword&quot;
                type=&quot;password&quot;
                value={confirmPassword}
                onChange={(e) =&gt; setConfirmPassword(e.target.value)}
                autoComplete=&quot;new-password&quot;
                className=&quot;pl-10&quot;
              /&gt;
            &lt;/div&gt;
          &lt;/div&gt;

          &lt;Message /&gt;
          &lt;SubmitButton /&gt;
        &lt;/form&gt;
      &lt;/Card&gt;
      &lt;div className=&quot;hidden sm:flex justify-center items-center ml-8&quot;&gt;
        &lt;PasswordRequirements requirements={passwordRequirements} /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default PasswordUpdateForm;

function SubmitButton() {
  const { pending } = useFormStatus();

  return (
    &lt;div className=&quot;flex justify-center&quot;&gt;
      &lt;Button type=&quot;submit&quot; disabled={pending} className=&quot;w-[200px]&quot;&gt;
        {pending ? (
          &lt;Loader2 className=&quot;h-6 w-6 animate-spin&quot; /&gt;
        ) : (
          &apos;Update Password&apos;
        )}
      &lt;/Button&gt;
    &lt;/div&gt;
  );
}

interface PasswordRequirementsProps {
  requirements: {
    length: boolean;
    uppercase: boolean;
    lowercase: boolean;
    number: boolean;
  };
}

function PasswordRequirements({ requirements }: PasswordRequirementsProps) {
  return (
    &lt;div className=&quot;w-60 bg-white shadow rounded-2xl p-4 ml-8&quot;&gt;
      &lt;p className=&quot;font-medium mb-2&quot;&gt;Password Requirements:&lt;/p&gt;
      &lt;ul className=&quot;pl-5 m-0 space-y-1&quot;&gt;
        &lt;li className={requirements.length ? &apos;text-green-600&apos; : &apos;text-red-600&apos;}&gt;
          Length (at least 6 characters)
        &lt;/li&gt;
        &lt;li
          className={requirements.uppercase ? &apos;text-green-600&apos; : &apos;text-red-600&apos;}
        &gt;
          Uppercase letter
        &lt;/li&gt;
        &lt;li
          className={requirements.lowercase ? &apos;text-green-600&apos; : &apos;text-red-600&apos;}
        &gt;
          Lowercase letter
        &lt;/li&gt;
        &lt;li className={requirements.number ? &apos;text-green-600&apos; : &apos;text-red-600&apos;}&gt;
          Number
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  );
}</file><file path="app/globals.css">@import &apos;tailwindcss&apos;;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 5.9% 10%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}


@font-face {
  font-family: &apos;uncut sans&apos;;
  src: url(&apos;./uncut-sans.woff2&apos;) format(&apos;woff2&apos;);
  font-display: swap;
}

* {
  font-family: &apos;uncut sans&apos;, var(--font-sans), system-ui, sans-serif;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}</file><file path="app/layout.tsx">import React, { type ReactNode, Suspense } from &apos;react&apos;;
import { Metadata } from &apos;next&apos;;
import { Inter } from &apos;next/font/google&apos;;
import RootErrorBoundary from &apos;@/app/components/errorBoundary/ErrorBoundaryPage&apos;;
import { getSession } from &apos;@/lib/server/supabase&apos;;
import NavBar from &apos;@/app/components/ui/Navbar/TopBar&apos;;
import SnackbarMessages from &apos;./components/ui/SnackbarMessage&apos;;
import Footer from &apos;@/app/components/ui/Footer/Footer&apos;;
import { cn } from &apos;@/lib/utils&apos;;
import &apos;./globals.css&apos;;

const inter = Inter({
  subsets: [&apos;latin&apos;],
  variable: &apos;--font-sans&apos;
});

export const metadata: Metadata = {
  metadataBase: new URL(&apos;http://localhost:3000/&apos;),
  title: &apos;BoardAI - AI-Powered Board Document Analysis&apos;,
  description:
    &apos;Enhance board efficiency and reduce liability with AI-powered document analysis and insights.&apos;
};

export default async function RootLayout({
  children,
  modal
}: {
  children: ReactNode;
  modal: ReactNode;
}) {
  const session = await getSession();
  const isSessionAvailable = session !== null;

  return (
    &lt;html lang=&quot;en&quot; suppressHydrationWarning&gt;
      &lt;head /&gt;
      &lt;body
        className={cn(
          &apos;min-h-screen bg-background font-sans antialiased&apos;,
          inter.variable
        )}
      &gt;
        &lt;RootErrorBoundary&gt;
          &lt;div className=&quot;relative flex min-h-screen flex-col&quot;&gt;
            &lt;NavBar session={isSessionAvailable} /&gt;
            &lt;div className=&quot;flex-1&quot;&gt;{children}&lt;/div&gt;
            {modal}
            &lt;Footer /&gt;
            &lt;Suspense fallback={null}&gt;
              &lt;SnackbarMessages /&gt;
            &lt;/Suspense&gt;
          &lt;/div&gt;
        &lt;/RootErrorBoundary&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  );
}</file><file path="app/page.tsx">import &apos;server-only&apos;;
import React from &apos;react&apos;;
import BannerComponent from &apos;./components/landingpage/Banner&apos;;
import Profile from &apos;./components/landingpage/Profile&apos;;
import FeatureCard from &apos;./components/landingpage/FeatureCard&apos;;
import Testimonials from &apos;./components/landingpage/Testimonials&apos;;
import { getSession } from &apos;@/lib/server/supabase&apos;;

export default async function LandingPage() {
  const session = await getSession();
  const isSessionAvailable = session !== null;
  const userEmail = session?.email;

  return (
    &lt;&gt;
      &lt;BannerComponent session={isSessionAvailable} userEmail={userEmail} /&gt;
      &lt;FeatureCard /&gt;
      &lt;hr className=&quot;my-4 border-t border-gray-200&quot; /&gt;
      &lt;Testimonials /&gt;
      &lt;hr className=&quot;my-4 border-t border-gray-200&quot; /&gt;
      &lt;Profile /&gt;
      &lt;hr className=&quot;my-4 border-t border-gray-200&quot; /&gt;
    &lt;/&gt;
  );
}</file><file path="components/providers/toaster-provider.tsx">&quot;use client&quot;;

import { Toaster } from &quot;@/components/ui/toaster&quot;;

export function ToasterProvider() {
  return &lt;Toaster /&gt;;
}</file><file path="components/ui/button.tsx">import * as React from &quot;react&quot;;
import { Slot } from &quot;@radix-ui/react-slot&quot;;
import { cva, type VariantProps } from &quot;class-variance-authority&quot;;

import { cn } from &quot;@/lib/utils&quot;;

const buttonVariants = cva(
  &quot;inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50&quot;,
  {
    variants: {
      variant: {
        default: &quot;bg-primary text-primary-foreground hover:bg-primary/90&quot;,
        destructive:
          &quot;bg-destructive text-destructive-foreground hover:bg-destructive/90&quot;,
        outline:
          &quot;border border-input bg-background hover:bg-accent hover:text-accent-foreground&quot;,
        secondary:
          &quot;bg-secondary text-secondary-foreground hover:bg-secondary/80&quot;,
        ghost: &quot;hover:bg-accent hover:text-accent-foreground&quot;,
        link: &quot;text-primary underline-offset-4 hover:underline&quot;,
      },
      size: {
        default: &quot;h-10 px-4 py-2&quot;,
        sm: &quot;h-9 rounded-md px-3&quot;,
        lg: &quot;h-11 rounded-md px-8&quot;,
        icon: &quot;h-10 w-10&quot;,
      },
    },
    defaultVariants: {
      variant: &quot;default&quot;,
      size: &quot;default&quot;,
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt;,
    VariantProps&lt;typeof buttonVariants&gt; {
  asChild?: boolean;
}

const Button = React.forwardRef&lt;HTMLButtonElement, ButtonProps&gt;(
  ({ className, variant, size, asChild = false, ...props }, ref) =&gt; {
    const Comp = asChild ? Slot : &quot;button&quot;;
    return (
      &lt;Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      /&gt;
    );
  }
);
Button.displayName = &quot;Button&quot;;

export { Button, buttonVariants };</file><file path="components/ui/command.tsx">&apos;use client&apos;;

import * as React from &apos;react&apos;;
import { type DialogProps } from &apos;@radix-ui/react-dialog&apos;;
import { MagnifyingGlassIcon } from &apos;@radix-ui/react-icons&apos;;
import { Command as CommandPrimitive } from &apos;cmdk&apos;;

import { cn } from &apos;@/lib/utils&apos;;
import { Dialog, DialogContent } from &apos;@/components/ui/dialog&apos;;

const Command = React.forwardRef&lt;
  React.ElementRef&lt;typeof CommandPrimitive&gt;,
  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;CommandPrimitive
    ref={ref}
    className={cn(
      &apos;flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground&apos;,
      className
    )}
    {...props}
  /&gt;
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) =&gt; {
  return (
    &lt;Dialog {...props}&gt;
      &lt;DialogContent className=&quot;overflow-hidden p-0&quot;&gt;
        &lt;Command className=&quot;[&amp;_[cmdk-group-heading]]:px-2 [&amp;_[cmdk-group-heading]]:font-medium [&amp;_[cmdk-group-heading]]:text-muted-foreground [&amp;_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&amp;_[cmdk-group]]:px-2 [&amp;_[cmdk-input-wrapper]_svg]:h-5 [&amp;_[cmdk-input-wrapper]_svg]:w-5 [&amp;_[cmdk-input]]:h-12 [&amp;_[cmdk-item]]:px-2 [&amp;_[cmdk-item]]:py-3 [&amp;_[cmdk-item]_svg]:h-5 [&amp;_[cmdk-item]_svg]:w-5&quot;&gt;
          {children}
        &lt;/Command&gt;
      &lt;/DialogContent&gt;
    &lt;/Dialog&gt;
  );
};

const CommandInput = React.forwardRef&lt;
  React.ElementRef&lt;typeof CommandPrimitive.Input&gt;,
  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Input&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;div className=&quot;flex items-center border-b px-3&quot; cmdk-input-wrapper=&quot;&quot;&gt;
    &lt;MagnifyingGlassIcon className=&quot;mr-2 h-4 w-4 shrink-0 opacity-50&quot; /&gt;
    &lt;CommandPrimitive.Input
      ref={ref}
      className={cn(
        &apos;flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50&apos;,
        className
      )}
      {...props}
    /&gt;
  &lt;/div&gt;
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef&lt;
  React.ElementRef&lt;typeof CommandPrimitive.List&gt;,
  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.List&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;CommandPrimitive.List
    ref={ref}
    className={cn(&apos;max-h-[300px] overflow-y-auto overflow-x-hidden&apos;, className)}
    {...props}
  /&gt;
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef&lt;
  React.ElementRef&lt;typeof CommandPrimitive.Empty&gt;,
  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Empty&gt;
&gt;((props, ref) =&gt; (
  &lt;CommandPrimitive.Empty
    ref={ref}
    className=&quot;py-6 text-center text-sm&quot;
    {...props}
  /&gt;
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef&lt;
  React.ElementRef&lt;typeof CommandPrimitive.Group&gt;,
  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Group&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;CommandPrimitive.Group
    ref={ref}
    className={cn(
      &apos;overflow-hidden p-1 text-foreground [&amp;_[cmdk-group-heading]]:px-2 [&amp;_[cmdk-group-heading]]:py-1.5 [&amp;_[cmdk-group-heading]]:text-xs [&amp;_[cmdk-group-heading]]:font-medium [&amp;_[cmdk-group-heading]]:text-muted-foreground&apos;,
      className
    )}
    {...props}
  /&gt;
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef&lt;
  React.ElementRef&lt;typeof CommandPrimitive.Separator&gt;,
  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Separator&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;CommandPrimitive.Separator
    ref={ref}
    className={cn(&apos;-mx-1 h-px bg-border&apos;, className)}
    {...props}
  /&gt;
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef&lt;
  React.ElementRef&lt;typeof CommandPrimitive.Item&gt;,
  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Item&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;CommandPrimitive.Item
    ref={ref}
    className={cn(
      &apos;relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50&apos;,
      className
    )}
    {...props}
  /&gt;
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {
  return (
    &lt;span
      className={cn(
        &apos;ml-auto text-xs tracking-widest text-muted-foreground&apos;,
        className
      )}
      {...props}
    /&gt;
  );
};
CommandShortcut.displayName = &apos;CommandShortcut&apos;;

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator
};</file><file path="components/ui/form.tsx">&quot;use client&quot;;

import * as React from &quot;react&quot;;
import * as LabelPrimitive from &quot;@radix-ui/react-label&quot;;
import { Slot } from &quot;@radix-ui/react-slot&quot;;
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from &quot;react-hook-form&quot;;

import { cn } from &quot;@/lib/utils&quot;;
import { Label } from &quot;@/components/ui/label&quot;;

const Form = FormProvider;

type FormFieldContextValue&lt;
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath&lt;TFieldValues&gt; = FieldPath&lt;TFieldValues&gt;
&gt; = {
  name: TName;
};

const FormFieldContext = React.createContext&lt;FormFieldContextValue&gt;(
  {} as FormFieldContextValue
);

const FormField = &lt;
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath&lt;TFieldValues&gt; = FieldPath&lt;TFieldValues&gt;
&gt;({
  ...props
}: ControllerProps&lt;TFieldValues, TName&gt;) =&gt; {
  return (
    &lt;FormFieldContext.Provider value={{ name: props.name }}&gt;
      &lt;Controller {...props} /&gt;
    &lt;/FormFieldContext.Provider&gt;
  );
};

const useFormField = () =&gt; {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error(&quot;useFormField should be used within &lt;FormField&gt;&quot;);
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext&lt;FormItemContextValue&gt;(
  {} as FormItemContextValue
);

const FormItem = React.forwardRef&lt;
  HTMLDivElement,
  React.HTMLAttributes&lt;HTMLDivElement&gt;
&gt;(({ className, ...props }, ref) =&gt; {
  const id = React.useId();

  return (
    &lt;FormItemContext.Provider value={{ id }}&gt;
      &lt;div ref={ref} className={cn(&quot;space-y-2&quot;, className)} {...props} /&gt;
    &lt;/FormItemContext.Provider&gt;
  );
});
FormItem.displayName = &quot;FormItem&quot;;

const FormLabel = React.forwardRef&lt;
  React.ElementRef&lt;typeof LabelPrimitive.Root&gt;,
  React.ComponentPropsWithoutRef&lt;typeof LabelPrimitive.Root&gt;
&gt;(({ className, ...props }, ref) =&gt; {
  const { error, formItemId } = useFormField();

  return (
    &lt;Label
      ref={ref}
      className={cn(error &amp;&amp; &quot;text-destructive&quot;, className)}
      htmlFor={formItemId}
      {...props}
    /&gt;
  );
});
FormLabel.displayName = &quot;FormLabel&quot;;

const FormControl = React.forwardRef&lt;
  React.ElementRef&lt;typeof Slot&gt;,
  React.ComponentPropsWithoutRef&lt;typeof Slot&gt;
&gt;(({ ...props }, ref) =&gt; {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    &lt;Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    /&gt;
  );
});
FormControl.displayName = &quot;FormControl&quot;;

const FormDescription = React.forwardRef&lt;
  HTMLParagraphElement,
  React.HTMLAttributes&lt;HTMLParagraphElement&gt;
&gt;(({ className, ...props }, ref) =&gt; {
  const { formDescriptionId } = useFormField();

  return (
    &lt;p
      ref={ref}
      id={formDescriptionId}
      className={cn(&quot;text-sm text-muted-foreground&quot;, className)}
      {...props}
    /&gt;
  );
});
FormDescription.displayName = &quot;FormDescription&quot;;

const FormMessage = React.forwardRef&lt;
  HTMLParagraphElement,
  React.HTMLAttributes&lt;HTMLParagraphElement&gt;
&gt;(({ className, children, ...props }, ref) =&gt; {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    &lt;p
      ref={ref}
      id={formMessageId}
      className={cn(&quot;text-sm font-medium text-destructive&quot;, className)}
      {...props}
    &gt;
      {body}
    &lt;/p&gt;
  );
});
FormMessage.displayName = &quot;FormMessage&quot;;

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};</file><file path="components/ui/icons.tsx">&quot;use client&quot;;

import * as React from &quot;react&quot;;
import { cn } from &quot;@/lib/utils&quot;;
import {
  Mail,
  Loader2,
  User,
  LogIn,
  LogOut,
  Settings,
  ChevronLeft,
  ChevronRight,
  ChevronsUpDown,
  Plus,
  X,
  Check,
  Circle,
  CreditCard,
  Github,
  LayoutDashboard,
  Search,
  Trash,
  UserPlus,
  Users,
  Laptop,
  Moon,
  SunMedium,
  Menu,
  MessageSquare,
  MoreVertical,
  Pencil,
  Share2,
  Star,
  StarHalf,
  Terminal,
  Trash2,
  Twitter,
  Upload,
  Wrench,
  Zap,
} from &quot;lucide-react&quot;;

export const Icons = {
  logo: IconNextChat,
  close: X,
  loading: Loader2,
  chevronLeft: ChevronLeft,
  chevronRight: ChevronRight,
  chevronsUpDown: ChevronsUpDown,
  check: Check,
  circle: Circle,
  expand: ChevronsUpDown,
  menu: Menu,
  message: MessageSquare,
  more: MoreVertical,
  plus: Plus,
  search: Search,
  settings: Settings,
  trash: Trash2,
  user: User,
  users: Users,
  post: Pencil,
  gitHub: Github,
  twitter: Twitter,
  upload: Upload,
  login: LogIn,
  logout: LogOut,
  dashboard: LayoutDashboard,
  billing: CreditCard,
  ellipsis: MoreVertical,
  add: UserPlus,
  warning: Terminal,
  mail: Mail,
  laptop: Laptop,
  moon: Moon,
  sun: SunMedium,
  star: Star,
  starHalf: StarHalf,
  share: Share2,
  zap: Zap,
  wrench: Wrench,
  supabase: ({ className, ...props }: React.ComponentProps&lt;&quot;svg&quot;&gt;) =&gt; (
    &lt;svg
      role=&quot;img&quot;
      viewBox=&quot;0 0 24 24&quot;
      fill=&quot;currentColor&quot;
      xmlns=&quot;http://www.w3.org/2000/svg&quot;
      className={cn(&quot;size-4&quot;, className)}
      {...props}
    &gt;
      &lt;title&gt;Supabase&lt;/title&gt;
      &lt;path d=&quot;M21.362 9.354H12V.396a.396.396 0 0 0-.716-.233L2.203 12.424l-.401.562a1.04 1.04 0 0 0 .836 1.659H12v8.959a.396.396 0 0 0 .716.233l9.081-12.261.401-.562a1.04 1.04 0 0 0-.836-1.66z&quot; /&gt;
    &lt;/svg&gt;
  ),
  nextChat: IconNextChat,
  openAI: IconOpenAI,
  separator: IconSeparator,
} as const;

export type IconKeys = keyof typeof Icons;

function IconNextChat({
  className,
  inverted,
  ...props
}: React.ComponentProps&lt;&quot;svg&quot;&gt; &amp; { inverted?: boolean }) {
  const id = React.useId();

  return (
    &lt;svg
      viewBox=&quot;0 0 17 17&quot;
      fill=&quot;none&quot;
      xmlns=&quot;http://www.w3.org/2000/svg&quot;
      className={cn(&quot;size-4&quot;, className)}
      {...props}
    &gt;
      &lt;defs&gt;
        &lt;linearGradient
          id={`gradient-${id}-1`}
          x1=&quot;10.6889&quot;
          y1=&quot;10.3556&quot;
          x2=&quot;13.8445&quot;
          y2=&quot;14.2667&quot;
          gradientUnits=&quot;userSpaceOnUse&quot;
        &gt;
          &lt;stop stopColor={inverted ? &quot;white&quot; : &quot;black&quot;} /&gt;
          &lt;stop
            offset={1}
            stopColor={inverted ? &quot;white&quot; : &quot;black&quot;}
            stopOpacity={0}
          /&gt;
        &lt;/linearGradient&gt;
        &lt;linearGradient
          id={`gradient-${id}-2`}
          x1=&quot;11.7555&quot;
          y1=&quot;4.8&quot;
          x2=&quot;11.7376&quot;
          y2=&quot;9.50002&quot;
          gradientUnits=&quot;userSpaceOnUse&quot;
        &gt;
          &lt;stop stopColor={inverted ? &quot;white&quot; : &quot;black&quot;} /&gt;
          &lt;stop
            offset={1}
            stopColor={inverted ? &quot;white&quot; : &quot;black&quot;}
            stopOpacity={0}
          /&gt;
        &lt;/linearGradient&gt;
      &lt;/defs&gt;
      &lt;path
        d=&quot;M1 16L2.58314 11.2506C1.83084 9.74642 1.63835 8.02363 2.04013 6.39052C2.4419 4.75741 3.41171 3.32057 4.776 2.33712C6.1403 1.35367 7.81003 0.887808 9.4864 1.02289C11.1628 1.15798 12.7364 1.8852 13.9256 3.07442C15.1148 4.26363 15.842 5.83723 15.9771 7.5136C16.1122 9.18997 15.6463 10.8597 14.6629 12.224C13.6794 13.5883 12.2426 14.5581 10.6095 14.9599C8.97637 15.3616 7.25358 15.1692 5.74942 14.4169L1 16Z&quot;
        fill={inverted ? &quot;black&quot; : &quot;white&quot;}
        stroke={inverted ? &quot;black&quot; : &quot;white&quot;}
        strokeWidth={2}
        strokeLinecap=&quot;round&quot;
        strokeLinejoin=&quot;round&quot;
      /&gt;
      &lt;mask
        id=&quot;mask0_91_2047&quot;
        style={{ maskType: &quot;alpha&quot; }}
        maskUnits=&quot;userSpaceOnUse&quot;
        x={1}
        y={0}
        width={16}
        height={16}
      &gt;
        &lt;circle cx={9} cy={8} r={8} fill={inverted ? &quot;black&quot; : &quot;white&quot;} /&gt;
      &lt;/mask&gt;
      &lt;g mask=&quot;url(#mask0_91_2047)&quot;&gt;
        &lt;circle cx={9} cy={8} r={8} fill={inverted ? &quot;black&quot; : &quot;white&quot;} /&gt;
        &lt;path
          d=&quot;M14.2896 14.0018L7.146 4.8H5.80005V11.1973H6.87681V6.16743L13.4444 14.6529C13.7407 14.4545 14.0231 14.2369 14.2896 14.0018Z&quot;
          fill={`url(#gradient-${id}-1)`}
        /&gt;
        &lt;rect
          x=&quot;11.2222&quot;
          y=&quot;4.8&quot;
          width=&quot;1.06667&quot;
          height=&quot;6.4&quot;
          fill={`url(#gradient-${id}-2)`}
        /&gt;
      &lt;/g&gt;
    &lt;/svg&gt;
  );
}

function IconOpenAI({ className, ...props }: React.ComponentProps&lt;&quot;svg&quot;&gt;) {
  return (
    &lt;svg
      fill=&quot;currentColor&quot;
      viewBox=&quot;0 0 24 24&quot;
      role=&quot;img&quot;
      xmlns=&quot;http://www.w3.org/2000/svg&quot;
      className={cn(&quot;size-4&quot;, className)}
      {...props}
    &gt;
      &lt;title&gt;OpenAI icon&lt;/title&gt;
      &lt;path d=&quot;M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z&quot; /&gt;
    &lt;/svg&gt;
  );
}

function IconGitHub({ className, ...props }: React.ComponentProps&lt;&quot;svg&quot;&gt;) {
  return (
    &lt;svg
      role=&quot;img&quot;
      viewBox=&quot;0 0 24 24&quot;
      xmlns=&quot;http://www.w3.org/2000/svg&quot;
      fill=&quot;currentColor&quot;
      className={cn(&quot;size-4&quot;, className)}
      {...props}
    &gt;
      &lt;title&gt;GitHub&lt;/title&gt;
      &lt;path d=&quot;M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12&quot; /&gt;
    &lt;/svg&gt;
  );
}

function IconSeparator({ className, ...props }: React.ComponentProps&lt;&quot;svg&quot;&gt;) {
  return (
    &lt;svg
      fill=&quot;none&quot;
      shapeRendering=&quot;geometricPrecision&quot;
      stroke=&quot;currentColor&quot;
      strokeLinecap=&quot;round&quot;
      strokeLinejoin=&quot;round&quot;
      strokeWidth=&quot;1&quot;
      viewBox=&quot;0 0 24 24&quot;
      aria-hidden=&quot;true&quot;
      className={cn(&quot;size-4&quot;, className)}
      {...props}
    &gt;
      &lt;path d=&quot;M16.88 3.549L7.12 20.451&quot;&gt;&lt;/path&gt;
    &lt;/svg&gt;
  );
}

function IconSpinner({ className, ...props }: React.ComponentProps&lt;&quot;svg&quot;&gt;) {
  return (
    &lt;svg
      xmlns=&quot;http://www.w3.org/2000/svg&quot;
      viewBox=&quot;0 0 256 256&quot;
      fill=&quot;currentColor&quot;
      className={cn(&quot;size-4 animate-spin&quot;, className)}
      {...props}
    &gt;
      &lt;path d=&quot;M232 128a104 104 0 0 1-208 0c0-41 23.81-78.36 60.66-95.27a8 8 0 0 1 6.68 14.54C60.15 61.59 40 93.27 40 128a88 88 0 0 0 176 0c0-34.73-20.15-66.41-51.34-80.73a8 8 0 0 1 6.68-14.54C208.19 49.64 232 87 232 128Z&quot; /&gt;
    &lt;/svg&gt;
  );
}

function IconUser({ className, ...props }: React.ComponentProps&lt;&quot;svg&quot;&gt;) {
  return (
    &lt;svg
      xmlns=&quot;http://www.w3.org/2000/svg&quot;
      viewBox=&quot;0 0 256 256&quot;
      fill=&quot;currentColor&quot;
      className={cn(&quot;size-4&quot;, className)}
      {...props}
    &gt;
      &lt;path d=&quot;M230.92 212c-15.23-26.33-38.7-45.21-66.09-54.16a72 72 0 1 0-73.66 0c-27.39 8.94-50.86 27.82-66.09 54.16a8 8 0 1 0 13.85 8c18.84-32.56 52.14-52 89.07-52s70.23 19.44 89.07 52a8 8 0 1 0 13.85-8ZM72 96a56 56 0 1 1 56 56 56.06 56.06 0 0 1-56-56Z&quot; /&gt;
    &lt;/svg&gt;
  );
}

export {
  IconNextChat,
  IconOpenAI,
  IconGitHub,
  IconSeparator,
  IconSpinner,
  IconUser,
};</file><file path="components/ui/input.tsx">import * as React from &quot;react&quot;;

import { cn } from &quot;@/lib/utils&quot;;

export interface InputProps
  extends React.InputHTMLAttributes&lt;HTMLInputElement&gt; {}

const Input = React.forwardRef&lt;HTMLInputElement, InputProps&gt;(
  ({ className, type, ...props }, ref) =&gt; {
    return (
      &lt;input
        type={type}
        className={cn(
          &quot;flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50&quot;,
          className
        )}
        ref={ref}
        {...props}
      /&gt;
    );
  }
);
Input.displayName = &quot;Input&quot;;

export { Input };</file><file path="components/ui/toast.tsx">&quot;use client&quot;;

import * as React from &quot;react&quot;;
import { Cross2Icon } from &quot;@radix-ui/react-icons&quot;;
import * as ToastPrimitives from &quot;@radix-ui/react-toast&quot;;
import { cva, type VariantProps } from &quot;class-variance-authority&quot;;
import { X } from &quot;lucide-react&quot;;

import { cn } from &quot;@/lib/utils&quot;;

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef&lt;
  React.ElementRef&lt;typeof ToastPrimitives.Viewport&gt;,
  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Viewport&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      &quot;fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]&quot;,
      className
    )}
    {...props}
  /&gt;
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  &quot;group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full&quot;,
  {
    variants: {
      variant: {
        default: &quot;border bg-background&quot;,
        destructive:
          &quot;destructive group border-destructive bg-destructive text-destructive-foreground&quot;,
      },
    },
    defaultVariants: {
      variant: &quot;default&quot;,
    },
  }
);

const Toast = React.forwardRef&lt;
  React.ElementRef&lt;typeof ToastPrimitives.Root&gt;,
  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Root&gt; &amp;
    VariantProps&lt;typeof toastVariants&gt;
&gt;(({ className, variant, ...props }, ref) =&gt; {
  return (
    &lt;ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    /&gt;
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef&lt;
  React.ElementRef&lt;typeof ToastPrimitives.Action&gt;,
  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Action&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;ToastPrimitives.Action
    ref={ref}
    className={cn(
      &quot;inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive&quot;,
      className
    )}
    {...props}
  /&gt;
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef&lt;
  React.ElementRef&lt;typeof ToastPrimitives.Close&gt;,
  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Close&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;ToastPrimitives.Close
    ref={ref}
    className={cn(
      &quot;absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600&quot;,
      className
    )}
    toast-close=&quot;&quot;
    {...props}
  &gt;
    &lt;X className=&quot;h-4 w-4&quot; /&gt;
  &lt;/ToastPrimitives.Close&gt;
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef&lt;
  React.ElementRef&lt;typeof ToastPrimitives.Title&gt;,
  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Title&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;ToastPrimitives.Title
    ref={ref}
    className={cn(&quot;text-sm font-semibold&quot;, className)}
    {...props}
  /&gt;
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef&lt;
  React.ElementRef&lt;typeof ToastPrimitives.Description&gt;,
  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Description&gt;
&gt;(({ className, ...props }, ref) =&gt; (
  &lt;ToastPrimitives.Description
    ref={ref}
    className={cn(&quot;text-sm opacity-90&quot;, className)}
    {...props}
  /&gt;
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef&lt;typeof Toast&gt;;

type ToastActionElement = React.ReactElement&lt;typeof ToastAction&gt;;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};</file><file path="components/ui/toaster.tsx">&quot;use client&quot;;

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from &quot;@/components/ui/toast&quot;;
import { useToast } from &quot;@/components/ui/use-toast&quot;;

export function Toaster() {
  const { toasts } = useToast();

  return (
    &lt;ToastProvider&gt;
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          &lt;Toast key={id} {...props}&gt;
            &lt;div className=&quot;grid gap-1&quot;&gt;
              {title &amp;&amp; &lt;ToastTitle&gt;{title}&lt;/ToastTitle&gt;}
              {description &amp;&amp; (
                &lt;ToastDescription&gt;{description}&lt;/ToastDescription&gt;
              )}
            &lt;/div&gt;
            {action}
            &lt;ToastClose /&gt;
          &lt;/Toast&gt;
        );
      })}
      &lt;ToastViewport /&gt;
    &lt;/ToastProvider&gt;
  );
}</file><file path="components/ui/use-toast.ts">import * as React from &quot;react&quot;;

import type {
  ToastActionElement,
  ToastProps,
} from &quot;@/components/ui/toast&quot;;

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps &amp; {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: &quot;ADD_TOAST&quot;,
  UPDATE_TOAST: &quot;UPDATE_TOAST&quot;,
  DISMISS_TOAST: &quot;DISMISS_TOAST&quot;,
  REMOVE_TOAST: &quot;REMOVE_TOAST&quot;,
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_VALUE;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType[&quot;ADD_TOAST&quot;];
      toast: ToasterToast;
    }
  | {
      type: ActionType[&quot;UPDATE_TOAST&quot;];
      toast: Partial&lt;ToasterToast&gt;;
    }
  | {
      type: ActionType[&quot;DISMISS_TOAST&quot;];
      toastId?: ToasterToast[&quot;id&quot;];
    }
  | {
      type: ActionType[&quot;REMOVE_TOAST&quot;];
      toastId?: ToasterToast[&quot;id&quot;];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map&lt;string, ReturnType&lt;typeof setTimeout&gt;&gt;();

const addToRemoveQueue = (toastId: string) =&gt; {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() =&gt; {
    toastTimeouts.delete(toastId);
    dispatch({
      type: &quot;REMOVE_TOAST&quot;,
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State =&gt; {
  switch (action.type) {
    case &quot;ADD_TOAST&quot;:
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case &quot;UPDATE_TOAST&quot;:
      return {
        ...state,
        toasts: state.toasts.map((t) =&gt;
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };

    case &quot;DISMISS_TOAST&quot;: {
      const { toastId } = action;



      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) =&gt; {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =&gt;
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case &quot;REMOVE_TOAST&quot;:
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) =&gt; t.id !== action.toastId),
      };
  }
};

const listeners: Array&lt;(state: State) =&gt; void&gt; = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) =&gt; {
    listener(memoryState);
  });
}

type Toast = Omit&lt;ToasterToast, &quot;id&quot;&gt;;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =&gt;
    dispatch({
      type: &quot;UPDATE_TOAST&quot;,
      toast: { ...props, id },
    });
  const dismiss = () =&gt; dispatch({ type: &quot;DISMISS_TOAST&quot;, toastId: id });

  dispatch({
    type: &quot;ADD_TOAST&quot;,
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) =&gt; {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState&lt;State&gt;(memoryState);

  React.useEffect(() =&gt; {
    listeners.push(setState);
    return () =&gt; {
      const index = listeners.indexOf(setState);
      if (index &gt; -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) =&gt; dispatch({ type: &quot;DISMISS_TOAST&quot;, toastId }),
  };
}

export { useToast, toast };</file><file path="components/add-company-dialog.tsx">&apos;use client&apos;;

import { useEffect, useRef, useState } from &apos;react&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle
} from &apos;@/components/ui/dialog&apos;;
import { Input } from &apos;@/components/ui/input&apos;;
import { Textarea } from &apos;@/components/ui/textarea&apos;;
import { ScrollArea } from &apos;@/components/ui/scroll-area&apos;;
import { useActionState } from &apos;react&apos;;
import { createCompany, getCompanyData } from &apos;@/app/actions/company&apos;;
import { useToast } from &apos;@/hooks/use-toast&apos;;
import { useCompanyContext } from &apos;@/lib/companyProvider&apos;;
import { Company } from &apos;@/schema&apos;;
import { AddCompanyForm } from &apos;@/components/add-company-form&apos;;

type CompanyActionState = {
  status: &apos;idle&apos; | &apos;success&apos; | &apos;error&apos;;
  message?: string;
  company?: Company;
};

const initialState: CompanyActionState = {
  status: &apos;idle&apos;
};

interface AddCompanyDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) =&gt; void;
}

export function AddCompanyDialog({
  open,
  onOpenChange
}: AddCompanyDialogProps) {
  const { toast } = useToast();
  const { setCompanies } = useCompanyContext();
  const [state, formAction] = useActionState&lt;CompanyActionState, FormData&gt;(
    createCompany,
    initialState
  );
  const [companyData, setCompanyData] = useState&lt;any&gt;(null);
  const [fetchState, fetchAction] = useActionState(getCompanyData, {
    status: &apos;idle&apos;,
    data: null
  });
  const formRef = useRef&lt;HTMLFormElement&gt;(null);
  const [isFetched, setIsFetched] = useState(false);

  const handleFetchData = async () =&gt; {
    if (formRef.current) {
      const formData = new FormData(formRef.current);
      console.log(&apos;Fetching data with formData:&apos;, Object.fromEntries(formData));
      const result = await fetchAction(formData);
      console.log(&apos;Fetch result:&apos;, result);
      setIsFetched(true);
    } else {
      console.error(&apos;Form reference is null&apos;);
    }
  };

  useEffect(() =&gt; {
    if (state.status === &apos;success&apos; &amp;&amp; state.company) {
      toast({
        title: &apos;Company added successfully&apos;,
        description: `${state.company.name} has been added to your companies.`,
        duration: 5000
      });
      setCompanies((prevCompanies) =&gt; [
        ...prevCompanies,
        state.company as Company
      ]);
      onOpenChange(false);
    } else if (state.status === &apos;error&apos;) {
      toast({
        title: &apos;Error&apos;,
        description: state.message || &apos;Failed to add company&apos;,
        variant: &apos;destructive&apos;,
        duration: 5000
      });
    }
  }, [state, onOpenChange, setCompanies, toast]);

  useEffect(() =&gt; {
    if (fetchState.status === &apos;success&apos; &amp;&amp; fetchState.data) {
      setCompanyData(fetchState.data);
    } else if (fetchState.status === &apos;error&apos;) {
      toast({
        title: &apos;Error&apos;,
        description: &apos;Failed to fetch company data. Please try again.&apos;,
        variant: &apos;destructive&apos;,
        duration: 5000
      });
    }
  }, [fetchState, toast]);

  const handleSubmit = (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    formData.append(&apos;metadata&apos;, JSON.stringify(companyData));
    formAction(formData);
  };

  return (
    &lt;Dialog open={open} onOpenChange={onOpenChange}&gt;
      &lt;DialogContent className=&quot;max-w-[550px]&quot;&gt;
        &lt;DialogTitle&gt;Add Company&lt;/DialogTitle&gt;
        &lt;AddCompanyForm /&gt;
      &lt;/DialogContent&gt;
    &lt;/Dialog&gt;
  );
}</file><file path="components/chat.tsx">&quot;use client&quot;;

import { Message } from &quot;ai&quot;;
import { useChat } from &quot;ai/react&quot;;
import { useEffect, useState } from &quot;react&quot;;
import { Files } from &quot;@/components/files&quot;;
import { AnimatePresence, motion } from &quot;framer-motion&quot;;
import { FileIcon } from &quot;@/components/icons&quot;;
import { Message as PreviewMessage } from &quot;@/components/message&quot;;
import { useScrollToBottom } from &quot;@/components/use-scroll-to-bottom&quot;;
import { Session } from &quot;next-auth&quot;;
import { getFiles } from &quot;@/lib/actions/getFiles&quot;;
import { useRouter } from &quot;next/navigation&quot;;
import { Button } from &quot;@/components/ui/button&quot;;

const suggestedActions = [
  {
    title: &quot;Identify Key Insights&quot;,
    label: &quot;from these documents.&quot;,
    action: &quot;Identify the key insights from these documents.&quot;,
  },
  {
    title: &quot;Highlight Data Inconsistencies&quot;,
    label: &quot;within the provided materials.&quot;,
    action: &quot;Highlight any data inconsistencies within the provided materials.&quot;,
  },
  {
    title: &quot;Summarize Financial Reports&quot;,
    label: &quot;for a quick overview.&quot;,
    action: &quot;Summarize the financial reports for a quick overview.&quot;,
  },
  {
    title: &quot;Generate Risk Assessment&quot;,
    label: &quot;based on current data.&quot;,
    action: &quot;Generate a risk assessment based on the current data.&quot;,
  },
  {
    title: &quot;Draft Executive Summary&quot;,
    label: &quot;for the upcoming meeting.&quot;,
    action: &quot;Draft an executive summary for the upcoming meeting.&quot;,
  },
  {
    title: &quot;Analyze Compliance Issues&quot;,
    label: &quot;in the recent reports.&quot;,
    action: &quot;Analyze any compliance issues present in the recent reports.&quot;,
  },
  {
    title: &quot;Provide Strategic Recommendations&quot;,
    label: &quot;based on the findings.&quot;,
    action: &quot;Provide strategic recommendations based on the findings.&quot;,
  },
  {
    title: &quot;Evaluate Market Trends&quot;,
    label: &quot;from the latest data.&quot;,
    action: &quot;Evaluate the latest market trends from the provided data.&quot;,
  },
];

export function Chat({
  id,
  initialMessages,
  session,
  selectedCompanyId,
  companies,
}: {
  id: string;
  initialMessages: Array&lt;Message&gt;;
  session: Session | null;
  selectedCompanyId: number | null;
  companies: Array&lt;{ id: number; name: string }&gt;;
}) {
  const router = useRouter();
  const [selectedFilePathnames, setSelectedFilePathnames] = useState&lt;
    Array&lt;string&gt;
  &gt;([]);
  const [isFilesVisible, setIsFilesVisible] = useState(false);
  const [accessibleFiles, setAccessibleFiles] = useState&lt;Array&lt;string&gt;&gt;([]);

  useEffect(() =&gt; {
    async function fetchFiles() {
      if (selectedCompanyId) {
        try {
          const files = await getFiles(selectedCompanyId);
          setAccessibleFiles(
            files.map((file: { pathname: string }) =&gt; file.pathname)
          );
        } catch (error) {
          console.error(&quot;Failed to fetch files:&quot;, error);
        }
      }
    }
    fetchFiles();
  }, [selectedCompanyId]);

  const { messages, handleSubmit, input, setInput, append } = useChat({
    body: { id, selectedFilePathnames, companyId: selectedCompanyId },
    initialMessages,
    onFinish: () =&gt; {
      window.history.replaceState({}, &quot;&quot;, `/${id}`);
    },
  });

  const [messagesContainerRef, messagesEndRef] =
    useScrollToBottom&lt;HTMLDivElement&gt;();

  const handleCompanyChange = (companyId: string) =&gt; {
    router.push(`/${id}?companyId=${companyId}`);
  };

  return (
    &lt;div className=&quot;flex flex-col justify-right pb-20 h-dvh bg-white dark:bg-zinc-900&quot;&gt;
      &lt;div
        ref={messagesContainerRef}
        className=&quot;flex flex-col gap-4 h-full w-dvw items-center overflow-y-scroll&quot;
      &gt;
        {messages.map((message, index) =&gt; (
          &lt;PreviewMessage
            key={`${id}-${index}`}
            role={message.role}
            content={message.content}
            files={accessibleFiles}
          /&gt;
        ))}
        &lt;div
          ref={messagesEndRef}
          className=&quot;flex-shrink-0 min-w-[24px] min-h-[24px]&quot;
        /&gt;
      &lt;/div&gt;

      {messages.length === 0 &amp;&amp; (
        &lt;div className=&quot;grid sm:grid-cols-2 gap-2 w-full px-4 md:px-0 mx-auto md:max-w-[500px]&quot;&gt;
          {suggestedActions.map((suggestedAction, index) =&gt; (
            &lt;motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.05 * index }}
              key={index}
              className={index &gt; 1 ? &quot;hidden sm:block&quot; : &quot;block&quot;}
            &gt;
              &lt;button
                onClick={() =&gt;
                  append({ role: &quot;user&quot;, content: suggestedAction.action })
                }
                className=&quot;w-full text-left border border-zinc-200 dark:border-zinc-800 text-zinc-800 dark:text-zinc-300 rounded-lg p-2 text-sm hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors flex flex-col&quot;
              &gt;
                &lt;span className=&quot;font-medium&quot;&gt;{suggestedAction.title}&lt;/span&gt;
                &lt;span className=&quot;text-zinc-500 dark:text-zinc-400&quot;&gt;
                  {suggestedAction.label}
                &lt;/span&gt;
              &lt;/button&gt;
            &lt;/motion.div&gt;
          ))}
        &lt;/div&gt;
      )}
      &lt;div className=&quot;flex justify-center w-full mt-8&quot;&gt;
        &lt;form
          className=&quot;flex flex-row gap-2 relative items-center w-full md:max-w-[500px] max-w-[calc(100dvw-32px)] px-4 md:px-0&quot;
          onSubmit={handleSubmit}
        &gt;
          &lt;input
            className=&quot;bg-zinc-100 rounded-md px-2 py-1.5 flex-1 outline-none dark:bg-zinc-700 text-zinc-800 dark:text-zinc-300&quot;
            placeholder=&quot;Send a message...&quot;
            value={input}
            onChange={(event) =&gt; setInput(event.target.value)}
          /&gt;

          &lt;Button
            type=&quot;button&quot;
            className=&quot;relative text-sm bg-zinc-100 rounded-lg size-9 flex-shrink-0 flex items-center justify-center cursor-pointer hover:bg-zinc-200 dark:text-zinc-50 dark:bg-zinc-700 dark:hover:bg-zinc-800&quot;
            onClick={() =&gt; setIsFilesVisible(!isFilesVisible)}
          &gt;
            &lt;FileIcon /&gt;
            &lt;motion.div
              className=&quot;absolute text-xs -top-2 -right-2 bg-blue-500 size-5 rounded-full flex items-center justify-center border-2 dark:border-zinc-900 border-white text-blue-50&quot;
              initial={{ opacity: 0, scale: 0.5 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.5 }}
            &gt;
              {selectedFilePathnames?.length}
            &lt;/motion.div&gt;
          &lt;/Button&gt;
        &lt;/form&gt;
      &lt;/div&gt;

      &lt;AnimatePresence&gt;
        {isFilesVisible &amp;&amp; (
          &lt;Files
            setIsFilesVisible={setIsFilesVisible}
            selectedFilePathnames={selectedFilePathnames}
            setSelectedFilePathnames={setSelectedFilePathnames}
            selectedCompanyId={selectedCompanyId}
          /&gt;
        )}
      &lt;/AnimatePresence&gt;
    &lt;/div&gt;
  );
}</file><file path="components/company-selector.tsx">&quot;use client&quot;;
import * as React from &quot;react&quot;;
import {
  Check,
  ChevronsUpDown,
  CircleDot,
  PlusCircle,
  Trash2,
} from &quot;lucide-react&quot;;
import { cn } from &quot;@/lib/utils&quot;;
import { Button } from &quot;@/components/ui/button&quot;;
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from &quot;@/components/ui/command&quot;;
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from &quot;@/components/ui/popover&quot;;
import { AddCompanyDialog } from &quot;./add-company-dialog&quot;;
import { DeleteCompanyDialog } from &quot;./delete-company-dialog&quot;;
import { useCompanyContext } from &quot;@/lib/companyProvider&quot;;
import { Label } from &quot;@/components/ui/label&quot;;
import type { Company } from &quot;@/schema&quot;;

export function CompanySelector() {
  const [open, setOpen] = React.useState(false);
  const [addCompanyOpen, setAddCompanyOpen] = React.useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);
  const { companies, selectedCompanyId, setSelectedCompanyId } =
    useCompanyContext();


  const selectedCompany = React.useMemo(
    () =&gt; companies.find((company) =&gt; company.id === selectedCompanyId),
    [companies, selectedCompanyId]
  );

  return (
    &lt;&gt;
      &lt;Popover open={open} onOpenChange={setOpen}&gt;
        &lt;PopoverTrigger asChild&gt;
          &lt;Button
            variant=&quot;outline&quot;
            role=&quot;combobox&quot;
            aria-expanded={open}
            className=&quot;max-w-xs justify-between truncate&quot;
          &gt;
            &lt;ChevronsUpDown className=&quot;mr-2 h-4 w-4 shrink-0 opacity-50&quot; /&gt;
            {selectedCompany ? selectedCompany.name : &quot;Select company...&quot;}
          &lt;/Button&gt;
        &lt;/PopoverTrigger&gt;
        &lt;PopoverContent className=&quot;max-w-xs p-0&quot;&gt;
          &lt;Command&gt;
            &lt;CommandInput placeholder=&quot;Search company...&quot; /&gt;
            &lt;CommandList&gt;
              &lt;CommandEmpty&gt;No company found.&lt;/CommandEmpty&gt;
              &lt;CommandGroup heading=&quot;Companies&quot;&gt;
                {companies.map((company) =&gt; (
                  &lt;CommandItem
                    key={company.id}
                    onSelect={() =&gt; {
                      setSelectedCompanyId(company.id);
                      setOpen(false);
                    }}
                    className=&quot;gap-2&quot;
                    value={company.name}
                  &gt;
                    &lt;Check
                      className={cn(
                        &quot;h-4 w-4&quot;,
                        selectedCompanyId === company.id
                          ? &quot;opacity-100&quot;
                          : &quot;opacity-0&quot;
                      )}
                    /&gt;
                    &lt;Label className=&quot;ml-2 max-w-2/3 truncate text-wrap text-ellipsis&quot;&gt;
                      {company.name}
                    &lt;/Label&gt;
                  &lt;/CommandItem&gt;
                ))}
              &lt;/CommandGroup&gt;
              &lt;CommandGroup heading=&quot;Actions&quot;&gt;
                &lt;CommandItem
                  onSelect={() =&gt; {
                    setAddCompanyOpen(true);
                    setOpen(false);
                  }}
                &gt;
                  &lt;PlusCircle className=&quot;mr-2 h-4 w-4&quot; /&gt;
                  Add new company
                &lt;/CommandItem&gt;
                {selectedCompanyId &amp;&amp; (
                  &lt;CommandItem
                    onSelect={() =&gt; {
                      setDeleteDialogOpen(true);
                      setOpen(false);
                    }}
                  &gt;
                    &lt;Trash2 className=&quot;mr-2 h-4 w-4&quot; /&gt;
                    Delete selected company
                  &lt;/CommandItem&gt;
                )}
              &lt;/CommandGroup&gt;
            &lt;/CommandList&gt;
          &lt;/Command&gt;
        &lt;/PopoverContent&gt;
      &lt;/Popover&gt;
      &lt;AddCompanyDialog
        open={addCompanyOpen}
        onOpenChange={setAddCompanyOpen}
      /&gt;
      {selectedCompanyId &amp;&amp; (
        &lt;DeleteCompanyDialog
          open={deleteDialogOpen}
          onOpenChange={setDeleteDialogOpen}
          companyId={selectedCompanyId}
        /&gt;
      )}
    &lt;/&gt;
  );
}</file><file path="components/delete-company-dialog.tsx">&apos;use client&apos;;

import * as React from &apos;react&apos;;
import { Button } from &apos;@/components/ui/button&apos;;
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from &apos;@/components/ui/dialog&apos;;
import { useCompanyContext } from &apos;@/lib/companyProvider&apos;;

import {
  getDocumentsByCompany,
  deleteDocumentsByCompany
} from &apos;@/app/actions/document&apos;;
import { deleteCompany } from &apos;@/app/actions/company&apos;;
import { toast } from &apos;@/components/ui/use-toast&apos;;

interface DeleteCompanyDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) =&gt; void;
  companyId: string;
}

export const DeleteCompanyDialog: React.FC&lt;DeleteCompanyDialogProps&gt; = ({
  open,
  onOpenChange,
  companyId
}) =&gt; {
  const { companies, setSelectedCompanyId } = useCompanyContext();
  const [hasDocuments, setHasDocuments] = React.useState&lt;boolean&gt;(false);

  React.useEffect(() =&gt; {
    if (companyId) {
      getDocumentsByCompany(companyId).then((documents) =&gt; {
        setHasDocuments(documents.length &gt; 0);
      });
    }
  }, [companyId]);

  const handleDelete = async () =&gt; {
    try {
      if (hasDocuments) {
        await deleteDocumentsByCompany(companyId);
      }
      await deleteCompany(companyId);
      toast({
        title: &apos;Success&apos;,
        description: &apos;Company deleted successfully&apos;,
        variant: &apos;default&apos;
      });


      const updatedCompanies = companies.filter(
        (company) =&gt; company.id !== companyId
      );
      setSelectedCompanyId(
        updatedCompanies.length &gt; 0 ? updatedCompanies[0].id : null
      );
    } catch (error) {
      toast({
        title: &apos;Error&apos;,
        description: &apos;Failed to delete company&apos;,
        variant: &apos;destructive&apos;
      });
    } finally {
      onOpenChange(false);
    }
  };

  return (
    &lt;Dialog open={open} onOpenChange={onOpenChange}&gt;
      &lt;DialogContent&gt;
        &lt;DialogHeader&gt;
          &lt;DialogTitle&gt;Delete Company&lt;/DialogTitle&gt;
          &lt;DialogDescription&gt;
            {hasDocuments ? (
              &lt;&gt;
                This company has associated documents. Deleting the company will
                also delete all associated documents. This action cannot be
                undone.
              &lt;/&gt;
            ) : (
              &lt;&gt;
                Are you sure you want to delete this company? This action cannot
                be undone.
              &lt;/&gt;
            )}
          &lt;/DialogDescription&gt;
        &lt;/DialogHeader&gt;
        &lt;DialogFooter&gt;
          &lt;Button variant=&quot;secondary&quot; onClick={() =&gt; onOpenChange(false)}&gt;
            Cancel
          &lt;/Button&gt;
          &lt;Button variant=&quot;destructive&quot; onClick={handleDelete}&gt;
            Delete
          &lt;/Button&gt;
        &lt;/DialogFooter&gt;
      &lt;/DialogContent&gt;
    &lt;/Dialog&gt;
  );
};</file><file path="components/document-analysis.tsx">&quot;use client&quot;;

import { useState } from &quot;react&quot;;
import { useRouter } from &quot;next/navigation&quot;;
import { FileText, AlertCircle, CheckCircle2, Loader2 } from &quot;lucide-react&quot;;
import { useToast } from &quot;@/components/ui/use-toast&quot;;
import { Button } from &quot;@/components/ui/button&quot;;
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from &quot;@/components/ui/card&quot;;
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from &quot;@/components/ui/select&quot;;
import { runAnalysis, generateReport } from &quot;@/app/actions/analysis&quot;;
import { Analysis, Document } from &quot;@/schema&quot;;

interface DocumentAnalysisProps {
  document: Document;
}

export function DocumentAnalysis({ document }: DocumentAnalysisProps) {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisType, setAnalysisType] =
    useState&lt;string&gt;(&quot;data_inconsistency&quot;);
  const router = useRouter();
  const { toast } = useToast();

  const handleAnalysis = async () =&gt; {
    try {
      setIsAnalyzing(true);

      const result = await runAnalysis({
        documentId: document.documentId,
        analysisType: analysisType as
          | &quot;data_inconsistency&quot;
          | &quot;fact_check&quot;
          | &quot;missing_info&quot;,
      });

      if (result.success) {
        toast({
          title: &quot;Analysis started&quot;,
          description:
            &quot;Your document is being analyzed. You&apos;ll be notified when it&apos;s complete.&quot;,
        });
        router.refresh();
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      toast({
        title: &quot;Analysis failed&quot;,
        description: (error as Error).message,
        variant: &quot;destructive&quot;,
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleGenerateReport = async (analysisId: string) =&gt; {
    try {
      const result = await generateReport(analysisId);

      if (result.success) {
        toast({
          title: &quot;Report generated&quot;,
          description: &quot;Your report has been generated successfully.&quot;,
        });
        router.refresh();
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      toast({
        title: &quot;Report generation failed&quot;,
        description: (error as Error).message,
        variant: &quot;destructive&quot;,
      });
    }
  };

  return (
    &lt;Card&gt;
      &lt;CardHeader&gt;
        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;
          &lt;FileText className=&quot;h-5 w-5&quot; /&gt;
          {document.fileName}
        &lt;/CardTitle&gt;
        &lt;CardDescription&gt;
          Uploaded on {new Date(document.createdAt).toLocaleDateString()}
        &lt;/CardDescription&gt;
      &lt;/CardHeader&gt;
      &lt;CardContent&gt;
        &lt;div className=&quot;space-y-4&quot;&gt;
          &lt;div className=&quot;flex items-center gap-4&quot;&gt;
            &lt;Select
              value={analysisType}
              onValueChange={setAnalysisType}
              disabled={isAnalyzing}
            &gt;
              &lt;SelectTrigger className=&quot;w-[200px]&quot;&gt;
                &lt;SelectValue placeholder=&quot;Select analysis type&quot; /&gt;
              &lt;/SelectTrigger&gt;
              &lt;SelectContent&gt;
                &lt;SelectItem value=&quot;data_inconsistency&quot;&gt;
                  Data Inconsistency
                &lt;/SelectItem&gt;
                &lt;SelectItem value=&quot;fact_check&quot;&gt;Fact Check&lt;/SelectItem&gt;
                &lt;SelectItem value=&quot;missing_info&quot;&gt;
                  Missing Information
                &lt;/SelectItem&gt;
              &lt;/SelectContent&gt;
            &lt;/Select&gt;
            &lt;Button onClick={handleAnalysis} disabled={isAnalyzing}&gt;
              {isAnalyzing ? (
                &lt;&gt;
                  &lt;Loader2 className=&quot;mr-2 h-4 w-4 animate-spin&quot; /&gt;
                  Analyzing...
                &lt;/&gt;
              ) : (
                &quot;Start Analysis&quot;
              )}
            &lt;/Button&gt;
          &lt;/div&gt;

          {document.analysis?.map((analysis: Analysis) =&gt; (
            &lt;Card key={analysis.analysisId} className=&quot;bg-muted&quot;&gt;
              &lt;CardHeader&gt;
                &lt;CardTitle className=&quot;text-sm flex items-center gap-2&quot;&gt;
                  {analysis.status === &quot;completed&quot; ? (
                    &lt;CheckCircle2 className=&quot;h-4 w-4 text-green-500&quot; /&gt;
                  ) : (
                    &lt;AlertCircle className=&quot;h-4 w-4 text-yellow-500&quot; /&gt;
                  )}
                  {analysis.analysisType} Analysis
                &lt;/CardTitle&gt;
                &lt;CardDescription&gt;
                  {analysis.status === &quot;completed&quot;
                    ? `Completed on ${new Date(
                        analysis.completedAt!
                      ).toLocaleDateString()}`
                    : &quot;Processing...&quot;}
                &lt;/CardDescription&gt;
              &lt;/CardHeader&gt;
              {analysis.status === &quot;completed&quot; &amp;&amp; (
                &lt;CardFooter&gt;
                  &lt;Button
                    variant=&quot;outline&quot;
                    onClick={() =&gt; handleGenerateReport(analysis.analysisId)}
                  &gt;
                    Generate Report
                  &lt;/Button&gt;
                &lt;/CardFooter&gt;
              )}
            &lt;/Card&gt;
          ))}
        &lt;/div&gt;
      &lt;/CardContent&gt;
    &lt;/Card&gt;
  );
}</file><file path="components/document-upload.tsx">&quot;use client&quot;;

import { useState } from &quot;react&quot;;
import { useRouter } from &quot;next/navigation&quot;;
import { Upload, File, Loader2 } from &quot;lucide-react&quot;;
import { useToast } from &quot;@/components/ui/use-toast&quot;;
import { Button } from &quot;@/components/ui/button&quot;;
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from &quot;@/components/ui/card&quot;;
import { uploadDocument } from &quot;@/app/actions/documents&quot;;
import { useSupabaseAuth } from &quot;@/providers/supabase-auth-provider&quot;;

export function DocumentUpload() {
  const [isUploading, setIsUploading] = useState(false);
  const router = useRouter();
  const { toast } = useToast();
  const { session, loadingSession } = useSupabaseAuth();

  const handleFileUpload = async (
    event: React.ChangeEvent&lt;HTMLInputElement&gt;
  ) =&gt; {
    try {
      const file = event.target.files?.[0];
      if (!file || !session?.user?.id) return;

      setIsUploading(true);

      const formData = new FormData();
      formData.append(&quot;file&quot;, file);
      formData.append(&quot;userId&quot;, session.user.id);

      const result = await uploadDocument(formData);

      if (result.success) {
        toast({
          title: &quot;Document uploaded successfully&quot;,
          description:
            &quot;Your document has been uploaded and is being processed.&quot;,
        });
        router.refresh();
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      toast({
        title: &quot;Upload failed&quot;,
        description: (error as Error).message,
        variant: &quot;destructive&quot;,
      });
    } finally {
      setIsUploading(false);
    }
  };

  if (loadingSession) {
    return (
      &lt;Card className=&quot;w-full max-w-xl mx-auto&quot;&gt;
        &lt;CardContent className=&quot;flex items-center justify-center p-6&quot;&gt;
          &lt;Loader2 className=&quot;h-6 w-6 animate-spin&quot; /&gt;
        &lt;/CardContent&gt;
      &lt;/Card&gt;
    );
  }

  if (!session) {
    return (
      &lt;Card className=&quot;w-full max-w-xl mx-auto&quot;&gt;
        &lt;CardContent className=&quot;p-6&quot;&gt;
          &lt;p className=&quot;text-center text-muted-foreground&quot;&gt;
            Please sign in to upload documents
          &lt;/p&gt;
        &lt;/CardContent&gt;
      &lt;/Card&gt;
    );
  }

  return (
    &lt;Card className=&quot;w-full max-w-xl mx-auto&quot;&gt;
      &lt;CardHeader&gt;
        &lt;CardTitle&gt;Upload Board Document&lt;/CardTitle&gt;
        &lt;CardDescription&gt;
          Upload your board documents for analysis. We support PDF and image
          files.
        &lt;/CardDescription&gt;
      &lt;/CardHeader&gt;
      &lt;CardContent&gt;
        &lt;div className=&quot;flex flex-col items-center gap-4&quot;&gt;
          &lt;div className=&quot;w-full border-2 border-dashed rounded-lg p-6 flex flex-col items-center gap-2&quot;&gt;
            &lt;Upload className=&quot;h-8 w-8 text-muted-foreground&quot; /&gt;
            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;
              Drag and drop your file here, or click to select
            &lt;/p&gt;
            &lt;input
              type=&quot;file&quot;
              accept=&quot;.pdf,.png,.jpg,.jpeg&quot;
              className=&quot;absolute inset-0 w-full h-full opacity-0 cursor-pointer&quot;
              onChange={handleFileUpload}
              disabled={isUploading}
            /&gt;
          &lt;/div&gt;
          &lt;Button disabled={isUploading} className=&quot;w-full&quot;&gt;
            {isUploading ? (
              &lt;&gt;
                &lt;Loader2 className=&quot;mr-2 h-4 w-4 animate-spin&quot; /&gt;
                Uploading...
              &lt;/&gt;
            ) : (
              &lt;&gt;
                &lt;File className=&quot;mr-2 h-4 w-4&quot; /&gt;
                Select File
              &lt;/&gt;
            )}
          &lt;/Button&gt;
        &lt;/div&gt;
      &lt;/CardContent&gt;
    &lt;/Card&gt;
  );
}</file><file path="components/files.tsx">&quot;use client&quot;;

import useSWR from &quot;swr&quot;;
import {
  CheckedSquare,
  InfoIcon,
  LoaderIcon,
  TrashIcon,
  UncheckedSquare,
  UploadIcon,
} from &quot;./icons&quot;;
import { Dispatch, SetStateAction, useRef, useState } from &quot;react&quot;;
import { fetcher } from &quot;@/utils/functions&quot;;
import { motion } from &quot;framer-motion&quot;;
import { useOnClickOutside, useWindowSize } from &quot;usehooks-ts&quot;;
import { Button } from &quot;@/components/ui/button&quot;;
import { cn } from &quot;@/lib/utils&quot;;

interface FileData {
  pathname: string;
  url: string;
}

export const Files = ({
  selectedFilePathnames,
  setSelectedFilePathnames,
  setIsFilesVisible,
  selectedCompanyId,
}: {
  selectedFilePathnames: string[];
  setSelectedFilePathnames: Dispatch&lt;SetStateAction&lt;string[]&gt;&gt;;
  setIsFilesVisible: Dispatch&lt;SetStateAction&lt;boolean&gt;&gt;;
  selectedCompanyId: number | null;
}) =&gt; {
  const inputFileRef = useRef&lt;HTMLInputElement&gt;(null);
  const [uploadQueue, setUploadQueue] = useState&lt;string[]&gt;([]);
  const [deleteQueue, setDeleteQueue] = useState&lt;string[]&gt;([]);
  const {
    data: files,
    mutate,
    isLoading,
  } = useSWR&lt;FileData[]&gt;(
    selectedCompanyId ? `api/files/list?companyId=${selectedCompanyId}` : null,
    fetcher,
    { fallbackData: [] }
  );

  const { width } = useWindowSize();
  const isDesktop = width &gt; 768;

  const drawerRef = useRef(null);
  useOnClickOutside([drawerRef], () =&gt; {
    setIsFilesVisible(false);
  });

  const handleFileUpload = async (file: File) =&gt; {
    if (file &amp;&amp; selectedCompanyId) {
      setUploadQueue((currentQueue) =&gt; [...currentQueue, file.name]);

      await fetch(
        `/api/files/upload?filename=${file.name}&amp;companyId=${selectedCompanyId}`,
        {
          method: &quot;POST&quot;,
          body: file,
        }
      );

      setUploadQueue((currentQueue) =&gt;
        currentQueue.filter((filename) =&gt; filename !== file.name)
      );
      mutate();
    }
  };

  return (
    &lt;motion.div
      className=&quot;fixed bg-zinc-900/50 h-dvh w-dvw top-0 left-0 z-40 flex flex-row justify-center items-center&quot;
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    &gt;
      &lt;motion.div
        className={cn(
          &quot;fixed p-4 flex flex-col gap-4 bg-white dark:bg-zinc-800 z-30&quot;,
          { &quot;w-dvw h-96 bottom-0 right-0&quot;: !isDesktop },
          { &quot;w-[600px] h-96 rounded-lg&quot;: isDesktop }
        )}
        initial={{
          y: &quot;100%&quot;,
          scale: isDesktop ? 0.9 : 1,
          opacity: isDesktop ? 0 : 1,
        }}
        animate={{ y: &quot;0%&quot;, scale: 1, opacity: 1 }}
        exit={{
          y: &quot;100%&quot;,
          scale: isDesktop ? 0.9 : 1,
          opacity: isDesktop ? 0 : 1,
        }}
        transition={{ type: &quot;spring&quot;, stiffness: 400, damping: 40 }}
        ref={drawerRef}
      &gt;
        &lt;div className=&quot;flex flex-row justify-between items-center&quot;&gt;
          &lt;div className=&quot;text-sm flex flex-row gap-3&quot;&gt;
            &lt;div className=&quot;text-zinc-900 dark:text-zinc-300&quot;&gt;
              Manage Knowledge Base
            &lt;/div&gt;
          &lt;/div&gt;

          &lt;input
            name=&quot;file&quot;
            ref={inputFileRef}
            type=&quot;file&quot;
            required
            className=&quot;hidden&quot;
            accept=&quot;application/pdf&quot;
            multiple={false}
            onChange={(event) =&gt; {
              const file = event.target.files?.[0];
              if (file) {
                handleFileUpload(file);
              }
            }}
          /&gt;

          &lt;Button
            onClick={() =&gt; inputFileRef.current?.click()}
            disabled={!selectedCompanyId}
          &gt;
            &lt;UploadIcon size={16} /&gt;
            Upload a file
          &lt;/Button&gt;
        &lt;/div&gt;

        &lt;div className=&quot;flex flex-col h-full overflow-y-scroll&quot;&gt;
          {isLoading ? (
            &lt;div className=&quot;flex flex-col&quot;&gt;
              {[44, 32, 52].map((item) =&gt; (
                &lt;div
                  key={item}
                  className=&quot;flex flex-row gap-4 p-2 border-b dark:border-zinc-700 items-center&quot;
                &gt;
                  &lt;div className=&quot;size-4 bg-zinc-200 dark:bg-zinc-600 animate-pulse&quot; /&gt;
                  &lt;div
                    className={`w-${item} h-4 bg-zinc-200 dark:bg-zinc-600 animate-pulse`}
                  /&gt;
                  &lt;div className=&quot;h-[24px] w-1&quot; /&gt;
                &lt;/div&gt;
              ))}
            &lt;/div&gt;
          ) : null}

          {!isLoading &amp;&amp;
          files?.length === 0 &amp;&amp;
          uploadQueue.length === 0 &amp;&amp;
          deleteQueue.length === 0 ? (
            &lt;div className=&quot;flex flex-col gap-4 items-center justify-center h-full&quot;&gt;
              &lt;div className=&quot;flex flex-row gap-2 items-center text-zinc-500 dark:text-zinc-400 text-sm&quot;&gt;
                &lt;InfoIcon /&gt;
                &lt;div&gt;No files found&lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          ) : null}

          {files?.map((file: FileData) =&gt; (
            &lt;div
              key={file.pathname}
              className={`flex flex-row gap-4 items-center p-2 border-b dark:border-zinc-700 ${
                selectedFilePathnames.includes(file.pathname)
                  ? &quot;bg-zinc-100 dark:bg-zinc-700 dark:border-zinc-600&quot;
                  : &quot;&quot;
              }`}
            &gt;
              &lt;div
                className={cn(
                  &quot;cursor-pointer&quot;,
                  selectedFilePathnames.includes(file.pathname) &amp;&amp;
                    !deleteQueue.includes(file.pathname)
                    ? &quot;text-blue-600 dark:text-zinc-50&quot;
                    : &quot;text-zinc-500&quot;
                )}
                onClick={() =&gt; {
                  setSelectedFilePathnames((currentSelections) =&gt; {
                    if (currentSelections.includes(file.pathname)) {
                      return currentSelections.filter(
                        (path) =&gt; path !== file.pathname
                      );
                    } else {
                      return [...currentSelections, file.pathname];
                    }
                  });
                }}
              &gt;
                {deleteQueue.includes(file.pathname) ? (
                  &lt;div className=&quot;animate-spin&quot;&gt;
                    &lt;LoaderIcon /&gt;
                  &lt;/div&gt;
                ) : selectedFilePathnames.includes(file.pathname) ? (
                  &lt;CheckedSquare /&gt;
                ) : (
                  &lt;UncheckedSquare /&gt;
                )}
              &lt;/div&gt;

              &lt;div className=&quot;flex flex-row justify-between w-full&quot;&gt;
                &lt;div className=&quot;text-sm text-zinc-500 dark:text-zinc-400&quot;&gt;
                  {file.pathname}
                &lt;/div&gt;
              &lt;/div&gt;

              &lt;Button
                variant=&quot;ghost&quot;
                size=&quot;icon&quot;
                className=&quot;text-zinc-500 hover:bg-red-100 dark:text-zinc-500 hover:dark:bg-zinc-700 hover:text-red-500&quot;
                onClick={async () =&gt; {
                  setDeleteQueue((currentQueue) =&gt; [
                    ...currentQueue,
                    file.pathname,
                  ]);

                  await fetch(
                    `/api/files/delete?fileurl=${file.url}&amp;companyId=${selectedCompanyId}`,
                    {
                      method: &quot;DELETE&quot;,
                    }
                  );

                  setDeleteQueue((currentQueue) =&gt;
                    currentQueue.filter(
                      (filename) =&gt; filename !== file.pathname
                    )
                  );

                  setSelectedFilePathnames((currentSelections) =&gt;
                    currentSelections.filter((path) =&gt; path !== file.pathname)
                  );

                  mutate(
                    files.filter((f: FileData) =&gt; f.pathname !== file.pathname)
                  );
                }}
              &gt;
                &lt;TrashIcon /&gt;
              &lt;/Button&gt;
            &lt;/div&gt;
          ))}

          {uploadQueue.map((fileName) =&gt; (
            &lt;div
              key={fileName}
              className=&quot;flex flex-row justify-between p-2 gap-4 items-center&quot;
            &gt;
              &lt;div className=&quot;text-zinc-500&quot;&gt;
                &lt;div className=&quot;animate-spin&quot;&gt;
                  &lt;LoaderIcon /&gt;
                &lt;/div&gt;
              &lt;/div&gt;

              &lt;div className=&quot;flex flex-row justify-between w-full&quot;&gt;
                &lt;div className=&quot;text-sm text-zinc-400 dark:text-zinc-400&quot;&gt;
                  {fileName}
                &lt;/div&gt;
              &lt;/div&gt;

              &lt;div className=&quot;h-[24px] w-2&quot; /&gt;
            &lt;/div&gt;
          ))}
        &lt;/div&gt;

        &lt;div className=&quot;flex flex-row justify-end&quot;&gt;
          &lt;div className=&quot;text-zinc-500 dark:text-zinc-400 text-sm&quot;&gt;
            {`${selectedFilePathnames.length}/${files?.length}`} Selected
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/motion.div&gt;
    &lt;/motion.div&gt;
  );
};</file><file path="docs/API.md"># BoardAIssistant.com API Documentation

This document details all the API endpoints for BoardAIssistant.com. The endpoints are divided into two main groups:

1. **Next.js API / Server Actions:** Endpoints used by the frontend (built with Next.js 15 and the Vercel AI SDK) for lightweight interactions, authentication, realtime updates, and configuration.
2. **Python FastAPI Endpoints:** Backend endpoints that handle heavy processing tasks including document upload/processing, LLM analysis, report generation, prompt management, and observability.

---

## Table of Contents

- [Next.js API / Server Actions](#nextjs-api--server-actions)
  - [Authentication &amp; User Management](#authentication--user-management)
  - [Dashboard &amp; Realtime Updates](#dashboard--realtime-updates)
  - [Configuration and Localization](#configuration-and-localization)
- [Python FastAPI Endpoints](#python-fastapi-endpoints)
  - [Document Management](#document-management)
  - [LLM Analysis](#llm-analysis)
  - [Report Generation](#report-generation)
  - [Prompt Management &amp; Optimization](#prompt-management--optimization)
  - [Observability &amp; Monitoring](#observability--monitoring)

---

## Next.js API / Server Actions

These endpoints are primarily implemented as serverless functions or API routes in Next.js. They interact with Supabase for authentication, realtime updates, and configuration, and provide a lightweight layer to support immediate user feedback.

### Authentication &amp; User Management

Use Supabase auth

### Dashboard &amp; Realtime Updates

#### GET /api/dashboard/status

Description: Returns realtime status updates for the user&apos;s current analysis jobs, document uploads, and system notifications.

Response:

```
{
&quot;uploadStatus&quot;: &quot;completed&quot;,
&quot;analysisProgress&quot;: &quot;75%&quot;,
&quot;notifications&quot;: [
{ &quot;message&quot;: &quot;New analysis results available&quot;, &quot;timestamp&quot;: &quot;2025-02-02T16:30:00Z&quot; }
]
}
```

#### GET /api/notifications

Description: Retrieves realtime notifications (integrated with Supabase Realtime).

Response:

```
{
&quot;notifications&quot;: [
{ &quot;id&quot;: &quot;notif_123&quot;, &quot;message&quot;: &quot;Document processed successfully.&quot;, &quot;type&quot;: &quot;info&quot; },
{ &quot;id&quot;: &quot;notif_124&quot;, &quot;message&quot;: &quot;New LLM analysis report available.&quot;, &quot;type&quot;: &quot;alert&quot; }
]
}
```

## Python FastAPI Endpoints

The FastAPI backend is responsible for intensive operations such as document processing, LLM analysis, report generation, prompt management, and detailed observability. These endpoints are designed to operate asynchronously and integrate with Supabase and Langfuse.

### Document Management

#### POST /documents/upload

Description: Accepts file uploads (PDFs, images) of board documents. Processes documents using the Unstructured API for text extraction.

**Request: Multipart form-data with the following fields:**

- file: The document file (PDF, image)
- userId: UUID of the user uploading the document
- companyId: UUID of the company the document belongs to

**Now, consider direct upload to Supabase Storage from the frontend or via Server Action.**

**If using direct upload from frontend, no API endpoint is needed. If using Server Action:**

#### POST /actions/upload-document (Server Action)

Description: Server Action to handle document upload to Supabase Storage and processing.

**Request: Multipart form-data with the following fields:**

- file: The document file (PDF, image)
- companyId: UUID of the company the document belongs to (user ID can be derived from session)

**Response:**

```
{
&quot;success&quot;: true,
&quot;document&quot;: {
&quot;documentId&quot;: &quot;doc_abc123&quot;,
&quot;userId&quot;: &quot;user_xyz789&quot;, // Will be auto-populated from session
&quot;companyId&quot;: &quot;company_def456&quot;,
&quot;fileName&quot;: &quot;Board_Materials_Q4.pdf&quot;,
&quot;storageUrl&quot;: &quot;https://supabase.storage.url/documents/...&quot;,
&quot;processedText&quot;: &quot;Extracted text content from document...&quot;,
&quot;metadata&quot;: {
&quot;size&quot;: 1024000,
&quot;type&quot;: &quot;application/pdf&quot;,
&quot;uploadedAt&quot;: &quot;2025-02-02T16:00:00Z&quot;
}
}
}
```

Notes:

- Files are stored in Supabase Storage
- Text extraction is performed using the Unstructured API (https://api.unstructured.io/general/v0/general)
- Document metadata and processed text are saved in Supabase Database
- Requires UNSTRUCTURED_API_KEY environment variable

#### GET /documents/{documentId}

Description: Retrieves metadata and processed content for a given document.

Response:

```
{
&quot;documentId&quot;: &quot;doc_abc123&quot;,
&quot;name&quot;: &quot;Board_Materials_Q4.pdf&quot;,
&quot;processedText&quot;: &quot;Extracted text content from document...&quot;,
&quot;metadata&quot;: {
&quot;uploadTime&quot;: &quot;2025-02-02T16:00:00Z&quot;,
&quot;tags&quot;: [&quot;financial&quot;, &quot;compliance&quot;, &quot;Scandinavia&quot;]
}
}
```

### LLM Analysis

#### POST /analysis/run

Description: Initiates an LLM analysis on a specific document.

Request Body:

```
{
&quot;documentId&quot;: &quot;doc_abc123&quot;,
&quot;analysisType&quot;: &quot;data_inconsistency&quot;, // Other types: &quot;fact_check&quot;, &quot;missing_info&quot;, etc.
&quot;localContext&quot;: {
&quot;regulations&quot;: [&quot;Legislation A&quot;, &quot;Legislation B&quot;],
&quot;financialStandards&quot;: &quot;Scandinavian Financial Reporting Guidelines&quot;
}
}
```

Response:

```
{
&quot;analysisId&quot;: &quot;analysis_xyz789&quot;,
&quot;status&quot;: &quot;processing&quot;,
&quot;submittedAt&quot;: &quot;2025-02-02T16:05:00Z&quot;
}
```

#### GET /analysis/{analysisId}

Description: Retrieves results of an LLM analysis.

Response:

```
{
&quot;analysisId&quot;: &quot;analysis_xyz789&quot;,
&quot;status&quot;: &quot;completed&quot;,
&quot;results&quot;: {
&quot;observations&quot;: [
{
&quot;observationId&quot;: &quot;obs_001&quot;,
&quot;description&quot;: &quot;Employee numbers mismatch between sections&quot;,
&quot;pageReference&quot;: &quot;Page 12&quot;,
&quot;suggestions&quot;: &quot;Verify the figures with HR records.&quot;
},
{
&quot;observationId&quot;: &quot;obs_002&quot;,
&quot;description&quot;: &quot;Growth rates inconsistent with previous board reports&quot;,
&quot;pageReference&quot;: &quot;Page 5&quot;,
&quot;suggestions&quot;: &quot;Provide detailed seasonal comparisons.&quot;
}
],
&quot;chainOfThought&quot;: &quot;Step-by-step reasoning details...&quot;
},
&quot;completedAt&quot;: &quot;2025-02-02T16:30:00Z&quot;
}
```

### Report Generation

#### POST /report/generate

Description: Generates a draft board report or management email based on selected observations.

Request Body:

```
{
&quot;analysisId&quot;: &quot;analysis_xyz789&quot;,
&quot;selectedObservations&quot;: [&quot;obs_001&quot;, &quot;obs_002&quot;],
&quot;emailTemplate&quot;: &quot;management&quot;, // Options: &quot;management&quot;, &quot;internal&quot;, &quot;summary&quot;
&quot;localization&quot;: {
&quot;language&quot;: &quot;sv&quot;
}
}
```

Response:

```
{
&quot;reportId&quot;: &quot;report_456def&quot;,
&quot;draftEmailText&quot;: &quot;Dear CEO, I have reviewed the board documents and identified the following issues: ...&quot;,
&quot;reportHtml&quot;: &quot;&lt;html&gt;&lt;title&gt;Board review&lt;/title&gt;&lt;body className=&quot;...&quot;&gt;&lt;Card&gt;&lt;CardHeader&gt;&lt;CardTitle&gt;Report for XXX on YYY&lt;/CardTitle&gt;&lt;/CardHeader&gt;&lt;CardContent&gt;,,,&quot;
&quot;generatedAt&quot;: &quot;2025-02-02T16:35:00Z&quot;
}
```

### Prompt Management &amp; Optimization

#### GET /prompts/versions

Description: Lists all available prompt templates with version history.

Response:

```
{
&quot;prompts&quot;: [
{
&quot;promptId&quot;: &quot;prompt_001&quot;,
&quot;version&quot;: &quot;1.3&quot;,
&quot;description&quot;: &quot;Localized prompt for data inconsistency analysis&quot;,
&quot;lastUpdated&quot;: &quot;2025-01-20T12:00:00Z&quot;
},
{
&quot;promptId&quot;: &quot;prompt_002&quot;,
&quot;version&quot;: &quot;1.1&quot;,
&quot;description&quot;: &quot;Prompt for generating board reports&quot;,
&quot;lastUpdated&quot;: &quot;2025-01-18T10:30:00Z&quot;
}
]
}
```

#### POST /prompts/optimize

Description: Initiates an automated prompt optimization process using observability feedback.

Request Body:

```
{
&quot;promptId&quot;: &quot;prompt*001&quot;,
&quot;observabilityData&quot;: { /* aggregated metrics and trace logs from Langfuse \_/ },
&quot;optimizationParameters&quot;: {
&quot;algorithm&quot;: &quot;MAPO&quot;,
&quot;iterations&quot;: 50
}
}
```

Response:

```
{
&quot;promptId&quot;: &quot;prompt_001&quot;,
&quot;newVersion&quot;: &quot;1.4&quot;,
&quot;status&quot;: &quot;optimization_started&quot;,
&quot;estimatedCompletion&quot;: &quot;2025-02-02T17:00:00Z&quot;
}
```

### Observability &amp; Monitoring

#### GET /observability/traces

Description: Retrieves detailed observability traces for LLM calls.

Query Parameters:

- analysisId (optional): Filter traces by a specific analysis.
- timeRange (optional): Specify a time window.

Response:

```
{
&quot;traces&quot;: [
{
&quot;traceId&quot;: &quot;trace_abc123&quot;,
&quot;analysisId&quot;: &quot;analysis_xyz789&quot;,
&quot;timestamp&quot;: &quot;2025-02-02T16:10:00Z&quot;,
&quot;chainOfThought&quot;: &quot;Step 1: ... Step 2: ...&quot;,
&quot;metrics&quot;: {
&quot;latency&quot;: 450, // in milliseconds
&quot;tokenUsage&quot;: 150
}
},
{
&quot;traceId&quot;: &quot;trace_def456&quot;,
&quot;analysisId&quot;: &quot;analysis_xyz789&quot;,
&quot;timestamp&quot;: &quot;2025-02-02T16:11:00Z&quot;,
&quot;chainOfThought&quot;: &quot;Step 1: ... Step 2: ...&quot;,
&quot;metrics&quot;: {
&quot;latency&quot;: 470,
&quot;tokenUsage&quot;: 145
}
}
]
}
```</file><file path="docs/PRD.md"># BoardAIssistant.com Product Requirements Document (PRD)

**Version:** 1.0  
**Date:** February 2, 2025

---

## 1. Executive Summary

**BoardAIssistant.com** is an AI‑powered board review assistant designed to streamline the analysis of extensive board materials. By leveraging advanced agentic LLMs that utilize tool integration and prompt evolution, our platform detects inconsistencies, missing key data, and unfounded conclusions while providing traceable, auditable reports. This PRD defines the product vision, scope, technical architecture, and measurable success criteria needed to reduce board member liability and improve decision-making efficiency.

---

## 2. Problem Statement &amp; Product Vision

### Problem Statement

Board members must review voluminous and complex documentation under time pressure. Manual review risks oversight, resulting in misinformed decisions and increased liability. Additionally, inconsistent report generation and lack of transparency hamper accountability.

### Product Vision

Our vision is to create a highly efficient, intelligent, and transparent assistant that:

- Automates the detection of errors and inconsistencies.
- Provides actionable, traceable insights.
- Evolves its prompts through continuous feedback and observability.
- Enhances decision-making while reducing board liability risk.

---

## 3. Target Audience

- **Board Members:** Require rapid, reliable insights into complex board materials.
- **Audit &amp; Compliance Officers:** Need traceable, documented reviews to support due diligence.
- **Corporate Secretaries:** Responsible for collating, archiving, and distributing board reports.

---

## 4. Scope &amp; Roadmap

### DEMO (MVP) Scope – Phase 1

- **Core Functionalities:**
  - Document upload (PDF) and extraction using the Unstructured library.
  - Predefined &quot;Data Inconsistency&quot; analysis driven by agentic LLM calls.
  - Basic report generation with actionable observations.
  - Draft email creation from analysis results.
  - Integration with Langfuse for prompt observability and feedback.
- **Key Success Metrics:**
  - ≥90% detection accuracy (verified by expert review).
  - ≥40% reduction in manual review time.
  - Positive user satisfaction (≥4/5 on surveys).

### Future Phases

- **Phase 2 (V1.5):** Localized language and legislation adaptations.
- **Phase 3 (V2):** Trade‑specific reporting modules (e.g., for shipping, retail).
- **Phase 4 (V3):** Advanced business advisory features and expanded report types (e.g., cash flow, full audit trails).
- **Ongoing Enhancements:** Expanded prompt optimization, additional agentic capabilities, and refined observability dashboards.

---

## 5. Features &amp; Requirements

### 5.1. Functional Features

- **Document Processing:**
  - Secure upload and file-type validation.
  - Text extraction via the Unstructured library.
- **LLM-Driven Analysis:**
  - Predefined prompts to detect inconsistencies, missing data, and illogical conclusions.
  - Agentic LLM calls that incorporate tool usage (e.g., numerical validation, cross‑document comparison).
- **Report &amp; Communication Generation:**
  - Structured report output with page/section references.
  - Auto-generation of draft emails to management.
- **Prompt Evolution &amp; Optimization:**
  - Iterative prompt refinement using automated feedback loops.
  - Version control of prompt templates integrated with Langfuse.
- **Observability &amp; Traceability:**
  - Logging of each LLM call (including chain-of-thought and tool invocations).
  - Metrics tracking (latency, token usage, cost) via OpenTelemetry integration.
  - Real‑time dashboards for monitoring performance and evaluation feedback.

### 5.2. Non‑Functional Requirements

- **Performance:**
  - Response time for document analysis under 30 seconds per document.
- **Security:**
  - End-to-end encryption for document storage and transit.
  - Role‑based access control for sensitive data.
- **Scalability &amp; Reliability:**
  - Modular architecture supporting increased user concurrency.
  - Robust error handling and logging.
- **Usability:**
  - Intuitive, responsive UI on both desktop and tablet.
  - Minimal training required for board members.

---

## 6. Technical Architecture &amp; Integration

### 6.1. Overall Architecture

Our solution follows a distributed architecture, partitioning responsibilities between the frontend and backend:

- **Frontend (Next.js 15 with Vercel AI SDK):**

  - **Responsibilities:**
    - Deliver a dynamic, interactive UI for document upload, real‑time LLM chat, and prompt input.
    - Handle lightweight, immediate LLM calls for user queries.
    - Display observability data and prompt evaluation summaries.
    - **Manage user authentication using Supabase Auth with SSR.**
    - **Handle direct uploads to Supabase Storage (if implemented).**
  - **Integrations:**
    - Vercel AI SDK for low‑latency LLM interactions.
    - Consume prompt metrics and dashboards from Langfuse via RESTful APIs.
    - **Supabase JS SDK for authentication and storage.**

- **Backend (FastAPI in Python) (Potentially de-prioritized for Phase 1, backend logic in Server Actions):**
  - **Responsibilities:**
    - Orchestrate heavy, long‑running tasks (e.g., full document analysis, prompt evolution, report generation).
    - Process documents using the Unstructured library.
    - Make LLM API calls via our Python SDK for in‑depth analysis.
    - Instrument calls with the Langfuse Python SDK for detailed observability.
  - **Integrations:**
    - OpenTelemetry libraries for distributed tracing.
    - Integration with our chosen LLM provider (ChatGPT/DeepSeek r1) for deep analyses.
    - Langfuse for logging, prompt management, and feedback collection.
    - **Supabase Python client for database interactions.**

**Simplified Architecture for Phase 1 (Next.js 14 + Supabase):**

- **Frontend (Next.js 14):** UI, User Authentication (Supabase Auth), Document Upload (Supabase Storage or Server Actions).
- **Server Actions:** Backend logic for document processing, LLM analysis, database interactions, and Langfuse integration.
- **Supabase:** Database, Storage, Authentication.

### 6.2. Agent &amp; Tool Definitions

- **Board Material Analysis Agent (Backend):**
  - Extracts text from board documents.
  - Constructs context-rich prompts.
  - Invokes LLM analysis and collates chain‑of‑thought data.
- **Prompt Optimization Agent (Backend):**
  - Iteratively refines prompts based on performance feedback.
  - Uses evaluation metrics from Langfuse to select optimal prompt versions.
- **Interactive Chat Agent (Frontend):**
  - Provides immediate, lightweight responses for ad‑hoc queries.
  - Supports real‑time conversation with the AI via the Vercel AI SDK.

---

## 7. AI SDK &amp; Observability Integration

### Frontend (Next.js + Vercel AI SDK)

- **Vercel AI SDK:**
  - Enables interactive prompt submission and real‑time responses.
  - Supports quick iterations and user feedback collection.
- **UI Observability:**
  - Integrates with Langfuse to display summary metrics, trace snapshots, and prompt evolution data.

### Backend (FastAPI + Langfuse Python SDK)

- **FastAPI Endpoints:**
  - Expose REST APIs for file upload, document processing, LLM analysis, and report generation.
- **Langfuse Python SDK:**
  - Instruments all LLM API calls.
  - Captures detailed traces (including intermediate reasoning and tool invocations).
  - Logs prompt versions and collects automated evaluation metrics.
- **OpenTelemetry Integration:**
  - Standardizes telemetry data for integration with Prometheus and Grafana dashboards.

### Document Processing

- **Unstructured Library:**
  - Extracts and cleans raw text from uploaded board documents.
  - Feeds processed content into LLM prompts for analysis.

---

## 8. Risks, Mitigations &amp; Open Questions

### Risks &amp; Mitigations

| **Risk**                                                                           | **Mitigation**                                                                                                |
| ---------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |
| **Prompt Brittleness:** Minor changes could impact output quality.                 | Iterative A/B testing and automated prompt optimization using Langfuse to select optimal prompt versions.     |
| **Security of Sensitive Data:** Board materials are confidential.                  | Implement robust encryption (in transit and at rest) and role-based access controls; regular security audits. |
| **System Scalability:** Handling high volumes of concurrent LLM calls.             | Modular architecture with scalable FastAPI and Next.js components; use Kubernetes for dynamic scaling.        |
| **LLM Performance Variability:** Non-deterministic outputs can reduce reliability. | Implement detailed observability with OpenTelemetry and Langfuse, combined with human-in-the-loop reviews.    |

### Open Questions

- How frequently should prompt templates be re‑evaluated and updated based on real‑world feedback?
- What is the optimal balance between automated LLM prompt optimization and manual review?
- How can we further integrate domain-specific knowledge (e.g., board governance best practices) into prompt evolution?

---

## 9. Conclusion

This updated PRD reflects our commitment to building a robust, agentic board review assistant that leverages advanced observability, prompt evolution, and modular AI integrations. By clearly delineating responsibilities between our Python FastAPI backend and Next.js/Vercel AI SDK frontend, and by adopting best practices from Cursor&apos;s guidelines, we aim to deliver a high‑performance, secure, and scalable solution for board members. Continuous evaluation and prompt optimization will ensure that our system evolves alongside our users&apos; needs and advances in LLM technology.

---

*This document is a living artifact, updated iteratively as our system and insights evolve.*ß</file><file path="docs/Roadmap_gemini.md"># BoardAIssistant.com - Optimized Development Roadmap for Single Developer

## Roadmap Outline

&lt;roadmap_outline&gt;

### Phase 1: Requirements &amp; Architecture Setup

- **Goal:** Establish overall project understanding, basic architecture, and initial setup.
- **Focus:** Requirements review, simplified architecture, core dependencies, and initial prompt logic.

#### 1.1. Requirements and Dependencies Review

- **Tasks:**
  - [ ] Review **PRD.md, SRS.md, API.md, Schema.md** to fully understand project goals, features, data model, and API specifications.
  - [ ] Identify key dependencies: Next.js 14, Supabase, Shadcn UI, Drizzle, Vercel AI SDK, Langfuse.
  - [ ] Confirm Supabase project setup and initial database schema based on **Schema.md**.
  - [ ] Set up local development environment with Node.js, pnpm, and Supabase CLI.

#### 1.2. Simplified Architecture Definition

- **Tasks:**
  - [ ] Define a simplified architecture focusing on Next.js 14 (app router, server actions) and Supabase for MVP.
  - [ ] De-prioritize separate FastAPI backend for Phase 1. Implement backend logic within Next.js server actions initially to reduce complexity. Re-evaluate need for FastAPI later.
  - [ ] Plan for data flow: Frontend (Next.js) &lt;-&gt; Server Actions &lt;-&gt; Supabase &lt;-&gt; (Future: Langfuse).
  - [ ] Outline core components: Document Upload, Analysis (Data Inconsistency), Report Generation (Draft Email), Observability (basic Langfuse).

#### 1.3. Initial Prompt Logic &amp; Observability Setup

- **Tasks:**
  - [ ] Implement a basic prompt for &quot;Data Inconsistency&quot; analysis as described in **PRD.md**. Store this initial prompt as a string constant in code for simplicity.
  - [ ] Integrate Langfuse client-side SDK in Next.js to start basic observability for frontend interactions and server action calls. Focus on logging request/response for initial LLM calls.
  - [ ] Set up basic logging within server actions to track execution flow and potential errors.

#### 1.4. Basic Project Setup

- **Tasks:**
  - [ ] Initialize Next.js 15 project using `pnpm create next-app`.
  - [ ] Install core dependencies: `shadcn-ui`, `tailwindcss`, `lucide-react`, `drizzle-orm`, `@supabase/supabase-js`, `zod`, `zustand`, `@langfuse/client`.
  - [ ] Configure Tailwind CSS and Shadcn UI with Scandinavian style in mind.
  - [ ] Set up basic layout with `app/layout.tsx` and initial page `app/page.tsx`.
  - [ ] Implement Supabase authentication setup with SSR as outlined in project conventions.
  - [ ] Create `providers/editor-provider.tsx` with Zustand store setup as per instructions.

### Phase 2: Iterative Feature Development

- **Goal:** Develop core features incrementally, focusing on one feature at a time, from data model to frontend UX.
- **Approach:** For each feature (Document Upload, Analysis, Report Generation, Prompt Management, Observability), follow these steps:

#### 2.X. Feature: [FEATURE NAME]

##### 2.X.1. Technical Spike

- **Task:** Create a feasibility prototype to verify technical assumptions and explore implementation approaches for the specific feature.
- **Example (Document Upload &amp; Supabase Auth):** Quickly prototype file upload to Supabase Storage and user authentication with Supabase Auth directly from a client component to understand the flow and necessary libraries.

##### 2.X.2. Data Model Design

- **Task:** Define any new tables or fields in `docs/Schema.md` and update `schema.ts` accordingly using Drizzle.
- **Example (Document Upload):** Define `documents` table in `schema.ts` with columns: `document_id`, `user_id`, `file_name`, `storage_url`, `created_at`.

##### 2.X.3. API and Backend (Server Actions)

- **Task:** Implement server actions in separate files (e.g., `app/actions/documents.ts`, `app/actions/analysis.ts`, etc.) to handle backend logic.
- **Task:** Align with API specifications in `API.md` and requirements in `SRS.md`.

##### 2.X.4. Frontend Implementation

- **Task:** Develop or update user-facing components in `app/components/` using React, Shadcn UI, and Tailwind CSS.
- **Task:** Connect frontend components to server actions for data fetching and mutations.

##### 2.X.5. Refine User Experience

- **Task:** Address basic usability and consistency. Ensure clear feedback for user actions (e.g., upload progress, analysis status).
- **Task:** Keep UI simple and aligned with Scandinavian design principles.

#### 2.1. Feature: Document Upload

[X] Technical Spike

- Evaluated Unstructured client library vs direct API calls
- Decided on direct REST API approach due to type definition issues
- Documented API integration in lessons

[X] Data Model Design

- Defined `documents` table with proper relations
- Added indexes for performance
- Added metadata fields for document processing

[X] API and Backend (Server Actions)

- Implemented document upload to Supabase Storage
- Integrated Unstructured API for text extraction
- Added proper error handling and validation
- Updated database schema and queries

[ ] Frontend Implementation

- Create document upload component with progress indicator
- Add error handling UI
- Implement document list view
- Add loading states and error messages

[ ] Testing and Refinement

- Test file upload functionality
- Test document processing with various file types
- Test error scenarios
- Add retry logic for API calls
- Add proper user feedback

#### 2.2. Feature: Data Inconsistency Analysis

- [ ] Follow steps 2.X.1 - 2.X.5 for Data Inconsistency Analysis feature. Focus on basic analysis and result display.

#### 2.3. Feature: Report Generation (Draft Email)

- [ ] Follow steps 2.X.1 - 2.X.5 for Report Generation (Draft Email) feature. Keep report generation simple initially, focusing on draft email output.

#### 2.4. Feature: Basic Prompt Management

- [ ] Follow steps 2.X.1 - 2.X.5 for Basic Prompt Management. For MVP, implement simple storage and retrieval of prompts, potentially directly in the database or even config files. Defer advanced prompt optimization for later phases.

#### 2.5. Feature: Observability Integration (Langfuse)

- [ ] Follow steps 2.X.1 - 2.X.5 for Observability Integration. Expand Langfuse integration to track LLM calls, latency, and basic metrics in server actions. Focus on backend observability first.

### Phase 3: Continuous Improvement &amp; Maintenance

- **Goal:** Enhance system, optimize performance, improve observability, and prepare for future iterations.
- **Focus:** Scratchpad usage, todo list, observability enhancements, CI/CD, feedback loop, and change management.

#### 3.1. Scratchpad &amp; Development Notes

- **Tasks:**
  - [ ] Maintain an active scratchpad (like `.cursorrules`) for brainstorming, agent debugging, prompt evolution ideas, and experiment results.
  - [ ] Regularly save and review interim ideas and experiment results in the scratchpad.

#### 3.2. Todo List &amp; Version History Log

- **Tasks:**
  - [ ] Keep a dynamic todo list of pending tasks and feature refinements (e.g., in a simple markdown file `TODO.md` or using a task management tool).
  - [ ] Log version history changes with timestamps and descriptions for every update in a `CHANGELOG.md` file.
  - [ ] Integrate Git version control best practices to review and roll back changes if necessary.

#### 3.3. Observability &amp; Monitoring Enhancements

- **Tasks:**
  - [ ] Enhance Langfuse integration for real-time performance monitoring and prompt optimization.
  - [ ] Implement more detailed logging and metrics to capture agent activity and potential failures.
  - [ ] Explore Langfuse dashboards for visualizing observability data.

#### 3.4. Continuous Integration and Deployment (CI/CD)

- **Tasks:**
  - [ ] Automate basic testing cycles (unit/integration tests as developed in Phase 2).
  - [ ] Set up a simple CI/CD pipeline for deployment to Vercel.

#### 3.5. Feedback Loop and Iterative Refinement

- **Tasks:**
  - [ ] Gather user and developer feedback on instructions, UI, and core functionality.
  - [ ] Iterate on prompt optimization and observability based on feedback and Langfuse data.

#### 3.6. Change Management

- **Tasks:**
  - [ ] Document all significant changes in both project-wide meeting notes (if applicable) and in the `CHANGELOG.md` version history log.
  - [ ] Schedule regular reviews of the scratchpad notes to prioritize technical spikes and tasks for upcoming iterations.

#### 3.7. Regular Sync-Up &amp; Code Reviews

- **Tasks:**
  - [ ] Hold periodic self-reviews to track progress against the roadmap.
  - [ ] Adjust the roadmap dynamically based on sprint retrospectives and stakeholder feedback (if available).
  - [ ] If possible, seek external code reviews for key features or complex logic.

&lt;/roadmap_outline&gt;

## Development Steps Summary

- **Consult Documentation:** Regularly refer to `docs/` for requirements, schema, API details, and system specifications.
- **Core Endpoints &amp; Data Flows:** Focus on implementing core data flows for document upload, analysis, and report generation.
- **Initial Prompt Logic &amp; Observability:** Start with simple prompts and basic Langfuse observability to establish a functional baseline.
- **Unit &amp; Integration Tests:** Set up basic testing for each feature as it&apos;s developed to ensure functionality and prevent regressions.

This roadmap is designed to be iterative and adaptable for a single developer. Prioritize simplicity, focus on core features first, and continuously refine based on feedback and observability data.</file><file path="docs/Roadmap_meta.md">You are a senior product manager.

You are tasked with creating an optimized development roadmap for a single developer.

1. Organize your Roadmap into the following sections:

   &lt;roadmap_outline&gt;

- Look for Requirements and Dependencies Review all relevant documents to gather requirements and constraints:
- project-plan/

# Phase 1: Requirements &amp; Architecture Setup - Establish overall goals and constraints from @/knowledge-base/docs/PRD.md and @/knowledge-base/docs/SRS.md

Clarify architecture for the project (no full infrastructure setup needed).

# Phase 2: Iterative Feature Development

For each feature below, follow these steps:

1. Technical Spike

- Think of a feasibility prototype to verify assumptions.

2. Data Model Design

- Define any new tables or fields in Schema.md.
- Add initial data to avoid empty table errors.

3. API and Backend

- Implement or update API endpoints as referenced in API.md.
- Align with requirements in @/knowledge-base/docs/SRS.md

4. Frontend Implementation

- Develop or update user-facing

5. Refine User Experience

- Address usability and consiste

&lt;/roadmap_outline&gt;

2. Outline the Development Steps:

- Consult all documentation files (@/docs/).
- Define core endpoints and data flows.
- Implement initial prompt logic and align it with observability for agentic actions.
- Set up unit and integration tests for every feature.

# Phase 3: Continuous Improvement &amp; Maintenance

- Keep a dynamic todo list of pending tasks and feature refinements.
- Log version history changes with timestamps and descriptions for every update.
- Integrate version control best practices to review and roll back changes if necessary.</file><file path="docs/Roadmap_o3-mini.md"># Development Roadmap for BoardAIssistant.com

This roadmap outlines the development plan for a single developer and integrates all project requirements, core endpoints, and observability needs for the platform. It leverages documentation from PRD.md, Schema.md, API.md, and SRS.md, with an iterative, measured approach.

---

## 1. Requirements &amp; Dependencies Review

- **Review Project Documentation:**
  - **PRD.md:** Understand the product vision, core functionalities, and success metrics.
  - **Schema.md:** Familiarize with the database design, key tables, and auto-populated fields (e.g., using `auth.uid()`).
  - **API.md:** Identify and plan for the core API endpoints, both for Next.js server actions and FastAPI endpoints.
  - **SRS.md:** Clarify the overall system requirements, agent workflows, and technical architecture.
- **Align Dependencies &amp; Stack:**
  - **Frontend:** Next.js 15 with Vercel AI SDK, Shadcn UI, Tailwind CSS.
  - **Backend:** Python FastAPI, Unstructured library, Langfuse for observability.
  - **Database &amp; Storage:** Supabase with drizzle ORM, and Zod for schema validations.
  - **Authentication &amp; State:** next-auth integrated with Supabase and zustand for state management.
- **Document Constraints and Priorities:**
  - Lightweight MVP with minimal infrastructure.
  - Iterative feature rollouts and robust observability.
  - Scandinavian-specific localization and UI design.

---

## 2. Phase 1: Requirements &amp; Architecture Setup

**Objective:** Establish the project&apos;s foundational goals and validate technical interfaces without a full infrastructure setup.

- **Task 1: Requirements Gathering**

  - Consolidate all product requirements and measurable goals from the documentation.
  - Identify dependencies and align on tech stack components.

- **Task 2: Architecture Clarification**

  - Define the overall data flow: from document upload → processing via FastAPI → LLM analysis → observability logging → report generation.
  - Delineate responsibilities between the Next.js frontend and FastAPI backend.
  - Confirm integration requirements for Supabase, Langfuse, drizzle ORM, and zustand.

- **Task 3: Initial Project Setup**

  - Scaffold repositories for frontend and backend.
  - Set up version control and a basic CI/CD pipeline for testing and incremental deployments.
  - Create placeholder documentation in the scratchpad and log version history.

- **Task 4: Documentation &amp; Communication**
  - Update documentation with the initial architectural decisions.
  - Record assumptions and decisions in the scratchpad for continuous reference.

---

## 3. Phase 2: Iterative Feature Development

For each feature, follow an iterative cycle:

### Feature Cycle for Core Functionalities

1. **Technical Spike**

   - Prototype feasibility tests to verify assumptions.
   - Document the learnings in the scratchpad.

2. **Data Model Design**

   - Update `Schema.md` with any new table definitions or field additions.
   - Seed initial data to prevent empty table errors.

3. **API &amp; Backend Implementation**

   - Implement or update FastAPI endpoints as per `API.md` (e.g., document processing, LLM analysis, report generation).
   - Integrate observability hooks (Langfuse) for tracing LLM actions and prompt optimizations.
   - Validate API flows against SRS requirements.

4. **Frontend Implementation**

   - Develop user-facing pages/components using Next.js 15 with Vercel AI SDK and styled with Tailwind &amp; Shadcn UI.
   - Integrate API endpoints to provide real-time feedback and interactive dashboards.
   - Ensure localization for Scandinavian languages.

5. **User Experience Refinement**
   - Iterate on UI/UX after internal testing.
   - Ensure usability improvements and consistency with the Scandinavian design language.
   - Add unit and integration tests for every updated feature.

**Example Feature Set:**

- **Document Upload &amp; Processing:** File upload interface, Supabase Storage integration, text extraction via the Unstructured library.
- **LLM Analysis Execution:** Endpoint for initiating LLM analysis, logging chain-of-thought traces, and handling observability.
- **Report Generation:** Backend endpoints for draft email and report creation, integrated with observer data.
- **Prompt Management:** Version-controlled prompt templates, integration with optimization process, A/B testing setup.

---

## 4. Phase 3: Continuous Improvement &amp; Maintenance

**Objective:** Ensure long-term stability, continuous enhancement, and observability for the system.

1. **Documentation &amp; Scratchpad Maintenance**

   - Maintain an active scratchpad for brainstorming, agent debugging, and prompt evolution.
   - Update version history logs with timestamps and concise change summaries.

2. **Todo List &amp; Feature Refinement**

   - Keep a dynamic todo list of pending tasks, technical spikes, and feature refinements.
   - Regularly review and prioritize tasks based on feedback and unit test results.

3. **Observability &amp; Monitoring Enhancements**

   - Enhance integrations with Langfuse and optional OpenLLMetry.
   - Set up dashboards to monitor LLM performance, chain-of-thought tracing, and observability metrics.

4. **CI/CD Pipeline Optimization**

   - Automate the testing cycles and integrate continuous deployments.
   - Update documentation alongside technical changes to ensure clarity across all components.

5. **Feedback Loop &amp; Iterative Refinement**

   - Gather user and developer feedback on UI and performance.
   - Continuously iterate on prompt optimization and overall feature usability.
   - Schedule periodic sync-ups and code reviews to track progress.

6. **Change Management**
   - Document significant changes in meeting notes and the version history log.
   - Foster a culture of regularly reviewing scratchpad insights to reprioritize upcoming work.

---

## 5. Final Remarks

- **Agility &amp; Simplicity:** Prioritize a simple, maintainable codebase while validating continuously with technical spikes.
- **Clear Communication:** Regularly update documentation to reflect evolving requirements, technical decisions, and feature improvements.
- **User-Centric Development:** Keep Scandinavian board needs and usability at the forefront of every feature.

This roadmap serves as a detailed guide for iterative development, ensuring both a robust MVP and a scalable foundation for future enhancements.</file><file path="docs/Roadmap_r1.md">&lt;think&gt;
Okay, let&apos;s start by understanding the user&apos;s request. They want me to create an optimized development roadmap for a single developer based on the provided project documentation. The roadmap needs to be organized into specific phases and sections as outlined.

First, I&apos;ll review all the relevant documents: PRD, Schema, API, SRS, and the existing .cursorrules file. These documents outline the project&apos;s goals, database schema, API endpoints, and technical requirements. The main focus is on Phase 1 and Phase 2, as Phase 3 is more about maintenance.

For Phase 1, the Requirements &amp; Architecture Setup, I need to identify the core components from the docs. The PRD mentions using Next.js 15 with Vercel AI SDK for the frontend and FastAPI for the backend. The SRS emphasizes observability with Langfuse and integration with Supabase. I should outline the architecture, data flows, and initial setup steps without full infrastructure setup.

Moving to Phase 2, Iterative Feature Development, each feature needs to follow technical spikes, data model design, API/backend, frontend, and UX refinement. Looking at the Schema.md, the tables are already defined, so I&apos;ll check if any new fields or tables are needed for features like document upload or LLM analysis. The API.md lists endpoints, so I&apos;ll align backend and frontend implementations with those.

I should break down the features into manageable steps. For example, the document processing feature requires a technical spike on the Unstructured library, ensuring it works with Supabase Storage. Then, design the data model, implement the FastAPI endpoint, and create the frontend components in Next.js.

Testing is crucial, so each feature must include unit and integration tests. Observability integration with Langfuse should be part of the backend implementation for tracking LLM calls.

I need to ensure that the roadmap is realistic for a single developer, prioritizing MVP features first. The roadmap should also include placeholders for future phases as per the PRD, but focus on the initial phases.

Potential risks include prompt brittleness and security concerns, which are mentioned in the PRD. Mitigations like A/B testing and encryption should be noted in the roadmap under respective phases.

Finally, the roadmap should be concise, following the outlined structure, and ensuring all sections from the user&apos;s instructions are covered. I&apos;ll avoid unnecessary details and keep each step actionable for the developer.
&lt;/think&gt;

````markdown:docs/Roadmap.md
# BoardAIssistant.com Development Roadmap

## Phase 1: Requirements &amp; Architecture Setup (Weeks 1-2)

### Core Architecture Validation
1. Confirm component responsibilities per SRS:
   - Next.js: UI/lightweight interactions
   - FastAPI: Document processing/LLM analysis
   - Langfuse: Observability pipeline
2. Establish data flows:
   ```mermaid
   graph TD
     A[Document Upload] --&gt; B[Supabase Storage]
     B --&gt; C[Unstructured Processing]
     C --&gt; D[LLM Analysis]
     D --&gt; E[Langfuse Tracing]
     E --&gt; F[Prompt Optimization]
````

### Initial Setup

1. Scaffold Next.js app with:
   - Shadcn UI configured
   - Supabase auth integration
   - Vercel AI SDK skeleton
2. FastAPI base setup with:
   - Supabase Python client
   - Langfuse instrumentation
   - Unstructured.io integration spike

## Phase 2: Iterative Feature Development

### Feature 1: Secure Document Processing (Weeks 3-4)

1. **Technical Spike**: Unstructured lib + Supabase Storage POC
2. **Data Model**:
   - Add `processing_status` field to `documents` table
   - Create `document_versions` table for revision history
3. **API**:
   ```python
   # FastAPI
   @app.post(&quot;/documents/process&quot;)
   async def process_document(file: UploadFile):
       # Supabase storage upload
       # Unstructured text extraction
       # Langfuse trace creation
   ```
4. **Frontend**:
   ```tsx
   // app/components/document-upload.tsx
   &lt;Dropzone
     onDrop={(files) =&gt; supabase.storage.upload(files[0])}
     accept=&quot;application/pdf&quot;
   /&gt;
   ```

### Feature 2: LLM Analysis Core (Weeks 5-6)

1. **Technical Spike**: Prompt chaining with local context injection
2. **Data Model**:
   - Add `analysis_parameters` JSONB field to `analysis`
   - Create `prompt_executions` join table
3. **API**:
   ```python
   # FastAPI
   @app.post(&quot;/analysis/run&quot;)
   async def run_analysis(document_id: UUID):
       with langfuse.trace() as trace:
           result = llm.invoke(prompt, tools=[...])
           trace.observation(result)
   ```
4. **Observability**:
   - Implement Langfuse dashboards for Scandinavian metrics
   - Set up prompt version A/B testing

### Feature 3: Report Generation (Weeks 7-8)

1. **Technical Spike**: Template engine evaluation (MJML vs PDFKit)
2. **Data Model**:
   - Add `report_locale` field to `reports`
   - Create `report_templates` table
3. **API**:
   ```python
   # FastAPI
   @app.post(&quot;/reports/generate&quot;)
   async def generate_report(analysis_id: UUID, locale: str):
       # Apply Scandinavian formatting rules
       # Generate PDF/email draft
   ```
4. **Frontend**:
   ```tsx
   // app/components/report-preview.tsx
   &lt;ScandinavianTemplatePicker
     onSelect={(template) =&gt; generateReport(template)}
   /&gt;
   ```

### Feature 4: Prompt Management (Weeks 9-10)

1. **Technical Spike**: MAPO optimization implementation
2. **Data Model**:
   - Add `optimization_metrics` to `prompt_templates`
   - Create `prompt_feedback` table
3. **API**:
   ```python
   # FastAPI
   @app.post(&quot;/prompts/optimize&quot;)
   async def optimize_prompt(prompt_id: UUID):
       # Analyze Langfuse metrics
       # Generate improved prompt version
   ```

## Phase 3: Continuous Improvement

### Observability Enhancements

1. Implement OpenTelemetry correlation IDs
2. Set up automated alert thresholds for:
   - LLM latency &gt;30s
   - Token usage spikes
   - Regional error rate increases

### CI/CD Pipeline

```yaml
# .github/workflows/deploy.yml
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - Run pytest with Supabase test container
      - Cypress UI tests against staging
  deploy:
    needs: test
    uses: Vercel+Supabase migration hooks
```

## Future Phase Placeholders

### V1.5 Localization

- Norwegian/Swedish/Danish template variants
- GDPR-compliant data handling

### V2 Trade Modules

- Shipping industry financial checks
- Retail inventory analysis flows

### V3 Advisory Features

- Cash flow prediction models
- Board voting pattern analysis

```

This roadmap follows the PRD&apos;s phased approach while incorporating technical realities from the SRS and API docs. Each feature includes the required spikes, data model changes, and observability integration points documented in the schema.
```</file><file path="docs/Schema.md"># Supabase Database Schema for BoardAIssistant.com

This document details the complete database schema for BoardAIssistant.com as implemented on Supabase (PostgreSQL). The schema supports user management, document processing, analysis and reporting, prompt management, observability logging, and notification services. All data models are created using Supabase&apos;s schema builder and are accessed via the Supabase SDK for data fetching and querying. Wherever applicable, the `auth.uid()` function is used as the default value for user-related columns—this ensures that the authenticated user&apos;s ID is automatically populated without requiring the client to send it explicitly.

---

## Table of Contents

1. [Users](#users)
2. [Documents](#documents)
3. [Analysis](#analysis)
4. [Observations](#observations)
5. [Reports](#reports)
6. [Prompt Templates](#prompt-templates)
7. [Observability Traces](#observability-traces)
8. [Notifications](#notifications)
9. [Prompt Optimization Logs](#prompt-optimization-logs)
10. [Database and Data Model Guidelines](#database-and-data-model-guidelines)
11. [Code Style Guide](#code-style-guide)

---

## 1. Users

**Table Name:** `users`

| Column Name  | Data Type | Constraints                               | Description                                                        |
| ------------ | --------- | ----------------------------------------- | ------------------------------------------------------------------ |
| id           | UUID      | PRIMARY KEY, UNIQUE, DEFAULT `auth.uid()` | Unique identifier for the user (auto-populated via Supabase Auth). **This ID should ideally reference `auth.users.id` from Supabase Auth.** |
| email        | TEXT      | NOT NULL, UNIQUE                          | User&apos;s email address. **Managed by Supabase Auth.**               |
| display_name | TEXT      | NOT NULL                                  | Full name of the user.                                             |
| locale       | TEXT      | NOT NULL                                  | User locale (e.g., &quot;no&quot;, &quot;sv&quot;, &quot;da&quot;, &quot;fi&quot;).                        |
| role         | TEXT      | DEFAULT &apos;board_member&apos;                    | User role (e.g., board_member, admin).                             |
| created_at   | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP                 | Timestamp of user account creation.                                |
| updated_at   | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP                 | Timestamp of the last profile update.                              |

**Notes:**
- **The `id` and `email` are now primarily managed by Supabase Auth&apos;s `auth.users` table. Our `users` table should ideally be linked to `auth.users` using foreign key relationship or ensure data consistency.**
- Consider if all fields are still necessary in our `users` table, as some might be redundant with Supabase Auth&apos;s user data.

---

## 2. Documents

**Table Name:** `documents`

| Column Name    | Data Type | Constraints                                              | Description                                                                                                                  |
| -------------- | --------- | -------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |
| document_id    | UUID      | PRIMARY KEY, UNIQUE                                      | Unique identifier for the document.                                                                                          |
| user_id        | UUID      | NOT NULL, FOREIGN KEY (`users.id`), DEFAULT `auth.uid()` | Reference to the uploading user (auto-populated). **Should reference our `users.id` which is linked to Supabase Auth user.** |
| company_id     | UUID      | NOT NULL, FOREIGN KEY (`companies.id`)                   | Reference to the company the document belongs to.                                                                            |
| file_name      | TEXT      | NOT NULL                                                 | Original file name of the uploaded document.                                                                                 |
| storage_url    | TEXT      | NOT NULL                                                 | URL from Supabase Storage where the file is hosted. **This will be a Supabase Storage URL.**                                 |
| processed_text | TEXT      | NOT NULL                                                 | Extracted text from the document using the Unstructured API.                                                                 |
| metadata       | JSONB     | NOT NULL                                                 | JSON object containing: size, type, uploadedAt, and other metadata.                                                          |
| created_at     | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP                                | Timestamp of document upload.                                                                                                |
| updated_at     | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP                                | Timestamp of last document update.                                                                                           |

**Notes:**

- Document text is extracted using the Unstructured API (https://api.unstructured.io/general/v0/general)
- Files are stored in **Supabase Storage** under the path pattern: `{user_id}/{file_name}` **or a more appropriate structure.**
- Metadata includes file size, type, upload timestamp, and any additional metadata from processing

---

## 3. Analysis

**Table Name:** `analysis`

| Column Name   | Data Type | Constraints                                     | Description                                                                  |
| ------------- | --------- | ----------------------------------------------- | ---------------------------------------------------------------------------- |
| analysis_id   | UUID      | PRIMARY KEY, UNIQUE                             | Unique identifier for the analysis job.                                      |
| document_id   | UUID      | NOT NULL, FOREIGN KEY (`documents.document_id`) | The document being analyzed.                                                 |
| analysis_type | TEXT      | NOT NULL                                        | Type of analysis (e.g., &quot;data_inconsistency&quot;, &quot;fact_check&quot;, &quot;missing_info&quot;). |
| local_context | JSONB     |                                                 | Regional parameters (e.g., local regulations, financial standards).          |
| status        | TEXT      | NOT NULL, DEFAULT &apos;processing&apos;                  | Current status: processing, completed, or failed.                            |
| submitted_at  | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP                       | Timestamp when analysis was submitted.                                       |
| completed_at  | TIMESTAMP |                                                 | Timestamp when analysis was completed.                                       |
| results       | JSONB     |                                                 | JSON object containing raw analysis results and aggregated insights.         |

---

## 4. Observations

**Table Name:** `observations`

| Column Name    | Data Type | Constraints                                    | Description                                                      |
| -------------- | --------- | ---------------------------------------------- | ---------------------------------------------------------------- |
| observation_id | UUID      | PRIMARY KEY, UNIQUE                            | Unique identifier for the observation.                           |
| analysis_id    | UUID      | NOT NULL, FOREIGN KEY (`analysis.analysis_id`) | Reference to the parent analysis job.                            |
| description    | TEXT      | NOT NULL                                       | Description of the observation (e.g., data inconsistency found). |
| page_reference | TEXT      |                                                | Reference to the page or section in the document.                |
| suggestions    | TEXT      |                                                | Suggested corrective action.                                     |
| created_at     | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP                      | Timestamp when the observation was recorded.                     |

---

## 5. Reports

**Table Name:** `reports`

| Column Name  | Data Type | Constraints                                    | Description                                       |
| ------------ | --------- | ---------------------------------------------- | ------------------------------------------------- |
| report_id    | UUID      | PRIMARY KEY, UNIQUE                            | Unique identifier for the report.                 |
| analysis_id  | UUID      | NOT NULL, FOREIGN KEY (`analysis.analysis_id`) | The analysis from which the report was generated. |
| draft_email  | TEXT      | NOT NULL                                       | Generated draft email or report text.             |
| generated_at | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP                      | Timestamp when the report was generated.          |

---

## 6. Prompt Templates

**Table Name:** `prompt_templates`

| Column Name  | Data Type | Constraints               | Description                                                                                               |
| ------------ | --------- | ------------------------- | --------------------------------------------------------------------------------------------------------- |
| prompt_id    | UUID      | PRIMARY KEY, UNIQUE       | Unique identifier for the prompt template.                                                                |
| version      | TEXT      | NOT NULL                  | Version of the prompt template (e.g., &quot;1.3&quot;, &quot;1.4&quot;).                                                      |
| description  | TEXT      |                           | Brief description of the template&apos;s purpose (e.g., &quot;Data inconsistency analysis – Scandinavian context&quot;). |
| content      | TEXT      | NOT NULL                  | The actual prompt text/template.                                                                          |
| last_updated | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP | Timestamp when the template was last modified.                                                            |

---

## 7. Observability Traces

**Table Name:** `observability_traces`

| Column Name      | Data Type | Constraints                          | Description                                                 |
| ---------------- | --------- | ------------------------------------ | ----------------------------------------------------------- |
| trace_id         | UUID      | PRIMARY KEY, UNIQUE                  | Unique identifier for the trace log.                        |
| analysis_id      | UUID      | FOREIGN KEY (`analysis.analysis_id`) | Associated analysis job identifier.                         |
| timestamp        | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP            | Time when the trace was recorded.                           |
| chain_of_thought | TEXT      |                                      | Full chain-of-thought text or intermediate reasoning steps. |
| metrics          | JSONB     |                                      | JSON object capturing metrics (e.g., latency, token usage). |

---

## 8. Notifications

**Table Name:** `notifications`

| Column Name     | Data Type | Constraints                                              | Description                                            |
| --------------- | --------- | -------------------------------------------------------- | ------------------------------------------------------ |
| notification_id | UUID      | PRIMARY KEY, UNIQUE                                      | Unique identifier for the notification.                |
| user_id         | UUID      | NOT NULL, FOREIGN KEY (`users.id`), DEFAULT `auth.uid()` | The target user for the notification (auto-populated). |
| message         | TEXT      | NOT NULL                                                 | Notification message text.                             |
| type            | TEXT      | NOT NULL                                                 | Notification type (e.g., &quot;info&quot;, &quot;alert&quot;, &quot;success&quot;).  |
| timestamp       | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP                                | Time when the notification was generated.              |
| read            | BOOLEAN   | DEFAULT FALSE                                            | Indicates whether the notification has been read.      |

---

## 9. Prompt Optimization Logs

**Table Name:** `prompt_optimization_logs`

| Column Name        | Data Type | Constraints                                          | Description                                                              |
| ------------------ | --------- | ---------------------------------------------------- | ------------------------------------------------------------------------ |
| log_id             | UUID      | PRIMARY KEY, UNIQUE                                  | Unique identifier for the optimization log entry.                        |
| prompt_id          | UUID      | NOT NULL, FOREIGN KEY (`prompt_templates.prompt_id`) | Reference to the prompt template being optimized.                        |
| previous_version   | TEXT      | NOT NULL                                             | Version before optimization.                                             |
| new_version        | TEXT      | NOT NULL                                             | New version after optimization.                                          |
| observability_data | JSONB     |                                                      | Aggregated metrics and trace logs used for optimization.                 |
| status             | TEXT      | NOT NULL, DEFAULT &apos;started&apos;                          | Status of the optimization run (e.g., &quot;started&quot;, &quot;completed&quot;, &quot;failed&quot;). |
| initiated_at       | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP                            | Timestamp when the optimization was initiated.                           |
| completed_at       | TIMESTAMP |                                                      | Timestamp when the optimization was completed.                           |

---

## 10. Database and Data Model Guidelines

- **Supabase Schema Builder:**  
  Use Supabase&apos;s schema builder for creating and maintaining the data model. This ensures consistency across all tables and leverages Supabase&apos;s best practices.

- **Supabase SDK for Data Operations:**  
  All data fetching and querying should be performed using the Supabase SDK (available for both JavaScript and Python). This provides seamless integration with Supabase services.

- **Automatic User ID Population:**  
  Set `auth.uid()` as the default value for user-related columns (e.g., `user_id` in `documents`, `notifications`). This way, the authenticated user&apos;s ID is automatically assigned without needing explicit client input.

---

_This SCHEMA.md provides a comprehensive overview of the Supabase database structure for BoardAIssistant.com, as well as guidelines for building and maintaining the codebase using modern technologies and best practices. The document ensures that user IDs are auto-populated via Supabase Auth, and it incorporates a strict Code Style Guide to support a clean, maintainable, and scalable project structure tailored for our Scandinavian board assistant application._</file><file path="docs/SRS.md"># Software Requirements Specification (SRS)

## BoardAIssistant.com – Agentic LLM Observability and Prompt Evolution Framework for Scandinavian Boards

**Version:** 1.2  
**Date:** February 2, 2025

---

## 1. Introduction

BoardAIssistant.com is an AI‑powered board assistant designed specifically for Scandinavian board members. It streamlines the review of extensive board materials while reducing liability risks by detecting data inconsistencies, missing information, and illogical conclusions. The system is optimized for local legislative requirements, financial reporting standards, and governance best practices in Scandinavia.

This SRS defines our ideal technology stack and integration strategy using a modular, agentic LLM system. Our architecture distinguishes between the heavyweight analysis and document processing (handled by Python FastAPI) and the real‑time, user‑facing interactions (managed by Next.js 15 with the Vercel AI SDK). We integrate advanced observability via Langfuse (and optionally OpenLLMetry) while leveraging Supabase products for storage, database, authentication, and real‑time capabilities.

---

## 2. Purpose and Scope

### 2.1 Purpose

This document specifies the technical requirements for a board review assistant that:

- Processes board documents to extract and analyze critical data.
- Provides regionally optimized insights for Scandinavian boards.
- Supports iterative prompt evolution (moved downstream in our pipeline) based on observability feedback.
- Integrates robust observability, secure storage, and real‑time monitoring using open‑source tools and Supabase products.

### 2.2 Scope

- **Frontend (Next.js 15 with Vercel AI SDK):**  
  Provides a clean, responsive Scandinavian‑styled UI for document uploads, real‑time feedback, and interactive agent sessions.

- **Backend (Python FastAPI):**  
  Handles heavy document processing (using the unstructured library), long‑running LLM analysis, and advanced LLM observability via Langfuse/OpenLLMetry.  
  Integrates with Supabase for persistent storage, database management, authentication, and real‑time notifications.

- **Observability &amp; Prompt Evolution:**  
  Employs Langfuse (primary) for tracing, metrics collection, and prompt versioning. Prompt optimization is performed as a downstream module—iteratively refining prompt templates based on observability data and performance feedback.

---

## 3. Definitions, Acronyms, and Abbreviations

- **LLM:** Large Language Model
- **AI SDK:** Application Programming Interface Software Development Kit
- **OTel:** OpenTelemetry
- **RAG:** Retrieval-Augmented Generation
- **Unstructured:** Open-source library for document text extraction
- **Langfuse:** Open-source LLM observability and prompt management platform
- **OpenLLMetry:** An OpenTelemetry‑based observability extension for LLMs
- **Supabase:** Open‑source backend platform for database, storage, authentication, and real‑time capabilities
- **Vercel AI SDK:** Toolkit for integrating AI functionalities into Next.js and other frontend frameworks
- **Localization:** Adaptation for Scandinavian languages and regulatory requirements

---

## 4. Overall Description

### 4.1 System Perspective

BoardAIssistant.com is a distributed system composed of:

- **Frontend Layer (Next.js 15 + Vercel AI SDK):**
  Renders an interactive dashboard with a Scandinavian design, handling user sessions **(using Supabase Auth)**, prompt submission, and real‑time updates. **Handles document uploads directly to Supabase Storage or via Server Actions.**

- **Backend Layer (Python FastAPI) (Potentially replaced by Server Actions for Phase 1):**
  Performs document processing, LLM-based analysis, and heavy computation. Integrates Supabase services for storage, database management, and authentication **(Supabase Auth is primary authentication)**. Also implements advanced observability using Langfuse/OpenLLMetry.

- **Observability &amp; Prompt Evolution Pipeline:**
  Observability data (including chain‑of‑thought traces, latency, and token usage) are collected via Langfuse and are used downstream to drive prompt evolution algorithms. Prompt optimization is executed as a later step in the processing pipeline to iteratively refine the prompt templates based on performance feedback.

- **Localization Module:**
  Ensures that all AI outputs and UI text adhere to Scandinavian languages and cultural/regulatory norms.

### 4.2 System Functions

- **Document Processing:**
  Extract and annotate text from board documents with the unstructured library. Annotate content with regional context (e.g., local financial standards, seasonal trends). **Documents are stored in Supabase Storage.**

- **LLM Analysis:**
  Execute localized LLM prompts to detect inconsistencies, identify missing information, and generate chain‑of‑thought reasoning.
  _Note:_ Advanced prompt optimization is performed downstream based on observability logs.

- **Prompt Management &amp; Evolution:**
  Maintain version-controlled prompt templates with localized variations. Use automated optimization (e.g., MAPO‑inspired techniques) driven by Langfuse observability data.

- **Observability &amp; Monitoring:**
  Integrate Langfuse&apos;s Python SDK (and optionally OpenLLMetry) to capture detailed traces of every LLM call, including tool interactions and reasoning steps.

- **User Communication:**
  Generate structured reports and draft communications (emails) that adhere to Scandinavian board norms.

- **Supabase Integration:**
  Use Supabase for:
  - **Database:** Store user profiles, document metadata, and prompt versions.
  - **Storage:** Save raw board documents securely. **Using Supabase Storage.**
  - **Authentication:** Handle user auth and session management. **Using Supabase Auth with SSR.**
  - **Realtime:** Provide live notifications (e.g., upload status, analysis progress).

---

## 5. Specific Requirements

### 5.1 Functional Requirements

#### 5.1.1 Document Upload and Processing

- **FR1:** The system shall allow board members to upload board documents (PDFs, images) via the UI.
- **FR2:** The backend shall process documents using the unstructured library to extract text and regional metadata.
- **FR3:** Extracted data shall be tagged with Scandinavian context (e.g., local financial metrics, seasonality) and stored in Supabase Storage and Database.

#### 5.1.2 LLM-Based Analysis

- **FR4:** The system shall analyze documents using localized LLM prompts to detect inconsistencies and missing data.
- **FR5:** The system shall generate chain‑of‑thought reasoning for each analysis request.
- **FR6:** All LLM responses, along with metadata (prompt version, regional context, execution metrics), must be logged via Langfuse.

#### 5.1.3 Prompt Management and Evolution

- **FR7:** The system shall maintain a version-controlled repository of prompt templates (including localized variants) stored in Supabase Database.
- **FR8:** Automated prompt optimization (e.g., MAPO-inspired methods) will be applied downstream in the pipeline, using observability data to iteratively refine prompt templates.
- **FR9:** The system shall support A/B testing of prompt variants and store performance metrics in Supabase for further analysis.

#### 5.1.4 Observability and Monitoring

- **FR10:** The backend shall integrate Langfuse&apos;s Python SDK to capture detailed traces (chain‑of‑thought, tool invocations, token usage, latency).
- **FR11:** Observability data shall be visualized in real‑time dashboards, with filtering for Scandinavian-specific parameters.
- **FR12:** All LLM calls and interactions must be logged and retrievable for debugging and auditing purposes.

#### 5.1.5 User Interface and Agent Interaction

- **FR13:** The frontend shall display a Scandinavian‑styled dashboard for document upload, analysis progress, and observability metrics.
- **FR14:** Users shall be able to review analysis results and select observations to generate draft emails and reports tailored to local governance norms.
- **FR15:** The frontend shall use the Vercel AI SDK for rapid, low‑latency agent interactions and dynamic prompt submissions.

#### 5.1.6 Supabase Integration

- **FR16:** The system shall use **Supabase Authentication for secure user login and session management with SSR.**
- **FR17:** Supabase Database shall store user data, document metadata, prompt versions, and performance logs.
- **FR18:** **Supabase Storage shall securely host uploaded board documents.**
- **FR19:** Supabase Realtime shall be utilized for live status updates (e.g., processing progress, observability alerts).

### 5.2 Non-functional Requirements

- **NFR1:** **Performance:** LLM analysis results should be delivered within 30 seconds for standard document sizes.
- **NFR2:** **Scalability:** The backend must support horizontal scaling via Docker/Kubernetes, with Supabase handling high‑volume data storage and realtime notifications.
- **NFR3:** **Security:** All data must be transmitted using TLS; sensitive documents and user data are to be stored securely, with compliance to GDPR and local Scandinavian regulations.
- **NFR4:** **Localization:** The system must support Norwegian, Swedish, Danish, and Finnish languages; analysis outputs and UI text must incorporate local governance standards.
- **NFR5:** **Reliability:** Observability integrations must deliver continuous, real‑time monitoring with robust fallback logging.
- **NFR6:** **Usability:** The UI must be minimalistic and intuitive, reflecting Scandinavian design aesthetics and ensuring smooth user interactions.

---

## 6. Technical Architecture and Integration

### 6.1 Ideal Tech Stack

- **Frontend: Next.js 15 with Vercel AI SDK**

  - **Responsibilities:**
    - Render an interactive Scandinavian‑styled user interface.
    - Handle lightweight agent interactions, prompt submissions, and real‑time updates.
    - Display observability dashboards and localized feedback.
  - **Key Integrations:**
    - Vercel AI SDK for dynamic AI prompt execution.
    - Optional integration of Langfuse&apos;s JS/TS libraries for frontend prompt management.
    - Communication with Supabase (via Supabase JS SDK) for auth, realtime notifications, and data retrieval.

- **Backend: Python FastAPI**

  - **Responsibilities:**
    - Process and analyze board documents using the unstructured library.
    - Execute long‑running LLM calls and computationally intensive analysis tasks.
    - Manage secure file uploads and persistent storage.
    - Integrate Langfuse&apos;s Python SDK for detailed observability and trace logging.
    - Interface with Supabase (via Supabase Python client) for database operations, storage, and authentication.
  - **Key Integrations:**
    - Asynchronous endpoints for scalability.
    - OpenTelemetry and Langfuse/OpenLLMetry for advanced observability.
    - Prompt optimization module (executed downstream in the pipeline).

- **Observability &amp; Prompt Management: Langfuse (and optionally OpenLLMetry)**

  - **Role:**
    - Provide centralized observability, trace logging, and prompt versioning.
    - Capture detailed metrics (chain‑of‑thought, token usage, latency, tool interactions) for each LLM call.
  - **Integration:**
    - Langfuse&apos;s Python SDK integrated in FastAPI.
    - Optionally, Langfuse&apos;s JS/TS libraries on the frontend for lightweight observability.
    - Ensure compatibility with our AI SDK (Vercel AI SDK) by adhering to standard API contracts.

- **Document Processing: Unstructured**
  - **Role:**
    - Extract text and metadata from board documents.
    - Annotate content with regional Scandinavian context.
- **Supabase Suite:**
  - **Storage:** For hosting raw board documents.
  - **Database:** For storing user profiles, document metadata, prompt templates, and observability logs.
  - **Authentication:** For secure user management.
  - **Realtime:** For live notifications and status updates.

### 6.2 Integration Flow Overview

1. **Document Upload (Frontend):**  
   Users upload documents via the Next.js UI. These files are sent to FastAPI and stored in Supabase Storage.

2. **Document Processing (Backend):**  
   FastAPI uses the unstructured library to extract text and regional context from documents. Processed metadata is saved in Supabase Database.

3. **LLM Analysis (Backend):**  
   FastAPI triggers localized LLM prompts for analysis. Detailed traces and performance metrics are logged via Langfuse.

4. **Observability and Feedback:**  
   Langfuse/OpenLLMetry captures chain‑of‑thought and tool interactions. These metrics are available via dashboards and used downstream for prompt optimization.

5. **Prompt Optimization (Downstream Module):**  
   Observability data feeds into an automated prompt optimization module (using MAPO/beam search techniques) that iteratively refines prompt templates. Optimized prompts are stored in Supabase and made available for subsequent analyses.

6. **User Interaction (Frontend):**  
   The Next.js UI displays analysis results, observability summaries, and allows users to generate draft emails and reports. Realtime updates are pushed via Supabase Realtime.

---

## 7. Agent and Tool Definitions

### 7.1 Agents

- **Board Assistant Agent:**  
  The primary AI entity that:
  - Analyzes board materials using localized LLM prompts.
  - Generates chain‑of‑thought reasoning and actionable insights.
  - Composes draft communications and reports tailored to Scandinavian governance standards.

### 7.2 Tools

- **Document Parser:**  
  Uses the unstructured library to extract and annotate text from board documents.
- **Data Inconsistency Checker:**  
  Runs localized LLM prompts to verify numerical and textual data consistency.
- **Report Generator:**  
  Compiles structured reports and draft emails using AI-generated content.
- **Observability Module:**  
  Integrates Langfuse (and optionally OpenLLMetry) for detailed trace logging and metrics collection.
- **Prompt Optimization Module:**  
  Downstream module that refines prompt templates using automated optimization techniques, informed by Langfuse observability data.
- **Supabase Services:**  
  Provides backend storage, database management, authentication, and realtime updates.

---

## 8. Distinctions Between FastAPI and Next.js Implementations

### 8.1 Python FastAPI (Backend)

- **Primary Responsibilities:**
  - Handle heavy, long‑running tasks such as document processing and in-depth LLM analysis.
  - Execute asynchronous LLM calls with integrated observability (using Langfuse/OpenLLMetry).
  - Manage file uploads, persistent storage, and database operations via Supabase.
  - Process regional (Scandinavian) context and inject local financial/regulatory data into analyses.
  - Execute prompt optimization as a downstream process based on collected observability metrics.
- **Key Integrations:**
  - Unstructured library for document text extraction.
  - Supabase Python client for storage, database, auth, and realtime notifications.
  - Langfuse&apos;s Python SDK for observability and detailed logging.

### 8.2 Next.js with Vercel AI SDK (Frontend)

- **Primary Responsibilities:**
  - Render a responsive, Scandinavian‑styled user interface.
  - Facilitate lightweight, real‑time interactions (prompt submissions, status updates, dashboard displays).
  - Integrate with the Vercel AI SDK for dynamic prompt execution.
  - Interface with Supabase (via Supabase JS SDK) for user authentication, document retrieval, and realtime updates.
  - Optionally display basic observability summaries via Langfuse&apos;s JS/TS libraries.
- **Key Integrations:**
  - Vercel AI SDK for immediate AI interactions.
  - Supabase for auth, database queries, and realtime notifications.

---

## 9. External Interfaces

- **API Endpoints (FastAPI):**  
  RESTful endpoints for document upload, analysis requests, report generation, and observability trace retrieval.
- **User Interface (Next.js):**  
  Interactive dashboard for board document management, analysis visualization, and communication drafting.
- **Supabase Services:**  
  Authentication, Storage, Database, and Realtime modules accessible via Supabase SDKs.
- **Observability Dashboard:**  
  Integrated with Langfuse/OpenLLMetry for real‑time trace and metric visualization.

---

## 10. Appendix

### 10.1 References

- Langfuse GitHub repository: [https://github.com/langfuse/langfuse](https://github.com/langfuse/langfuse) [oai_citation_attribution:0‡github.com](https://github.com/langfuse/langfuse)
- Traceloop/OpenLLMetry: [https://github.com/traceloop/openllmetry](https://github.com/traceloop/openllmetry) [oai_citation_attribution:1‡github.com](https://github.com/traceloop/openllmetry)
- Automatic Prompt Optimization with &quot;Gradient Descent&quot; and Beam Search: [oai_citation_attribution:2‡arxiv.org](https://arxiv.org/abs/2305.03495)
- LLM Observability Fundamentals – Neptune.ai: [oai_citation_attribution:3‡neptune.ai](https://neptune.ai/blog/llm-observability)
- Supabase Documentation: [https://supabase.com/docs](https://supabase.com/docs)

---

_This SRS provides a comprehensive blueprint for developing BoardAIssistant.com with a robust, agentic LLM system tailored for Scandinavian board members. It clearly delineates responsibilities between the FastAPI backend (handling intensive document processing, LLM analysis, and integration with Supabase and Langfuse) and the Next.js/Vercel AI SDK frontend (providing a responsive UI, realtime updates, and interactive agent sessions). Prompt optimization is managed downstream based on observability data, ensuring continuous improvement of AI responses._</file><file path="lib/client/client.ts">import { createBrowserClient } from &apos;@supabase/ssr&apos;;
import { Database } from &apos;@/types/database&apos;;


export function createClient() {
  return createBrowserClient&lt;Database&gt;(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
}</file><file path="lib/server/admin.ts">import &apos;server-only&apos;;
import { createClient as createSupabaseClient } from &apos;@supabase/supabase-js&apos;;
import { Database } from &apos;@/types/database&apos;;






















export const createAdminClient = () =&gt; {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !supabaseServiceKey) {
    throw new Error(
      &apos;Missing Supabase environment variables for server-side operations&apos;
    );
  }

  return createSupabaseClient&lt;Database&gt;(supabaseUrl, supabaseServiceKey);
};</file><file path="lib/server/server.ts">import &apos;server-only&apos;;
import { createServerClient } from &apos;@supabase/ssr&apos;;
import { cookies } from &apos;next/headers&apos;;
import { Database } from &apos;@/types/database&apos;;
import { Redis } from &apos;@upstash/redis&apos;;



export const createServerSupabaseClient = async () =&gt; {
  const cookieStore = await cookies();

  return createServerClient&lt;Database&gt;(

    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,


    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) =&gt;
            cookieStore.set(name, value, options)
          );
        }
      }
    }
  );
};

export const redis = new Redis({
  url: process.env.UPSTASH_REDIS_REST_URL!,
  token: process.env.UPSTASH_REDIS_REST_TOKEN!
});</file><file path="lib/server/supabase.ts">import &apos;server-only&apos;;
import { cache } from &apos;react&apos;;
import { createServerSupabaseClient } from &apos;@/lib/server/server&apos;;




export const getSession = cache(async () =&gt; {
  const supabase = await createServerSupabaseClient();
  try {
    const {
      data: { user }
    } = await supabase.auth.getUser();
    return user;
  } catch (error) {
    console.error(&apos;Error:&apos;, error);
    return null;
  }
});



export const getUserInfo = cache(async () =&gt; {
  const supabase = await createServerSupabaseClient();
  try {
    const { data, error } = await supabase
      .from(&apos;users&apos;)
      .select(&apos;full_name, email, id&apos;)
      .maybeSingle();

    if (error) {
      console.error(&apos;Supabase Error:&apos;, error);
      return null;
    }

    return data;
  } catch (error) {
    console.error(&apos;Error:&apos;, error);
    return null;
  }
});</file><file path="lib/companyProvider.tsx">&quot;use client&quot;;
import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  Dispatch,
  SetStateAction,
} from &quot;react&quot;;
import { Company } from &quot;@/schema&quot;;

type CompanyContextType = {
  companies: Company[];
  selectedCompanyId: string | null;
  selectedCompany: Company | null;
  setCompanies: Dispatch&lt;SetStateAction&lt;Company[]&gt;&gt;;
  setSelectedCompanyId: (id: string | null) =&gt; void;
  setSelectedCompany: Dispatch&lt;SetStateAction&lt;Company | null&gt;&gt;;
};

const CompanyContext = createContext&lt;CompanyContextType | undefined&gt;(undefined);

export function CompanyProvider({
  children,
  initialCompanies,
  initialSelectedCompanyId,
}: {
  children: React.ReactNode;
  initialCompanies: Company[];
  initialSelectedCompanyId: string | null;
}) {
  const [companies, setCompanies] = useState&lt;Company[]&gt;(initialCompanies || []);
  const [selectedCompanyId, setSelectedCompanyIdState] = useState&lt;
    string | null
  &gt;(initialSelectedCompanyId);
  const [selectedCompany, setSelectedCompany] = useState&lt;Company | null&gt;(null);

  useEffect(() =&gt; {
    if (initialCompanies) {
      setCompanies(initialCompanies);
    }
  }, [initialCompanies]);

  useEffect(() =&gt; {

    if (selectedCompanyId) {
      document.cookie = `selectedCompanyId=${selectedCompanyId}; path=/; max-age=31536000`;
    } else {
      document.cookie = &quot;selectedCompanyId=; path=/; max-age=0&quot;;
    }
  }, [selectedCompanyId]);

  useEffect(() =&gt; {

    if (selectedCompanyId) {
      const company = companies.find((c) =&gt; c.id === selectedCompanyId);
      setSelectedCompany(company || null);
    } else {
      setSelectedCompany(null);
    }
  }, [selectedCompanyId, companies]);

  const setSelectedCompanyId = (id: string | null) =&gt; {
    setSelectedCompanyIdState(id);
  };

  return (
    &lt;CompanyContext.Provider
      value={{
        companies,
        selectedCompanyId,
        selectedCompany,
        setCompanies,
        setSelectedCompanyId,
        setSelectedCompany,
      }}
    &gt;
      {children}
    &lt;/CompanyContext.Provider&gt;
  );
}

export function useCompanyContext() {
  const context = useContext(CompanyContext);
  if (context === undefined) {
    throw new Error(&quot;useCompanyContext must be used within a CompanyProvider&quot;);
  }
  return context;
}</file><file path="lib/utils.ts">import { type ClassValue, clsx } from &quot;clsx&quot;;
import { twMerge } from &quot;tailwind-merge&quot;;

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}</file><file path="supabase/migrations/20240202_initial.sql">CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT NOT NULL UNIQUE,
  display_name TEXT NOT NULL,
  locale TEXT NOT NULL,
  role TEXT DEFAULT &apos;board_member&apos;,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL
);


CREATE TABLE documents (
  document_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id),
  file_name TEXT NOT NULL,
  storage_url TEXT NOT NULL,
  processed_text TEXT,
  metadata JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL
);


CREATE TABLE analysis (
  analysis_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  document_id UUID NOT NULL REFERENCES documents(document_id),
  analysis_type TEXT NOT NULL,
  local_context JSONB,
  status TEXT DEFAULT &apos;processing&apos; NOT NULL,
  submitted_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  completed_at TIMESTAMP WITH TIME ZONE,
  results JSONB
);


CREATE TABLE observations (
  observation_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  analysis_id UUID NOT NULL REFERENCES analysis(analysis_id),
  description TEXT NOT NULL,
  page_reference TEXT,
  suggestions TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL
);


CREATE TABLE reports (
  report_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  analysis_id UUID NOT NULL REFERENCES analysis(analysis_id),
  draft_email TEXT NOT NULL,
  generated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL
);


CREATE TABLE prompt_templates (
  prompt_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  version TEXT NOT NULL,
  description TEXT,
  content TEXT NOT NULL,
  last_updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL
);


CREATE TABLE observability_traces (
  trace_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  analysis_id UUID REFERENCES analysis(analysis_id),
  timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  chain_of_thought TEXT,
  metrics JSONB
);


CREATE TABLE notifications (
  notification_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id),
  message TEXT NOT NULL,
  type TEXT NOT NULL,
  timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  read BOOLEAN DEFAULT FALSE NOT NULL
);


CREATE TABLE prompt_optimization_logs (
  log_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  prompt_id UUID NOT NULL REFERENCES prompt_templates(prompt_id),
  previous_version TEXT NOT NULL,
  new_version TEXT NOT NULL,
  observability_data JSONB,
  status TEXT DEFAULT &apos;started&apos; NOT NULL,
  initiated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  completed_at TIMESTAMP WITH TIME ZONE
);


CREATE INDEX IF NOT EXISTS idx_documents_user_id ON documents(user_id);
CREATE INDEX IF NOT EXISTS idx_analysis_document_id ON analysis(document_id);
CREATE INDEX IF NOT EXISTS idx_observations_analysis_id ON observations(analysis_id);
CREATE INDEX IF NOT EXISTS idx_reports_analysis_id ON reports(analysis_id);
CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON notifications(user_id);
CREATE INDEX IF NOT EXISTS idx_prompt_optimization_logs_prompt_id ON prompt_optimization_logs(prompt_id);</file><file path="supabase/config.toml"># For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = &quot;boardai-assistant&quot;

[api]
enabled = true
# Port to use for the API URL.
port = 54331
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = [&quot;public&quot;, &quot;graphql_public&quot;]
# Extra schemas to add to the search_path of every request.
extra_search_path = [&quot;public&quot;, &quot;extensions&quot;]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54332
# Port used by db diff command to initialize the shadow database.
shadow_port = 54330
# The database major version to use. This has to be the same as your remote database&apos;s. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54339
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = &quot;transaction&quot;
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: &quot;./seeds/*.sql&quot;
sql_paths = [&quot;./seed.sql&quot;]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = &quot;IPv6&quot;
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54333
# External URL of the API server that frontend connects to.
api_url = &quot;http://127.0.0.1&quot;
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = &quot;env(OPENAI_API_KEY)&quot;

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54334
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = &quot;admin@email.com&quot;
# sender_name = &quot;Admin&quot;

[storage]
enabled = true
# The maximum file size allowed (e.g. &quot;5MB&quot;, &quot;500KB&quot;).
file_size_limit = &quot;50MiB&quot;

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = &quot;50MiB&quot;
# allowed_mime_types = [&quot;image/png&quot;, &quot;image/jpeg&quot;]
# objects_path = &quot;./images&quot;

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = &quot;http://127.0.0.1:3000&quot;
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = [&quot;https://127.0.0.1:3000&quot;]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = &quot;&quot;

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = &quot;1s&quot;
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = &quot;smtp.sendgrid.net&quot;
# port = 587
# user = &quot;apikey&quot;
# pass = &quot;env(SENDGRID_API_KEY)&quot;
# admin_email = &quot;admin@email.com&quot;
# sender_name = &quot;Admin&quot;

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = &quot;You have been invited&quot;
# content_path = &quot;./supabase/templates/invite.html&quot;

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = &quot;Your code is {{ .Code }}&quot;
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = &quot;5s&quot;

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = &quot;123456&quot;

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = &quot;24h&quot;
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = &quot;8h&quot;

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = &quot;pg-functions://&lt;database&gt;/&lt;schema&gt;/&lt;hook_name&gt;&quot;

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = &quot;&quot;
message_service_sid = &quot;&quot;
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = &quot;env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)&quot;

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = &quot;Your code is {{ .Code }}&quot;
max_frequency = &quot;5s&quot;

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = &quot;&quot;
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = &quot;env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)&quot;
# Overrides the default auth redirectUrl.
redirect_uri = &quot;&quot;
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = &quot;&quot;
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = &quot;my-firebase-project&quot;

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = &quot;my-auth0-tenant&quot;
# tenant_region = &quot;us&quot;

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = &quot;my-user-pool-id&quot;
# user_pool_region = &quot;us-east-1&quot;

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = &quot;oneshot&quot;
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083

# Use these configurations to customize your Edge Function.
# [functions.MY_FUNCTION_NAME]
# enabled = true
# verify_jwt = true
# import_map = &quot;./functions/MY_FUNCTION_NAME/deno.json&quot;
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
# entrypoint = &quot;./functions/MY_FUNCTION_NAME/index.ts&quot;
# Specifies static files to be bundled with the function. Supports glob patterns.
# For example, if you want to serve static HTML pages in your function:
# static_files = [ &quot;./functions/MY_FUNCTION_NAME/*.html&quot; ]

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = &quot;postgres&quot;

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = &quot;&quot;
# Configures S3 bucket URL, eg. &lt;bucket_name&gt;.s3-&lt;region&gt;.amazonaws.com
s3_host = &quot;env(S3_HOST)&quot;
# Configures S3 bucket region, eg. us-east-1
s3_region = &quot;env(S3_REGION)&quot;
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = &quot;env(S3_ACCESS_KEY)&quot;
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = &quot;env(S3_SECRET_KEY)&quot;</file><file path="types/database.d.ts">export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export type Database = {
  graphql_public: {
    Tables: {
      [_ in never]: never;
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      graphql: {
        Args: {
          operationName?: string;
          query?: string;
          variables?: Json;
          extensions?: Json;
        };
        Returns: Json;
      };
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
  public: {
    Tables: {
      chat_messages: {
        Row: {
          chat_session_id: string;
          content: string | null;
          created_at: string;
          id: string;
          is_user_message: boolean;
          sources: Json | null;
        };
        Insert: {
          chat_session_id: string;
          content?: string | null;
          created_at?: string;
          id?: string;
          is_user_message: boolean;
          sources?: Json | null;
        };
        Update: {
          chat_session_id?: string;
          content?: string | null;
          created_at?: string;
          id?: string;
          is_user_message?: boolean;
          sources?: Json | null;
        };
        Relationships: [
          {
            foreignKeyName: &apos;chat_messages_chat_session_id_fkey&apos;;
            columns: [&apos;chat_session_id&apos;];
            isOneToOne: false;
            referencedRelation: &apos;chat_sessions&apos;;
            referencedColumns: [&apos;id&apos;];
          }
        ];
      };
      chat_sessions: {
        Row: {
          chat_title: string | null;
          created_at: string;
          id: string;
          updated_at: string;
          user_id: string;
        };
        Insert: {
          chat_title?: string | null;
          created_at?: string;
          id?: string;
          updated_at?: string;
          user_id: string;
        };
        Update: {
          chat_title?: string | null;
          created_at?: string;
          id?: string;
          updated_at?: string;
          user_id?: string;
        };
        Relationships: [
          {
            foreignKeyName: &apos;chat_sessions_user_id_fkey&apos;;
            columns: [&apos;user_id&apos;];
            isOneToOne: false;
            referencedRelation: &apos;users&apos;;
            referencedColumns: [&apos;id&apos;];
          }
        ];
      };
      error_feedback: {
        Row: {
          category: string | null;
          created_at: string | null;
          errormessage: string | null;
          errorstack: string | null;
          feedback: string;
          id: number;
        };
        Insert: {
          category?: string | null;
          created_at?: string | null;
          errormessage?: string | null;
          errorstack?: string | null;
          feedback: string;
          id?: number;
        };
        Update: {
          category?: string | null;
          created_at?: string | null;
          errormessage?: string | null;
          errorstack?: string | null;
          feedback?: string;
          id?: number;
        };
        Relationships: [];
      };
      users: {
        Row: {
          email: string;
          full_name: string;
          id: string;
        };
        Insert: {
          email: string;
          full_name?: string;
          id: string;
        };
        Update: {
          email?: string;
          full_name?: string;
          id?: string;
        };
        Relationships: [];
      };
      vector_documents: {
        Row: {
          ai_description: string | null;
          ai_keyentities: string[] | null;
          ai_maintopics: string[] | null;
          ai_title: string | null;
          chunk_number: number;
          created_at: string | null;
          embedding: string | null;
          filter_tags: string | null;
          id: string;
          page_number: number;
          primary_language: string | null;
          text_content: string;
          timestamp: string;
          title: string;
          total_chunks: number;
          total_pages: number;
          user_id: string;
        };
        Insert: {
          ai_description?: string | null;
          ai_keyentities?: string[] | null;
          ai_maintopics?: string[] | null;
          ai_title?: string | null;
          chunk_number: number;
          created_at?: string | null;
          embedding?: string | null;
          filter_tags?: string | null;
          id?: string;
          page_number: number;
          primary_language?: string | null;
          text_content: string;
          timestamp: string;
          title: string;
          total_chunks: number;
          total_pages: number;
          user_id: string;
        };
        Update: {
          ai_description?: string | null;
          ai_keyentities?: string[] | null;
          ai_maintopics?: string[] | null;
          ai_title?: string | null;
          chunk_number?: number;
          created_at?: string | null;
          embedding?: string | null;
          filter_tags?: string | null;
          id?: string;
          page_number?: number;
          primary_language?: string | null;
          text_content?: string;
          timestamp?: string;
          title?: string;
          total_chunks?: number;
          total_pages?: number;
          user_id?: string;
        };
        Relationships: [
          {
            foreignKeyName: &apos;fk_user&apos;;
            columns: [&apos;user_id&apos;];
            isOneToOne: false;
            referencedRelation: &apos;users&apos;;
            referencedColumns: [&apos;id&apos;];
          }
        ];
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      list_objects: {
        Args: {
          bucketid: string;
          prefix: string;
          limits?: number;
          offsets?: number;
        };
        Returns: {
          name: string;
          id: string;
          updated_at: string;
          created_at: string;
          last_accessed_at: string;
          metadata: Json;
        }[];
      };
      match_documents: {
        Args: {
          query_embedding: string;
          match_count: number;
          filter_user_id: string;
          filter_files: string[];
          similarity_threshold?: number;
        };
        Returns: {
          id: string;
          text_content: string;
          title: string;
          doc_timestamp: string;
          ai_title: string;
          ai_description: string;
          ai_maintopics: string[];
          ai_keyentities: string[];
          filter_tags: string;
          page_number: number;
          total_pages: number;
          chunk_number: number;
          total_chunks: number;
          similarity: number;
        }[];
      };
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
};

type PublicSchema = Database[Extract&lt;keyof Database, &apos;public&apos;&gt;];

export type Tables&lt;
  PublicTableNameOrOptions extends
    | keyof (PublicSchema[&apos;Tables&apos;] &amp; PublicSchema[&apos;Views&apos;])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions[&apos;schema&apos;]][&apos;Tables&apos;] &amp;
        Database[PublicTableNameOrOptions[&apos;schema&apos;]][&apos;Views&apos;])
    : never = never
&gt; = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions[&apos;schema&apos;]][&apos;Tables&apos;] &amp;
      Database[PublicTableNameOrOptions[&apos;schema&apos;]][&apos;Views&apos;])[TableName] extends {
      Row: infer R;
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema[&apos;Tables&apos;] &amp;
        PublicSchema[&apos;Views&apos;])
    ? (PublicSchema[&apos;Tables&apos;] &amp;
        PublicSchema[&apos;Views&apos;])[PublicTableNameOrOptions] extends {
        Row: infer R;
      }
      ? R
      : never
    : never;

export type TablesInsert&lt;
  PublicTableNameOrOptions extends
    | keyof PublicSchema[&apos;Tables&apos;]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions[&apos;schema&apos;]][&apos;Tables&apos;]
    : never = never
&gt; = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions[&apos;schema&apos;]][&apos;Tables&apos;][TableName] extends {
      Insert: infer I;
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema[&apos;Tables&apos;]
    ? PublicSchema[&apos;Tables&apos;][PublicTableNameOrOptions] extends {
        Insert: infer I;
      }
      ? I
      : never
    : never;

export type TablesUpdate&lt;
  PublicTableNameOrOptions extends
    | keyof PublicSchema[&apos;Tables&apos;]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions[&apos;schema&apos;]][&apos;Tables&apos;]
    : never = never
&gt; = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions[&apos;schema&apos;]][&apos;Tables&apos;][TableName] extends {
      Update: infer U;
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema[&apos;Tables&apos;]
    ? PublicSchema[&apos;Tables&apos;][PublicTableNameOrOptions] extends {
        Update: infer U;
      }
      ? U
      : never
    : never;

export type Enums&lt;
  PublicEnumNameOrOptions extends
    | keyof PublicSchema[&apos;Enums&apos;]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions[&apos;schema&apos;]][&apos;Enums&apos;]
    : never = never
&gt; = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions[&apos;schema&apos;]][&apos;Enums&apos;][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema[&apos;Enums&apos;]
    ? PublicSchema[&apos;Enums&apos;][PublicEnumNameOrOptions]
    : never;

export type CompositeTypes&lt;
  PublicCompositeTypeNameOrOptions extends
    | keyof PublicSchema[&apos;CompositeTypes&apos;]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions[&apos;schema&apos;]][&apos;CompositeTypes&apos;]
    : never = never
&gt; = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions[&apos;schema&apos;]][&apos;CompositeTypes&apos;][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof PublicSchema[&apos;CompositeTypes&apos;]
    ? PublicSchema[&apos;CompositeTypes&apos;][PublicCompositeTypeNameOrOptions]
    : never;</file><file path=".cursorrules"># Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2
Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

## Code Style Guide

### Core Technologies

- TypeScript
- Node.js
- Next.js App Router
- React
- Shadcn UI
- Radix UI
- Supabase
- Tailwind CSS

### Code Style and Structure

#### General Principles

- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)

#### File Structure

- Exported component
- Subcomponents
- Helpers
- Static content
- Types

#### Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard)
- Favor named exports for components

#### TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use maps instead
- Use functional components with TypeScript interfaces

#### Syntax and Formatting

- Use the &quot;function&quot; keyword for pure functions
- Avoid unnecessary curly braces in conditionals
- Use concise syntax for simple statements

### UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components
- Implement responsive design with Tailwind CSS; use a mobile-first approach

### Performance Optimization

- Minimize &apos;use client&apos;, &apos;useEffect&apos;, and &apos;setState&apos;
- Favor React Server Components (RSC)
- Wrap client components in Suspense with fallback
- Use dynamic loading for non-critical components
- Optimize images: use WebP format

### Database and Data Model

- Use Supabase SDK for data fetching and querying
- Use Supabase&apos;s schema builder for data model creation

### Key Conventions

- Use &apos;nuqs&apos; for URL search parameter state
- Optimize Web Vitals (LCP, CLS, FID)
- Limit &apos;use client&apos;:
  - Favor server components and Next.js SSR
  - Use only for Web API access in small components
  - Avoid for data fetching or state management

Follow Next.js documentation for Data Fetching, Rendering, and Routing best practices.

# Lessons

1. Langfuse Integration:

   - Use `langfuse` package for server-side tracing in Next.js server actions
   - Use `langfuse-node` for Node.js &lt; 18 compatibility
   - Environment variables needed:
     ```
     LANGFUSE_SECRET_KEY=&quot;sk-lf-...&quot;
     LANGFUSE_PUBLIC_KEY=&quot;pk-lf-...&quot;
     LANGFUSE_BASEURL=&quot;https://cloud.langfuse.com&quot;  # 🇪🇺 EU region
     ```

2. Supabase Setup:

   - Use Supabase CLI for local development and migrations
   - Required environment variables:
     ```
     NEXT_PUBLIC_SUPABASE_URL=&quot;your_project_url&quot;
     NEXT_PUBLIC_SUPABASE_ANON_KEY=&quot;your_anon_key&quot;
     SUPABASE_SERVICE_ROLE_KEY=&quot;your_service_role_key&quot;
     ```

3. CVR API Integration:

   - Use CVR API to fetch Danish company data
   - Required fields:
     ```typescript
     {
       name: string;
       cvr: string; // 8 digits
       description?: string;
       metadata?: {
         address?: string;
         zipcode?: number;
         city?: string;
         // ... other CVR API fields
       }
     }
     ```

4. Unstructured API Integration:

   - Always use shadcn components when available
   - For server components, use cookies instead of localStorage
   - Keep track of provider wrappers when updating layout files
   - Use string types for UUIDs in TypeScript interfaces
   - Keep database functions centralized in db.ts
   - Handle related records deletion in correct order
   - Validate CVR numbers (8 digits) and ensure uniqueness
   - Store API metadata in jsonb fields for flexibility
   - Reuse existing database functions to maintain consistency

5. Best Practices:

   - Always use shadcn components when available
   - For server components, use cookies instead of localStorage
   - Keep track of provider wrappers when updating layout files
   - Use string types for UUIDs in TypeScript interfaces
   - Keep database functions centralized in db.ts
   - Handle related records deletion in correct order
   - Validate CVR numbers (8 digits) and ensure uniqueness
   - Store API metadata in jsonb fields for flexibility
   - Reuse existing database functions to maintain consistency

6. **Authentication Migration: NextAuth to Supabase Auth with SSR:**
   - **Benefit of Supabase Auth:** Using Supabase Auth simplifies authentication by leveraging Supabase&apos;s built-in services, reducing external dependencies and potentially improving integration with other Supabase features like Storage and Database.
   - **SSR with Supabase Auth:** Implementing SSR with Supabase Auth provides better security and user experience compared to client-side only authentication.
   - **Storage Integration:** Supabase Storage offers a straightforward way to manage file uploads and storage, tightly integrated with Supabase Auth and Database.
   - **Considerations:** Migrating from NextAuth to Supabase Auth requires updating authentication logic in frontend components, server actions, and potentially database schema to align with Supabase Auth user structure. Review the official Supabase documentation and example codebases for best practices.

# Scratchpad

## Current Task: Migrate to Supabase Auth with SSR and Storage

### Progress Update

[X] 1. Update Documentation to reflect Supabase Auth and Storage migration

- Updated API.md with Supabase Auth changes
- Updated Schema.md to consider Supabase Auth user structure
- Updated PRD.md and SRS.md to emphasize Supabase Auth and Storage
- Updated Roadmap_gemini.md with migration tasks
- Added lesson about NextAuth to Supabase Auth migration in `.cursorrules`

[ ] 2. Implement Supabase Auth with SSR

- [ ] Set up Supabase Auth in `app/(auth)/auth.ts` and `app/(auth)/auth.config.ts` (if needed).
- [ ] Update login and register pages to use Supabase Auth methods.
- [ ] Update authentication context and providers to use Supabase Auth.
- [ ] Test authentication flow thoroughly.

[ ] 3. Integrate Supabase Storage for Document Upload

- [ ] Decide on direct upload from frontend or via Server Actions.
- [ ] Implement document upload to Supabase Storage.
- [ ] Update document upload component to use Supabase Storage.
- [ ] Test document upload flow.

[ ] 4. Update related components and server actions

- [ ] Update server actions to use Supabase Auth session for user context.
- [ ] Ensure all components are compatible with Supabase Auth and Storage.

[ ] 5. Comprehensive Testing

- [ ] Test authentication, document upload, and overall system functionality with Supabase Auth and Storage.

### Progress Log

- Updated documentation to reflect Supabase Auth and Storage migration.

### Next Steps

1. [ ] Implement Supabase Auth with SSR (Step 2 in Progress Update)
2. [ ] Integrate Supabase Storage for Document Upload (Step 3 in Progress Update)
3. [ ] Update related components and server actions (Step 4 in Progress Update)
4. [ ] Comprehensive Testing (Step 5 in Progress Update)</file><file path="auth.ts">import { db } from &quot;@/app/db&quot;;
import { users } from &quot;@/schema&quot;;
import { eq } from &quot;drizzle-orm&quot;;
import { createInsertSchema } from &quot;drizzle-zod&quot;;
import { z } from &quot;zod&quot;;
import { getServerSession } from &quot;@/lib/server/server&quot;;
import { Session } from &quot;@supabase/supabase-js&quot;;
import { createClient } from &quot;@/lib/supabaseClient&quot;;

export const userSchema = createInsertSchema(users, {
  email: z.string().email(),
  displayName: z.string().min(2).max(100),
  locale: z.string().default(&quot;en&quot;),
  role: z.enum([&quot;board_member&quot;, &quot;admin&quot;]).default(&quot;board_member&quot;),
});

export type UserRole = &quot;board_member&quot; | &quot;admin&quot;;

export type AuthSession = {
  user: {
    id: string;
    displayName: string;
    role: UserRole;
    locale: string;
    email?: string | null;
  };
} &amp; Session;

export async function getSession(): Promise&lt;AuthSession | null&gt; {
  const session = await getServerSession();


  if (!session?.user) {
    return null;
  }


  const [dbUser] = await db
    .select()
    .from(users)
    .where(eq(users.id, session.user.id));

  if (!dbUser) {
    return null;
  }

  return {
    ...session,
    user: {
      ...session.user,
      id: dbUser.id,
      displayName: dbUser.displayName,
      role: (dbUser.role || &quot;board_member&quot;) as UserRole,
      locale: dbUser.locale,
    },
  };
}

export async function signInWithEmail(email: string) {
  const supabase = createClient();
  const { error } = await supabase.auth.signInWithOtp({
    email,
    options: {
      emailRedirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,
    },
  });

  if (error) {
    throw error;
  }
}

export async function signOut() {
  const supabase = createClient();
  const { error } = await supabase.auth.signOut();

  if (error) {
    throw error;
  }
}


export async function checkRole(requiredRole: UserRole): Promise&lt;boolean&gt; {
  const session = await getSession();
  return session?.user.role === requiredRole;
}


export async function upsertUser(supabaseUser: AuthSession[&apos;user&apos;]) {
  const [existingUser] = await db
    .select()
    .from(users)
    .where(eq(users.id, supabaseUser.id));

  if (existingUser) {

    await db
      .update(users)
      .set({
        email: supabaseUser.email,
        updatedAt: new Date(),
      })
      .where(eq(users.id, supabaseUser.id));

    return existingUser;
  }


  const [newUser] = await db
    .insert(users)
    .values({
      id: supabaseUser.id,
      email: supabaseUser.email!,
      displayName: supabaseUser.email!.split(&apos;@&apos;)[0],
      role: &quot;board_member&quot;,
      locale: &quot;en&quot;,
    })
    .returning();

  return newUser;
}</file><file path="components.json">{
  &quot;$schema&quot;: &quot;https://ui.shadcn.com/schema.json&quot;,
  &quot;style&quot;: &quot;new-york&quot;,
  &quot;rsc&quot;: true,
  &quot;tsx&quot;: true,
  &quot;tailwind&quot;: {
    &quot;config&quot;: &quot;tailwind.config.ts&quot;,
    &quot;css&quot;: &quot;app/globals.css&quot;,
    &quot;baseColor&quot;: &quot;neutral&quot;,
    &quot;cssVariables&quot;: true,
    &quot;prefix&quot;: &quot;&quot;
  },
  &quot;aliases&quot;: {
    &quot;components&quot;: &quot;@/components&quot;,
    &quot;utils&quot;: &quot;@/lib/utils&quot;,
    &quot;ui&quot;: &quot;@/components/ui&quot;,
    &quot;lib&quot;: &quot;@/lib&quot;,
    &quot;hooks&quot;: &quot;@/hooks&quot;
  }
}</file><file path="eslint.config.mjs">// @ts-check
import { fixupConfigRules } from &apos;@eslint/compat&apos;;
import { FlatCompat } from &apos;@eslint/eslintrc&apos;;
import js from &apos;@eslint/js&apos;;
import prettierConfigRecommended from &apos;eslint-plugin-prettier/recommended&apos;;
import globals from &apos;globals&apos;;
import path from &apos;node:path&apos;;
import { fileURLToPath } from &apos;node:url&apos;;
import ts from &apos;typescript-eslint&apos;;

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
  baseDirectory: __dirname
});

const patchedConfig = fixupConfigRules([
  ...compat.extends(&apos;next/core-web-vitals&apos;)
]);

const config = [
  ...patchedConfig,
  ...ts.configs.recommended,
  prettierConfigRecommended,
  {
    files: [&apos;**/*.{js,jsx,ts,tsx}&apos;],
    languageOptions: {
      ecmaVersion: &apos;latest&apos;,
      sourceType: &apos;module&apos;,
      parser: ts.parser,
      parserOptions: {
        ecmaFeatures: {
          jsx: true
        },
        project: &apos;./tsconfig.json&apos;, // Add this line
        tsconfigRootDir: __dirname // Add this line
      },
      globals: {
        ...globals.browser,
        ...globals.node,
        ...globals.es2022
      }
    },
    settings: {
      react: {
        version: &apos;detect&apos;
      }
    },
    rules: {
      // Original rules
      &apos;react/no-is-mounted&apos;: &apos;error&apos;,
      &apos;react/jsx-filename-extension&apos;: [&apos;warn&apos;, { extensions: [&apos;.tsx&apos;] }],
      &apos;react-hooks/rules-of-hooks&apos;: &apos;error&apos;,
      &apos;react-hooks/exhaustive-deps&apos;: &apos;warn&apos;,
      &apos;no-unused-vars&apos;: &apos;off&apos;,
      &apos;no-restricted-imports&apos;: [
        &apos;error&apos;,
        {
          patterns: [&apos;@mui/*/*/*&apos;]
        }
      ],
      &apos;@typescript-eslint/no-unused-expressions&apos;: [
        &apos;error&apos;,
        {
          allowShortCircuit: true,
          allowTernary: true
        }
      ],
      &apos;@typescript-eslint/no-unused-vars&apos;: [
        &apos;error&apos;,
        {
          vars: &apos;all&apos;,
          args: &apos;after-used&apos;,
          ignoreRestSiblings: false,
          argsIgnorePattern: &apos;^_&apos;,
          varsIgnorePattern: &apos;^_&apos;
        }
      ],
      &apos;@typescript-eslint/dot-notation&apos;: [&apos;error&apos;, { allowKeywords: true }],
      &apos;@typescript-eslint/no-empty-function&apos;: [
        &apos;error&apos;,
        { allow: [&apos;arrowFunctions&apos;] }
      ],
      &apos;@typescript-eslint/no-explicit-any&apos;: &apos;off&apos;,
      &apos;prettier/prettier&apos;: &apos;error&apos;,

      // Additional React recommended rules
      &apos;react/jsx-no-duplicate-props&apos;: &apos;error&apos;,
      &apos;react/jsx-no-undef&apos;: &apos;error&apos;,
      &apos;react/jsx-uses-react&apos;: &apos;error&apos;,
      &apos;react/jsx-uses-vars&apos;: &apos;error&apos;,
      &apos;react/no-deprecated&apos;: &apos;error&apos;,
      &apos;react/no-direct-mutation-state&apos;: &apos;error&apos;,
      &apos;react/no-find-dom-node&apos;: &apos;error&apos;,
      &apos;react/no-unknown-property&apos;: &apos;error&apos;,
      &apos;react/prop-types&apos;: &apos;off&apos;, // Since we&apos;re using TypeScript
      &apos;react/react-in-jsx-scope&apos;: &apos;off&apos;, // Not needed in Next.js
      &apos;react/require-render-return&apos;: &apos;error&apos;,

      // JSX-specific rules
      &apos;react/jsx-key&apos;: [&apos;error&apos;, { checkFragmentShorthand: true }],
      &apos;react/jsx-no-comment-textnodes&apos;: &apos;error&apos;,
      &apos;react/jsx-no-target-blank&apos;: &apos;error&apos;,
      &apos;react/jsx-pascal-case&apos;: &apos;error&apos;,

      // Hooks rules
      &apos;react/hook-use-state&apos;: &apos;error&apos;,

      // Best practices
      &apos;react/jsx-fragments&apos;: [&apos;error&apos;, &apos;syntax&apos;],
      &apos;react/jsx-no-useless-fragment&apos;: &apos;warn&apos;,
      &apos;react/no-access-state-in-setstate&apos;: &apos;error&apos;,
      &apos;react/no-unused-state&apos;: &apos;error&apos;,
      &apos;react/jsx-boolean-value&apos;: [&apos;error&apos;, &apos;never&apos;],
      &apos;react/jsx-curly-brace-presence&apos;: [
        &apos;error&apos;,
        {
          props: &apos;never&apos;,
          children: &apos;never&apos;
        }
      ],
      &apos;react/self-closing-comp&apos;: [
        &apos;error&apos;,
        {
          component: true,
          html: true
        }
      ],

      // Accessibility
      &apos;react/jsx-no-script-url&apos;: &apos;error&apos;,
      &apos;react/jsx-no-bind&apos;: [
        &apos;warn&apos;,
        {
          allowArrowFunctions: true,
          allowFunctions: false,
          allowBind: false
        }
      ],

      // Performance
      &apos;react/jsx-no-constructed-context-values&apos;: &apos;error&apos;,

      // TypeScript specific React rules
      &apos;@typescript-eslint/explicit-function-return-type&apos;: &apos;off&apos;,
      &apos;@typescript-eslint/explicit-module-boundary-types&apos;: &apos;off&apos;
    }
  },
  { ignores: [&apos;.next/*&apos;] }
];

export default config;</file><file path="instrumentation.ts">import { registerOTel } from &apos;@vercel/otel&apos;;
import { LangfuseExporter } from &apos;langfuse-vercel&apos;;

export function register() {
  registerOTel({
    serviceName: &apos;langfuse-vercel-ai-lovguiden&apos;,
    traceExporter: new LangfuseExporter()
  });
}</file><file path="middleware.config.ts">export const config = {
  matcher: [








    &apos;/((?!_next/static|_next/image|favicon.ico|public|auth|login|register|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)&apos;,
  ],
}</file><file path="middleware.ts">import { createServerClient } from &apos;@supabase/ssr&apos;;
import { NextResponse, type NextRequest } from &apos;next/server&apos;;

export async function middleware(request: NextRequest) {

  let response = NextResponse.next({
    request
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll();
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value }) =&gt;
            request.cookies.set(name, value)
          );
          response = NextResponse.next({
            request
          });
          cookiesToSet.forEach(({ name, value, options }) =&gt;
            response.cookies.set(name, value, options)
          );
        }
      }
    }
  );


  const {
    data: { user: session }
  } = await supabase.auth.getUser();


  const currentRoute = request.nextUrl.pathname;
  if (currentRoute.startsWith(&apos;/protected&apos;) &amp;&amp; !session) {
    const redirectUrl = new URL(request.url);
    redirectUrl.pathname = &apos;/signin&apos;;
    return NextResponse.redirect(redirectUrl);
  }

  if (currentRoute.startsWith(&apos;/aichat&apos;) &amp;&amp; !session) {
    const redirectUrl = new URL(request.url);
    redirectUrl.pathname = &apos;/signin&apos;;
    return NextResponse.redirect(redirectUrl);
  }

  return response;
}

export const config = {
  matcher: [
    {
      source:
        &apos;/((?!_next/static|_next/image|favicon.ico|favicons/.*|afgorelse|.*\\.png|manifest.webmanifest|manifest.json|api/.*|fonts/.*|sitemap.xml|robots.txt|manifest.json|manifest.webmanifest|\\.well-known/.*).*)&apos;,
      missing: [
        { type: &apos;header&apos;, key: &apos;next-router-prefetch&apos; },
        { type: &apos;header&apos;, key: &apos;purpose&apos;, value: &apos;prefetch&apos; }
      ]
    }
  ]
};</file><file path="next.config.ts">import type { NextConfig } from &apos;next&apos;;

const nextConfig: NextConfig = {
  experimental: {
    staleTimes: {
      dynamic: 30,
      static: 180
    }
  },
  images: {
    remotePatterns: [
      {
        hostname: &apos;**&apos;
      }
    ]
  }
};
export default nextConfig;</file><file path="plan.md"># Plan for Migrating to Supabase Auth with SSR and Storage (Next.js App Router)

## 1. Introduction

This document outlines the steps required to migrate the BoardAIssistant.com codebase from NextAuth to Supabase Auth with Server-Side Rendering (SSR) and integrate Supabase Storage for document uploads, specifically within the **Next.js 15 App Router**. This migration aims to simplify authentication and storage management by leveraging Supabase&apos;s built-in services, improving security and user experience with SSR best practices.

## 2. Authentication Setup with Supabase Auth (SSR in App Router)

### 2.1. Install Supabase Client

- Install the Supabase JavaScript client:
  ```bash
  pnpm install @supabase/supabase-js
  ```

### 2.2. Configure Supabase Client

- Initialize the Supabase client in a dedicated file, e.g., `lib/supabaseClient.ts`:

  ```typescript:lib/supabaseClient.ts
  // lib/supabaseClient.ts
  import { createClient } from &apos;@supabase/supabase-js&apos;

  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

  export const supabase = createClient(supabaseUrl, supabaseAnonKey)
  ```

- Ensure `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY` environment variables are set in `.env.local`.

### 2.3. Create Authentication Context Provider (Client Component Wrapper in Layout)

- In the App Router, context providers are typically client components that wrap the layout. Create an authentication context provider, e.g., `providers/supabase-auth-provider.tsx`:

  ```typescript:providers/supabase-auth-provider.tsx
  // providers/supabase-auth-provider.tsx
  &quot;use client&quot;
  import React, { createContext, useContext, useState, useEffect, ReactNode } from &apos;react&apos;;
  import { Session } from &apos;@supabase/supabase-js&apos;;
  import { supabase } from &apos;@/lib/supabaseClient&apos;;

  interface AuthContextType {
    session: Session | null;
    loadingSession: boolean;
    signIn: (email: string) =&gt; Promise&lt;void&gt;; // Example: Email OTP sign-in
    signOut: () =&gt; Promise&lt;void&gt;;
  }

  const AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined);

  interface AuthProviderProps {
    children: ReactNode;
  }

  export const AuthProvider = ({ children }: AuthProviderProps) =&gt; {
    const [session, setSession] = useState&lt;Session | null&gt;(null);
    const [loadingSession, setLoadingSession] = useState&lt;boolean&gt;(true);

    useEffect(() =&gt; {
      setLoadingSession(true); // Start loading before getSession resolves
      supabase.auth.getSession().then(({ data: { session } }) =&gt; {
        setSession(session);
      }).finally(() =&gt; {
        setLoadingSession(false); // Ensure loading is set to false after resolution or rejection
      });


      supabase.auth.onAuthStateChange((_event, session) =&gt; {
        setSession(session)
      })
    }, []);

    const signIn = async (email: string) =&gt; { // Example: Email OTP sign-in
      setLoadingSession(true);
      try {
        const { error } = await supabase.auth.signInWithOtp({ email });
        if (error) throw error;
        alert(&apos;Check your email for the login link!&apos;);
      } catch (error: any) {
        alert(error.error_description || error.message);
      } finally {
        setLoadingSession(false);
      }
    };


    const signOut = async () =&gt; {
      setLoadingSession(true);
      try {
        const { error } = await supabase.auth.signOut();
        if (error) throw error;
      } catch (error: any) {
        alert(error.error_description || error.message);
      } finally {
        setLoadingSession(false);
      }
    };


    const value: AuthContextType = {
      session,
      loadingSession,
      signIn,
      signOut,
    };

    return (
      &lt;AuthContext.Provider value={value}&gt;
        { !loadingSession &amp;&amp; children }
      &lt;/AuthContext.Provider&gt;
    );
  };

  export const useSupabaseAuth = () =&gt; {
    const context = useContext(AuthContext);
    if (!context) {
      throw new Error(&quot;useSupabaseAuth must be used within an AuthProvider&quot;);
    }
    return context;
  };
  ```

### 2.4. Wrap Layout with AuthProvider

- In `app/layout.tsx`, wrap the `&lt;body/&gt;` with the `AuthProvider` to make the authentication context available throughout your application:

  ```typescript:app/layout.tsx
  // app/layout.tsx
  import { AuthProvider } from &apos;@/providers/supabase-auth-provider&apos;;
  import &apos;./globals.css&apos;

  export default function RootLayout({
    children,
  }: {
    children: React.ReactNode
  }) {
    return (
      &lt;html lang=&quot;en&quot;&gt;
        &lt;body&gt;
          &lt;AuthProvider&gt;
            {children}
          &lt;/AuthProvider&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    )
  }
  ```

### 2.5. Create `useSupabaseAuth` Hook

- Create a custom hook `useSupabaseAuth` to easily access the authentication context in components:

  ```typescript:providers/supabase-auth-provider.tsx
  // ... (inside providers/supabase-auth-provider.tsx)

  export const useSupabaseAuth = () =&gt; {
    const context = useContext(AuthContext);
    if (!context) {
      throw new Error(&quot;useSupabaseAuth must be used within an AuthProvider&quot;);
    }
    return context;
  };
  ```

## 3. Update Authentication Pages

### 3.1. Login Page (`app/(auth)/login/page.tsx`)

- Update the login page to use the `useSupabaseAuth` hook and Supabase Auth methods (e.g., `signInWithOtp` for email OTP, or `signInWithPassword` for email/password login if enabled):

  ```typescript:app/(auth)/login/page.tsx
  // app/(auth)/login/page.tsx
  &quot;use client&quot;;
  import { useSupabaseAuth } from &apos;@/providers/supabase-auth-provider&apos;;
  import { useState } from &apos;react&apos;;

  export default function LoginPage() {
    const { signIn, loadingSession } = useSupabaseAuth();
    const [email, setEmail] = useState(&apos;&apos;);

    const handleLogin = async (e: React.FormEvent) =&gt; {
      e.preventDefault();
      await signIn(email);
    };

    if (loadingSession) {
      return &lt;div&gt;Loading session...&lt;/div&gt;;
    }

    return (
      &lt;div&gt;
        &lt;h1&gt;Login&lt;/h1&gt;
        &lt;form onSubmit={handleLogin}&gt;
          &lt;input
            type=&quot;email&quot;
            placeholder=&quot;Your email&quot;
            value={email}
            onChange={(e) =&gt; setEmail(e.target.value)}
            disabled={loadingSession}
          /&gt;
          &lt;button type=&quot;submit&quot; disabled={loadingSession}&gt;
            Sign In with Email OTP
          &lt;/button&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    );
  }
  ```

### 3.2. Register Page (`app/(auth)/register/page.tsx`) (If needed)

- If you need a registration page, create `app/(auth)/register/page.tsx` and use `supabase.auth.signUp` to register new users.

### 3.3. Sign Out Functionality

- Implement sign-out functionality using `useSupabaseAuth` in your navigation or user profile components:

  ```typescript:components/navigation.tsx
  // components/navigation.tsx
  &quot;use client&quot;;
  import { useSupabaseAuth } from &apos;@/providers/supabase-auth-provider&apos;;

  export default function Navigation() {
    const { signOut } = useSupabaseAuth();

    return (
      &lt;nav&gt;
        {/* ... navigation links ... */}
        &lt;button onClick={() =&gt; signOut()}&gt;Sign Out&lt;/button&gt;
      &lt;/nav&gt;
    );
  }
  ```

## 4. Integrate Supabase Storage for Document Upload

### 4.1. Set up Supabase Storage and RLS Policies

- In your Supabase project, create a storage bucket (e.g., &quot;documents&quot;).
- Define Row Level Security (RLS) policies on the storage bucket to ensure users can only upload and access their own files. Example RLS policy for `documents` bucket:
  - **Policy Name:** `user_upload_policy`
  - **Target:** `documents` bucket
  - **Operation:** `Insert` and `Update`
  - **Definition (using `auth.uid()`):** `auth.uid() = request.auth.uid()`
  - **Policy Name:** `user_access_policy`
  - **Target:** `documents` bucket
  - **Operation:** `Select`
  - **Definition (using `auth.uid()`):** `auth.uid() = request.auth.uid()`

### 4.2. Implement Document Upload Component (Direct Upload to Supabase Storage)

- Create a document upload component, e.g., `components/document-upload.tsx`, that allows users to upload files directly to Supabase Storage from the frontend:

  ```typescript:components/document-upload.tsx
  // components/document-upload.tsx
  &quot;use client&quot;;
  import { useState } from &apos;react&apos;;
  import { supabase } from &apos;@/lib/supabaseClient&apos;;
  import { useSupabaseAuth } from &apos;@/providers/supabase-auth-provider&apos;;

  export default function DocumentUpload() {
    const [uploading, setUploading] = useState(false);
    const { session } = useSupabaseAuth();

    const handleFileChange = async (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {
      const file = event.target.files?.[0];
      if (!file || !session?.user) return;

      setUploading(true);

      try {
        const fileExt = file.name.split(&apos;.&apos;).pop();
        const filePath = `${session.user.id}/${Date.now()}-${Math.random()}.${fileExt}`;

        const { data, error } = await supabase.storage
          .from(&apos;documents&apos;) // Replace &apos;documents&apos; with your bucket name
          .upload(filePath, file);

        if (error) {
          throw error;
        }

        const storageUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/${&apos;documents&apos;}/${data.path}`;
        console.log(&apos;File uploaded successfully to:&apos;, storageUrl);
        alert(&apos;File uploaded successfully!&apos;);
        // Optionally, update document metadata in database here using a server action
      } catch (error: any) {
        console.error(&apos;Error uploading file:&apos;, error);
        alert(&apos;Failed to upload file.&apos;);
      } finally {
        setUploading(false);
      }
    };

    return (
      &lt;div&gt;
        &lt;input type=&quot;file&quot; onChange={handleFileChange} disabled={uploading} /&gt;
        {uploading &amp;&amp; &lt;p&gt;Uploading...&lt;/p&gt;}
      &lt;/div&gt;
    );
  }
  ```

### 4.3. Update Database Schema and Server Actions (if needed)

- **Update `documents` table schema in `docs/Schema.md` and `schema.ts`**: Ensure `storage_url` column is present and correctly reflects Supabase Storage URLs.
- **Update Server Actions**: If you are saving document metadata to the database, create or update server actions to:
  - Receive document metadata (filename, user ID, storage URL).
  - Insert document record into the `documents` table, including the `storage_url` from Supabase Storage.

## 5. Component Updates

- **Authentication Components:**
  - `app/(auth)/login/page.tsx` (Updated in 3.1)
  - `app/(auth)/register/page.tsx` (if exists, update similarly to login)
  - `components/auth-wizard/*` (any auth-related components - remove or replace NextAuth specific logic)
  - Update to use `useSupabaseAuth` hook and Supabase Auth methods.
- **Document Upload Component:**
  - `components/document-upload.tsx` (Updated in 4.2)
- **User Profile/Dashboard Components:**
  - `app/dashboard/page.tsx`
  - `components/user-profile.tsx`
  - In Server Components, use `const { data: { session } } = await supabase.auth.getSession()` to get session server-side.
  - In Client Components, use `useSupabaseAuth` hook for session management.
- **Layout Providers:**
  - `providers/editor-provider.tsx` (Zustand provider - ensure compatibility, no auth logic here)
  - `providers/supabase-auth-provider.tsx` (Created in 2.3, wrap `app/layout.tsx`)
  - Ensure correct nesting and context providing.

## 6. Server Action Updates

- **Authentication-related Server Actions:** Remove any server actions related to NextAuth. Supabase Auth is handled client-side or via `supabase.auth.getSession()` in server components.
- **Document Upload Server Action (if using Server Action for upload):** Update to handle file upload to Supabase Storage and database updates.
- **Any Server Actions requiring User Session:** Use `const { data: { session } } = await supabase.auth.getSession()` at the beginning of your server action to get user context from Supabase Auth.

  ```typescript:app/actions/documents.ts
  // app/actions/documents.ts
  &apos;use server&apos;;
  import { auth } from &apos;@/auth&apos;; // REMOVE - NextAuth import
  import { supabase } from &apos;@/lib/supabaseClient&apos;;
  import { revalidatePath } from &apos;next/cache&apos;;
  import { createServerComponentClient } from &apos;@supabase/auth-helpers-nextjs&apos;
  import { cookies } from &apos;next/headers&apos;


  export async function uploadDocument(formData: FormData) {
    const file: File | null = formData.get(&apos;document&apos;) as unknown as File
    const companyId = formData.get(&apos;companyId&apos;) as string

    if (!file || !companyId) {
      console.error(&apos;File or companyId missing&apos;);
      return { error: &apos;File or companyId missing&apos; };
    }

    const cookieStore = cookies()
    const supabaseServerClient = createServerComponentClient({ cookies: () =&gt; cookieStore })

    const { data: { session }, error: sessionError } = await supabaseServerClient.auth.getSession() // Get session server-side

    if (sessionError || !session?.user) {
      console.error(&apos;Authentication error:&apos;, sessionError);
      return { error: &apos;Authentication required&apos; };
    }


    try {
      const fileExt = file.name.split(&apos;.&apos;).pop();
      const filePath = `${session.user.id}/${Date.now()}-${Math.random()}.${fileExt}`;

      const { data: storageData, error: storageError } = await supabaseServerClient.storage // Use supabaseServerClient
        .from(&apos;documents&apos;) // Replace &apos;documents&apos; with your bucket name
        .upload(filePath, file);

      if (storageError) {
        throw storageError;
      }

      const storageUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/${&apos;documents&apos;}/${storageData.path}`;


      // Example: Save document metadata to database (adjust to your schema)
      const { error: dbError } = await supabaseServerClient // Use supabaseServerClient
        .from(&apos;documents&apos;)
        .insert({
          user_id: session.user.id,
          company_id: companyId,
          file_name: file.name,
          storage_url: storageUrl,
          processed_text: &apos;PENDING_PROCESSING&apos;, // Initial status
          metadata: { size: file.size, type: file.type },
        });

      if (dbError) {
        throw dbError;
      }


      revalidatePath(&apos;/dashboard&apos;); // Revalidate dashboard to show updated documents
      return { success: true, storageUrl };

    } catch (error: any) {
      console.error(&apos;Server Action - Error uploading document:&apos;, error);
      return { error: error.message };
    }
  }

  ```

## 7. Testing

- **Authentication Flow Testing:**
  - Test login, logout, session persistence, and protected routes.
  - Test different authentication methods (OTP, social logins if implemented).
- **Document Upload Flow Testing:**
  - Test file upload to Supabase Storage.
  - Verify RLS policies are working correctly (users can only access their own files).
  - Test error handling during upload.
- **Overall System Testing:**
  - Ensure all features that rely on authentication and document storage are working correctly with Supabase Auth and Storage.

## 8. Dependencies Update

- **Remove NextAuth:**
  ```bash
  pnpm remove next-auth
  ```
- **Update Supabase Client:** Ensure `@supabase/supabase-js` is updated to the latest version.

## 9. File Structure Changes

- `lib/supabaseClient.ts`: Supabase client initialization.
- `providers/supabase-auth-provider.tsx`: Authentication context provider.
- Adjust file locations as needed for updated components and server actions.

## 10. Rollback Plan

- Use Git branches for incremental changes and easy rollback.
- Keep NextAuth setup in a separate branch until Supabase Auth is verified.

---

This updated `plan.md` is tailored for the Next.js App Router and SSR with Supabase Auth and Storage. It includes code examples and specific steps for each stage of the migration.

Let me know if you have any specific questions or need further clarification on any part of this plan!</file><file path="postcss.config.mjs">export default { plugins: { &apos;@tailwindcss/postcss&apos;: {} } };</file><file path="prettier.config.js">module.exports = {
  endOfLine: &apos;lf&apos;,
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  printWidth: 100,
  trailingComma: &apos;es5&apos;,
  importOrder: [
    &apos;^(react/(.*)$)|^(react$)&apos;,
    &apos;^(next/(.*)$)|^(next$)&apos;,
    &apos;&lt;THIRD_PARTY_MODULES&gt;&apos;,
    &apos;&apos;,
    &apos;^@/types$&apos;,
    &apos;^@/env(.*)$&apos;,
    &apos;^@/types/(.*)$&apos;,
    &apos;^@/config/(.*)$&apos;,
    &apos;^@/lib/(.*)$&apos;,
    &apos;^@/hooks/(.*)$&apos;,
    &apos;^@/components/ui/(.*)$&apos;,
    &apos;^@/components/(.*)$&apos;,
    &apos;^@/res/(.*)$&apos;,
    &apos;^@/styles/(.*)$&apos;,
    &apos;^@/app/(.*)$&apos;,
    &apos;&apos;,
    &apos;^[./]&apos;
  ],
  importOrderSeparation: false,
  importOrderSortSpecifiers: true,
  importOrderBuiltinModulesToTop: true,
  importOrderParserPlugins: [&apos;typescript&apos;, &apos;jsx&apos;, &apos;decorators-legacy&apos;],
  importOrderMergeDuplicateImports: true,
  importOrderCombineTypeAndValueImports: true,
  plugins: [&apos;@ianvs/prettier-plugin-sort-imports&apos;]
};</file><file path="tailwind.config.ts">import type { Config } from &quot;tailwindcss&quot;;

const config: Config = {

    content: [
    &quot;./pages/**/*.{js,ts,jsx,tsx,mdx}&quot;,
    &quot;./components/**/*.{js,ts,jsx,tsx,mdx}&quot;,
    &quot;./app/**/*.{js,ts,jsx,tsx,mdx}&quot;,
  ],
  theme: {
  	extend: {
  		borderRadius: {
  			lg: &apos;var(--radius)&apos;,
  			md: &apos;calc(var(--radius) - 2px)&apos;,
  			sm: &apos;calc(var(--radius) - 4px)&apos;
  		},
  		colors: {
  			background: &apos;hsl(var(--background))&apos;,
  			foreground: &apos;hsl(var(--foreground))&apos;,
  			card: {
  				DEFAULT: &apos;hsl(var(--card))&apos;,
  				foreground: &apos;hsl(var(--card-foreground))&apos;
  			},
  			popover: {
  				DEFAULT: &apos;hsl(var(--popover))&apos;,
  				foreground: &apos;hsl(var(--popover-foreground))&apos;
  			},
  			primary: {
  				DEFAULT: &apos;hsl(var(--primary))&apos;,
  				foreground: &apos;hsl(var(--primary-foreground))&apos;
  			},
  			secondary: {
  				DEFAULT: &apos;hsl(var(--secondary))&apos;,
  				foreground: &apos;hsl(var(--secondary-foreground))&apos;
  			},
  			muted: {
  				DEFAULT: &apos;hsl(var(--muted))&apos;,
  				foreground: &apos;hsl(var(--muted-foreground))&apos;
  			},
  			accent: {
  				DEFAULT: &apos;hsl(var(--accent))&apos;,
  				foreground: &apos;hsl(var(--accent-foreground))&apos;
  			},
  			destructive: {
  				DEFAULT: &apos;hsl(var(--destructive))&apos;,
  				foreground: &apos;hsl(var(--destructive-foreground))&apos;
  			},
  			border: &apos;hsl(var(--border))&apos;,
  			input: &apos;hsl(var(--input))&apos;,
  			ring: &apos;hsl(var(--ring))&apos;,
  			chart: {
  				&apos;1&apos;: &apos;hsl(var(--chart-1))&apos;,
  				&apos;2&apos;: &apos;hsl(var(--chart-2))&apos;,
  				&apos;3&apos;: &apos;hsl(var(--chart-3))&apos;,
  				&apos;4&apos;: &apos;hsl(var(--chart-4))&apos;,
  				&apos;5&apos;: &apos;hsl(var(--chart-5))&apos;
  			}
  		}
  	}
  },
  plugins: [require(&quot;tailwindcss-animate&quot;)],

};
export default config;</file><file path="tsconfig.json">{
  &quot;compilerOptions&quot;: {
    &quot;target&quot;: &quot;es2022&quot;,
    &quot;lib&quot;: [&quot;dom&quot;, &quot;dom.iterable&quot;, &quot;esnext&quot;],
    &quot;allowJs&quot;: true,
    &quot;skipLibCheck&quot;: true,
    &quot;strictNullChecks&quot;: true,
    &quot;strictFunctionTypes&quot;: true,
    &quot;strictBindCallApply&quot;: true,
    &quot;strictPropertyInitialization&quot;: true,
    &quot;noImplicitThis&quot;: true,
    &quot;noImplicitAny&quot;: true,
    &quot;alwaysStrict&quot;: true,
    &quot;forceConsistentCasingInFileNames&quot;: true,
    &quot;noEmit&quot;: true,
    &quot;esModuleInterop&quot;: true,
    &quot;module&quot;: &quot;esnext&quot;,
    &quot;moduleResolution&quot;: &quot;bundler&quot;,
    &quot;resolveJsonModule&quot;: true,
    &quot;isolatedModules&quot;: true,
    &quot;jsx&quot;: &quot;preserve&quot;,
    &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@/*&quot;: [&quot;./*&quot;]
    },
    &quot;incremental&quot;: true,
    &quot;noFallthroughCasesInSwitch&quot;: true,
    &quot;importHelpers&quot;: true,
    &quot;useUnknownInCatchVariables&quot;: false,
    &quot;plugins&quot;: [
      {
        &quot;name&quot;: &quot;next&quot;
      }
    ],
    &quot;strict&quot;: true
  },
  &quot;include&quot;: [
    &quot;next-env.d.ts&quot;,
    &quot;**/*.ts&quot;,
    &quot;**/*.tsx&quot;,
    &quot;.next/types/**/*.ts&quot;,
    &quot;types/global.d.ts&quot;, // Add this line
    &quot;next.config.ts&quot;
  ],
  &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;.next&quot;]
}</file></files></repomix>